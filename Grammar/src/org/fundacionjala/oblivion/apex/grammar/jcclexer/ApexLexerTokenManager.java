/* ApexLexerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ApexLexerTokenManager.java */
/*
 * Copyright (c) 2014, Jalasoft and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Jalasoft or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


package org.fundacionjala.oblivion.apex.grammar.jcclexer;

/** Token Manager. */
@SuppressWarnings("unused")public class ApexLexerTokenManager implements ApexLexerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 26:
         jjmatchedKind = 273;
         return jjMoveNfa_0(0, 0);
      case 33:
         jjmatchedKind = 239;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 259;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1000L);
      case 38:
         jjmatchedKind = 256;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x200000000000000L, 0x200L);
      case 39:
         jjmatchedKind = 206;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 226;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 227;
         return jjMoveNfa_0(0, 0);
      case 42:
         jjmatchedKind = 254;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x80L);
      case 43:
         jjmatchedKind = 252;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000000000L, 0x20L);
      case 44:
         jjmatchedKind = 233;
         return jjMoveNfa_0(0, 0);
      case 45:
         jjmatchedKind = 253;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000000000000L, 0x40L);
      case 46:
         jjmatchedKind = 234;
         return jjMoveNfa_0(0, 0);
      case 47:
         jjmatchedKind = 255;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L, 0x0L, 0x100L);
      case 58:
         jjmatchedKind = 242;
         return jjMoveNfa_0(0, 0);
      case 59:
         jjmatchedKind = 232;
         return jjMoveNfa_0(0, 0);
      case 60:
         jjmatchedKind = 237;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000000000L, 0x12010L);
      case 61:
         jjmatchedKind = 236;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x18000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 238;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40000000000000L, 0xc000L);
      case 63:
         jjmatchedKind = 241;
         return jjMoveNfa_0(0, 0);
      case 64:
         jjmatchedKind = 235;
         return jjMoveNfa_0(0, 0);
      case 91:
         jjmatchedKind = 230;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 231;
         return jjMoveNfa_0(0, 0);
      case 94:
         jjmatchedKind = 258;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x800L);
      case 95:
         jjmatchedKind = 224;
         return jjMoveNfa_0(0, 0);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x3000000000e0L, 0x80005c0000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200000c0L, 0xc00000000700L, 0x10040000000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c0000002L, 0x300000000f800L, 0x20000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000f08L, 0xc000000010000L, 0x20010000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x3c00000000L, 0xe0000L, 0x802000L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c000000000L, 0x100000L, 0x200400L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000600000L, 0x4000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xf80000003000L, 0x2000000e000010L, 0x5000L, 0x0L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000004000L, 0xc0000020000000L, 0x4924900000000800L, 0x2aa9L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x400000000000000L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc000000000000L, 0x300000040000000L, 0x924a400081000000L, 0x1556L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000008000L, 0x1800000180000000L, 0x8200L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000000L, 0x200000000L, 0x2000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x2000000c00000000L, 0x0L, 0x0L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc00000000010034L, 0xc00001f000000000L, 0x2504000000L, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf000000000060000L, 0x60000000001L, 0x24912a0208000007L, 0x0L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x78L, 0x0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x10000080L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000cL, 0x1800000100L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 228;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 257;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x100000000000000L, 0x400L);
      case 125:
         jjmatchedKind = 229;
         return jjMoveNfa_0(0, 0);
      case 126:
         jjmatchedKind = 240;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active3 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x2000L);
      case 61:
         if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x800L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x1000L) != 0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x10000L) != 0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0xc000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x22004040000308L, active1, 0x4000000200801800L, active2, 0x4924900201030800L, active3, 0x2aa9L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4008000L, active1, 0L, active2, 0x140000L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L, active1, 0x20L, active2, 0L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000000000400L, active1, 0x840c001c00010104L, active2, 0x924a4560c0000001L, active3, 0x1556L, active4, 0L);
      case 70:
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000008000L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000000L, active1, 0xa2000002008L, active2, 0x2491200402000100L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1018000020000L, active1, 0xc0000001000200L, active2, 0x1834200480L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000040L, active1, 0x10000000100000L, active2, 0x400000L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x2000000L, active2, 0x800000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00800002000L, active1, 0x2010000c020040L, active2, 0x100004008L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20100004886L, active1, 0x210300003020c002L, active2, 0xa0000000002L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x30L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc0c0040028000000L, active1, 0x40000400001L, active2, 0x8000204L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000L, active2, 0x40L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000010000L, active1, 0x4000000010L, active2, 0L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x908000000000000L, active1, 0x200400140000080L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L, active1, 0xc0000L, active2, 0x2000L, active3, 0L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40020L, active1, 0x10000000400L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 61:
         if ((active4 & 0x2000L) != 0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 2;
         }
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4400000080000000L, active1, 0x45000002000L, active2, 0x408800000L, active3, 0L, active4, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000004L, active1, 0x4L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000000400L, active1, 0L, active2, 0x6000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20004000218L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000020000000L, active1, 0xa0000000010L, active2, 0x10000100L, active3, 0L, active4, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L, active2, 0x10000008000L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300L, active2, 0L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040000000000000L, active1, 0x801004000aL, active2, 0x2491200100000044L, active3, 0L, active4, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8004000000000L, active1, 0xa204400000004000L, active2, 0x40400002L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x81000040000000L, active2, 0x80001000000L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x18100004000L, active1, 0x2010005008000L, active2, 0x200000L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800400000000c0L, active1, 0x10002020500000L, active2, 0x2140000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000040000L, active1, 0x2080000L, active2, 0L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000008010000L, active1, 0x400000200000000L, active2, 0x200000480L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200404000020L, active1, 0x28000000001800L, active2, 0x4924940000000821L, active3, 0x2aa9L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200802040002308L, active1, 0xd082004a0L, active2, 0x9880030000L, active3, 0L, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000800000802L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000800000L, active2, 0x20000000L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x924a400000000000L, active3, 0x1556L, active4, 0L);
      case 89:
      case 121:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0L);
      case 61:
         if ((active4 & 0x8000L) != 0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 3;
         }
         break;
      case 65:
      case 97:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x18028000008L, active1, 0x200110000L, active2, 0x20000000012L, active3, 0L, active4, 0L);
      case 66:
      case 98:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0x10000040000000L, active2, 0L, active3, 0L, active4, 0L);
      case 67:
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x10000000000L, active2, 0x8000000L, active3, 0L, active4, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80080300000a210L, active1, 0xc024000104000000L, active2, 0x8005020228L, active3, 0L, active4, 0L);
      case 71:
      case 103:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0x200000004L, active3, 0L, active4, 0L);
      case 72:
      case 104:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L, active4, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10400L, active1, 0x80000000800120L, active2, 0x20800000L, active3, 0L, active4, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 75:
      case 107:
         if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100100000000080L, active1, 0x2200000000004008L, active2, 0x6000L, active3, 0L, active4, 0L);
      case 77:
      case 109:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L, active4, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000002L, active1, 0x40000000000L, active2, 0x2000040L, active3, 0L, active4, 0L);
      case 79:
      case 111:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0x2080080L, active2, 0x90040000000L, active3, 0L, active4, 0L);
      case 80:
      case 112:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x3400000010L, active2, 0x400000100L, active3, 0L, active4, 0L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000L, active1, 0x8004L, active2, 0x2491200000008400L, active3, 0L, active4, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x480200104000020L, active1, 0x8000000000L, active2, 0xdb6ed40000000081L, active3, 0x3fffL, active4, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x800400000L, active2, 0L, active3, 0L, active4, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0x2000000000000L, active2, 0x140000L, active3, 0L, active4, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x90000000L, active3, 0L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xfffff00000000000L, active3, 0x3fffL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60200000000000L, active1, 0x10000000000010L, active2, 0L, active3, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0x2000000000000000L, active2, 0x4000002L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x8000009000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x801000000000a4L, active1, 0x2000040004204L, active2, 0x40202108000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 71:
      case 103:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L, active2, 0x20004L, active3, 0L);
      case 72:
      case 104:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x500000100000000L, active1, 0x1000400000000L, active2, 0x400000000L, active3, 0L);
      case 75:
      case 107:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000800L, active1, 0x200000000L, active2, 0x800008L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x410L, active1, 0L, active2, 0x1L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000010000L, active1, 0x800080L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x880000000L, active3, 0L);
      case 80:
      case 112:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0x4000000000000000L, active2, 0x100000000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x210800004000000L, active1, 0x20000802080000L, active2, 0x90000000020L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x40000000000L, active2, 0x30000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x4000000000000L, active2, 0x10L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L, active2, 0x6080L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 4;
         }
         break;
      case 89:
      case 121:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2800000L, active3, 0L);
      case 57:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 65:
      case 97:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4000488L, active1, 0x2000040000000020L, active2, 0x4000080L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000004L, active1, 0x4200L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0x6000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x400000000L, active2, 0x10000000fL, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0xfc00000001000000L, active3, 0L);
      case 71:
      case 103:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010000000000200L, active1, 0L, active2, 0x28400000L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0x200010000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L, active2, 0x3800000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200100000000L, active1, 0x800000000L, active2, 0x400000000L, active3, 0x3fffL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000080L, active2, 0x20000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x70000000000000L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2010000000004L, active2, 0xc0080000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x40001000000000L, active1, 0x10L, active2, 0x210000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x700000000000L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x380000000000000L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x3fffL);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200004000000L, active1, 0x2000040000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L, active2, 0x40000000000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x4000100000000000L, active1, 0x200000000L, active2, 0x380700000406000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2800000L, active3, 0L);
      case 71:
      case 103:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 6;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x4000000800000200L, active2, 0xfc00000001000000L, active3, 0L);
      case 75:
      case 107:
         if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 6;
         }
         break;
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2L) != 0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 6;
         }
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x80L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000010L, active2, 0x3880020100000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4L) != 0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4020000L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8L, active1, 0L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x2000000000020L, active2, 0x9L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L, active2, 0x70000000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000004L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc000000000000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x3f0040000000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3L);
      case 69:
      case 101:
         if ((active0 & 0x8L) != 0L)
         {
            jjmatchedKind = 3;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x8L) != 0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80200000000000L, active1, 0L, active2, 0x700001000000L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3c00L);
      case 71:
      case 103:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 7;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L, active2, 0x2800000L, active3, 0L);
      case 75:
      case 107:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 7;
         }
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200400000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x30L);
      case 78:
      case 110:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4000100000000000L, active1, 0x4000010800000000L, active2, 0x3800000000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0x80L, active2, 0L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc0L);
      case 82:
      case 114:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 83:
      case 115:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xfc00000000000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xcL);
      case 89:
      case 121:
         if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x300L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L, active2, 0L, active3, 0x3L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L, active2, 0xfc00000000000000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0xc000000400000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x202800000L, active3, 0x30cL);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x50000000000L, active2, 0L, active3, 0x3c00L);
      case 75:
      case 107:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 8;
         }
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 8;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L, active2, 0x1L, active3, 0x30L);
      case 82:
      case 114:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x70000000000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L, active1, 0L, active2, 0x3800000000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000000080L, active2, 0L, active3, 0xc0L);
      case 89:
      case 121:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0xfc0c000000000000L, active3, 0x3c0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x1L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000L, active3, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xcL);
      case 70:
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 9;
         }
         break;
      case 72:
      case 104:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 9;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2800000L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x30L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3c00L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x70000000000000L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x3L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0x3c00L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2800000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x10000000000L, active2, 0x70000004100000L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x200000000L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0xcL);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0xfc00000000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
         }
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000000000000L, active2, 0L, active3, 0x3c0L);
      case 83:
      case 115:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 10;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0L, active3, 0x30L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0xc000000000000L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0xfc00000000000000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0x3c00L);
      case 68:
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 11;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0L, active3, 0x30L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x4100000L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 11;
         }
         break;
      case 83:
      case 115:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 11;
         }
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 11;
         }
         else if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 11;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x200000000L, active3, 0xc0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x4000000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0xc0L);
      case 72:
      case 104:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 12;
         }
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0L, active3, 0x3c00L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x100000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1c00000000000000L, active3, 0L);
      case 83:
      case 115:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 12;
         }
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0xe000000000000000L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0x3c00L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active1, 0x2000000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0xe000000000000000L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0L, active3, 0xc0L);
      case 83:
      case 115:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 13;
         }
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x1c00000000000000L, active3, 0L);
      case 87:
      case 119:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 13;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0xfc00000000000000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0xc00L);
      case 83:
      case 115:
         if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 14;
         }
         else if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 14;
         }
         break;
      case 89:
      case 121:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0L, active3, 0x3000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2, long old3, long active3){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active3, 0x3000L);
      case 82:
      case 114:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 15;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 15;
         }
         else if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active2, 0x1c00000000000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active2, 0L, active3, 0xc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private int jjMoveStringLiteralDfa16_0(long old2, long active2, long old3, long active3){
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active2, 0L, active3, 0x3c00L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active2, 0x1c00000000000000L, active3, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private int jjMoveStringLiteralDfa17_0(long old2, long active2, long old3, long active3){
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active2, 0x1c00000000000000L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa18_0(active2, 0L, active3, 0x3c00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private int jjMoveStringLiteralDfa18_0(long old2, long active2, long old3, long active3){
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 18;
         }
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 18;
         }
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 18;
         }
         break;
      case 83:
      case 115:
         if ((active3 & 0x1000L) != 0L)
         {
            jjmatchedKind = 204;
            jjmatchedPos = 18;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 18;
         }
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active2, 0L, active3, 0xc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
private int jjMoveStringLiteralDfa19_0(long old2, long active2, long old3, long active3){
   if (((active2 &= old2) | (active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active3, 0xc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
private int jjMoveStringLiteralDfa20_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa21_0(active3, 0xc00L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
private int jjMoveStringLiteralDfa21_0(long old3, long active3){
   if (((active3 &= old3)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 21;
         }
         else if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 21;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 96;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x9dffffffffL & l) != 0L)
                  {
                     if (kind > 225)
                        kind = 225;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  else if (curChar == 47)
                     { jjAddStates(7, 8); }
                  else if (curChar == 46)
                     { jjCheckNAdd(2); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 211)
                        kind = 211;
                     { jjCheckNAddStates(9, 11); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 211)
                        kind = 211;
                     { jjCheckNAddStates(12, 16); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 1:
                  if (curChar == 46)
                     { jjCheckNAdd(2); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 39)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 8:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 11:
                  if (curChar == 39 && kind > 220)
                     kind = 220;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(23, 26); }
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 14:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 221)
                     kind = 221;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x9dffffffffL & l) != 0L && kind > 225)
                     kind = 225;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 22:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(23, 6); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddTwoStates(27, 6); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if (curChar != 46)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 32:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddTwoStates(33, 6); }
                  break;
               case 34:
                  if (curChar == 47)
                     { jjAddStates(7, 8); }
                  break;
               case 35:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 37:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (curChar != 47)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddStates(33, 35); }
                  break;
               case 39:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddStates(33, 35); }
                  break;
               case 40:
                  if ((0x2400L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 41:
                  if (curChar == 10 && kind > 22)
                     kind = 22;
                  break;
               case 42:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if (curChar == 45)
                     { jjAddStates(36, 37); }
                  break;
               case 48:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 50:
                  if (curChar == 45)
                     { jjAddStates(38, 39); }
                  break;
               case 51:
                  if ((0x7000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 207)
                     kind = 207;
                  { jjCheckNAdd(53); }
                  break;
               case 54:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(40, 41); }
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(42, 43); }
                  break;
               case 64:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(66); }
                  break;
               case 66:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L && kind > 207)
                     kind = 207;
                  break;
               case 69:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 70:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(66); }
                  break;
               case 71:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xf000000000000L & l) != 0L)
                     { jjCheckNAdd(56); }
                  break;
               case 73:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 207)
                     kind = 207;
                  { jjCheckNAdd(53); }
                  break;
               case 75:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddTwoStates(77, 78); }
                  break;
               case 79:
                  if (curChar != 48)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddStates(12, 16); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddTwoStates(81, 78); }
                  break;
               case 82:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddTwoStates(82, 78); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(44, 45); }
                  break;
               case 85:
                  if (curChar == 46)
                     { jjCheckNAdd(86); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(86, 87); }
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddTwoStates(89, 6); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 92:
                  if (curChar == 46)
                     { jjCheckNAdd(93); }
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  { jjCheckNAddTwoStates(95, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 221)
                        kind = 221;
                     { jjCheckNAdd(17); }
                  }
                  else if ((0xc000000150000000L & l) != 0L)
                  {
                     if (kind > 225)
                        kind = 225;
                  }
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 6:
                  if ((0x5000000050L & l) != 0L && kind > 215)
                     kind = 215;
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(51, 53); }
                  break;
               case 10:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 221)
                     kind = 221;
                  { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 221)
                     kind = 221;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if ((0xc000000150000000L & l) != 0L && kind > 225)
                     kind = 225;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(54, 55); }
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(56, 57); }
                  break;
               case 31:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(58, 59); }
                  break;
               case 36:
                  if (kind > 20)
                     kind = 20;
                  break;
               case 39:
                  if (kind > 22)
                     kind = 22;
                  { jjAddStates(33, 35); }
                  break;
               case 53:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(60, 61); }
                  break;
               case 62:
                  if ((0x400000004000000L & l) != 0L && kind > 207)
                     kind = 207;
                  break;
               case 78:
                  if ((0x100000001000L & l) != 0L && kind > 211)
                     kind = 211;
                  break;
               case 80:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(81); }
                  break;
               case 81:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 211)
                     kind = 211;
                  { jjCheckNAddTwoStates(81, 78); }
                  break;
               case 83:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 86:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               case 87:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(64, 65); }
                  break;
               case 90:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(91); }
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 93:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(66, 67); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 225)
                     kind = 225;
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(17, 19); }
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 39:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjAddStates(33, 35); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 96 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x1000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x800000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   20, 21, 6, 24, 25, 28, 29, 37, 38, 44, 77, 78, 80, 82, 78, 83, 
   90, 8, 9, 11, 2, 3, 6, 8, 9, 13, 11, 20, 21, 6, 30, 31, 
   6, 39, 40, 42, 48, 75, 51, 73, 62, 63, 64, 69, 84, 85, 91, 92, 
   93, 4, 5, 10, 12, 14, 22, 23, 26, 27, 32, 33, 54, 71, 86, 87, 
   88, 89, 94, 95, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\47", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\137", null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\100", "\75", "\74", "\76", "\41", "\176", "\77", "\72", "\75\76", "\75\75", 
"\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", 
"\52", "\57", "\46", "\174", "\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", 
"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\76\76\76\75", "\74\76", "\32", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 25)
         {
            jjmatchedKind = 25;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 25)
         {
            jjmatchedKind = 25;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 20 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                     input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ApexLexerTokenManager(CharStream stream){


    input_stream = stream;
  }

  /** Constructor. */
  public ApexLexerTokenManager (CharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 96; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, -1, 0, 0, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffdc7ffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff3088ffffL, 
   0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x80000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
static final long[] jjtoMore = {
   0x2300000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 
};
    protected CharStream  input_stream;

    private final int[] jjrounds = new int[96];
    private final int[] jjstateSet = new int[2 * 96];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
