/* ApexParser.java */
/* Generated By:JavaCC: Do not edit this line. ApexParser.java */
/*
 * Copyright (c) 2014, Jalasoft and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Jalasoft or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.fundacionjala.oblivion.apex.grammar.jcclexer;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import org.fundacionjala.oblivion.apex.grammar.parser.AbstractParser;
import org.fundacionjala.oblivion.apex.grammar.parser.ModifierSet;
import org.fundacionjala.oblivion.apex.grammar.parser.exceptions.*;
import com.sun.source.tree.AnnotationTree;
import com.sun.source.tree.BlockTree;
import com.sun.source.tree.BinaryTree;
import com.sun.source.tree.CatchTree;
import com.sun.source.tree.ClassTree;
import com.sun.source.tree.CompilationUnitTree;
import com.sun.source.tree.ExpressionStatementTree;
import com.sun.source.tree.ExpressionTree;
import com.sun.source.tree.IdentifierTree;
import com.sun.source.tree.LiteralTree;
import com.sun.source.tree.MethodInvocationTree;
import com.sun.source.tree.MethodTree;
import com.sun.source.tree.NewArrayTree;
import com.sun.source.tree.NewClassTree;
import com.sun.source.tree.StatementTree;
import com.sun.source.tree.Tree;
import com.sun.source.tree.TryTree;
import com.sun.source.tree.VariableTree;

import javax.lang.model.element.Name;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import org.fundacionjala.oblivion.apex.grammar.ast.AccessorTree;
import org.fundacionjala.oblivion.apex.grammar.ast.ConstructorTree;
import org.fundacionjala.oblivion.apex.grammar.ast.PairExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.PropertyTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLExpressionSelectTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLExpressionFromTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLExpressionWhereTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLConditionExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLFromArgumentTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLLimitExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLOffsetExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLOrderByExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLGroupByExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLFieldExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLSetExpressionValuesTree;
import org.fundacionjala.oblivion.apex.grammar.ast.DMLOperationTree;
import org.fundacionjala.oblivion.apex.grammar.ast.DMLOperationEnum;
import org.fundacionjala.oblivion.apex.grammar.ast.DMLUpsertTree;
import org.fundacionjala.oblivion.apex.grammar.ast.DMLMergeTree;
import org.fundacionjala.oblivion.apex.grammar.ast.ModifiersTree;
import org.fundacionjala.oblivion.apex.grammar.ast.SOQLSelectFunctionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.trigger.TriggerCompilationUnitTree;
import org.fundacionjala.oblivion.apex.grammar.ast.trigger.TriggerDeclarationTree;
import org.fundacionjala.oblivion.apex.grammar.ast.trigger.TriggerParameterTree;
import org.fundacionjala.oblivion.apex.grammar.ast.trigger.TriggerType;
import org.fundacionjala.oblivion.apex.grammar.ast.trigger.TriggerOperation;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLSearchGroupType;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLUpdateType;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLWithDivisionFilterExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLDataCategoryOperator;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLDataCategoryExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLWithDataCategoryExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLWithNetworkExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLWithSnippetExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLUpdateExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLObjectFieldExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLReturningExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLInExpressionTree;
import org.fundacionjala.oblivion.apex.grammar.ast.sosl.SOSLFindExpressionTree;

/**
 * Grammar to parse Apex language.
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class ApexParser extends AbstractParser implements ApexParserConstants {

    /**
     * Helps to define the proper CharStream instance to be used for parsing
     */
    public ApexParser(Reader reader) {
        this(new ApexParserCharStream(new BufferedReader(reader)));
        token_source = new ParserTokenManagerWrapper(new ApexParserCharStream(new BufferedReader(reader)));
    }

    /**
     * Creates a new instance of the class with the given InputStream to read the tokens
     *
     * @param reader the InputStream to read the tokens
     */
    public ApexParser(InputStream reader) {
        this(new InputStreamReader(reader));
    }

    public class Tuple {
        public Object treeObject;
        public Type treeType;
        Tuple() {
            treeObject = null;
            treeType = Type.Empty;
        }
    }

    public enum Type {
        Empty,
        Arguments,
        ExpressionSosl,
        ExpressionSql
    }

/*****************************************
 * THE APEX LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public CompilationUnitTree CompilationUnit() throws ParseException {Tree typeDecl = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case CLASS_KEYWORD:
      case ENUM_KEYWORD:
      case FINAL_KEYWORD:
      case INTERFACE_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case GLOBAL_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case VIRTUAL_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case AT_SEPARATOR:{
        typeDecl = TypeDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case END_OF_FILE_WHITESPACE:{
          jj_consume_token(END_OF_FILE_WHITESPACE);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STUFF_TO_IGNORE:{
          jj_consume_token(STUFF_TO_IGNORE);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (ParseException ex) {
contextErrorRecover(new ContextParseException(ex));
        if (typeDecl == null) {
            typeDecl = factory.createEmptyClass();
        }
    }
{if ("" != null) return factory.createCompilationUnit(typeDecl);}
    throw new Error("Missing return statement in function");
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public ModifiersTree Modifiers() throws ParseException {LinkedHashMap<Integer, Token> modifiers = new LinkedHashMap<Integer, Token>();
    List<AnnotationTree> annotations = new ArrayList<AnnotationTree>();
    AnnotationTree annotation;
    Token modifierToken;
    Token annotationTypeToken;
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC_KEYWORD:{
        modifierToken = jj_consume_token(PUBLIC_KEYWORD);
modifiers.putIfAbsent(ModifierSet.PUBLIC, modifierToken);
        break;
        }
      case STATIC_KEYWORD:{
        modifierToken = jj_consume_token(STATIC_KEYWORD);
modifiers.putIfAbsent(ModifierSet.STATIC, modifierToken);
        break;
        }
      case PROTECTED_KEYWORD:{
        modifierToken = jj_consume_token(PROTECTED_KEYWORD);
modifiers.putIfAbsent(ModifierSet.PROTECTED, modifierToken);
        break;
        }
      case PRIVATE_KEYWORD:{
        modifierToken = jj_consume_token(PRIVATE_KEYWORD);
modifiers.putIfAbsent(ModifierSet.PRIVATE, modifierToken);
        break;
        }
      case GLOBAL_KEYWORD:{
        modifierToken = jj_consume_token(GLOBAL_KEYWORD);
modifiers.putIfAbsent(ModifierSet.GLOBAL, modifierToken);
        break;
        }
      case FINAL_KEYWORD:{
        modifierToken = jj_consume_token(FINAL_KEYWORD);
modifiers.putIfAbsent(ModifierSet.FINAL, modifierToken);
        break;
        }
      case ABSTRACT_KEYWORD:{
        modifierToken = jj_consume_token(ABSTRACT_KEYWORD);
modifiers.putIfAbsent(ModifierSet.ABSTRACT, modifierToken);
        break;
        }
      case TRANSIENT_KEYWORD:{
        modifierToken = jj_consume_token(TRANSIENT_KEYWORD);
modifiers.putIfAbsent(ModifierSet.TRANSIENT, modifierToken);
        break;
        }
      case VIRTUAL_KEYWORD:{
        annotationTypeToken = jj_consume_token(VIRTUAL_KEYWORD);
annotations.add(factory.createAnnotation(annotationTypeToken));
        break;
        }
      case OVERRIDE_KEYWORD:{
        annotationTypeToken = jj_consume_token(OVERRIDE_KEYWORD);
annotations.add(factory.createAnnotation(annotationTypeToken));
        break;
        }
      case TESTMETHOD_KEYWORD:{
        annotationTypeToken = jj_consume_token(TESTMETHOD_KEYWORD);
annotations.add(factory.createAnnotation(annotationTypeToken));
        break;
        }
      case AT_SEPARATOR:{
        annotation = Annotation();
annotations.add(annotation);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return factory.createModifier(modifiers, annotations);}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public Tree TypeDeclaration() throws ParseException {ClassTree typeDeclaration;
    ModifiersTree modifiers;
    modifiers = Modifiers();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABSTRACT_KEYWORD:
    case CLASS_KEYWORD:
    case FINAL_KEYWORD:
    case INTERFACE_KEYWORD:
    case OVERRIDE_KEYWORD:
    case PRIVATE_KEYWORD:
    case PROTECTED_KEYWORD:
    case PUBLIC_KEYWORD:
    case STATIC_KEYWORD:
    case TRANSIENT_KEYWORD:
    case GLOBAL_KEYWORD:
    case TESTMETHOD_KEYWORD:
    case VIRTUAL_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case AT_SEPARATOR:{
      typeDeclaration = ClassOrInterfaceDeclaration(modifiers);
      break;
      }
    case ENUM_KEYWORD:{
      typeDeclaration = EnumDeclaration(modifiers);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return typeDeclaration;}
    throw new Error("Missing return statement in function");
  }

  final public ClassTree ClassOrInterfaceDeclaration(ModifiersTree modifiers) throws ParseException {boolean isInterface = false;
    Token type = null;
    Token identifier;
    Token blockStart = null;
    Token blockEnd = null;
    List<Token> sharingRules = new ArrayList<Token>();
    List<? extends Tree> body;
    Tree extendsClause = null;
    List<? extends Tree> implementsClause = new ArrayList<Tree>();
    ModifiersTree otherModifiers;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABSTRACT_KEYWORD:
    case CLASS_KEYWORD:
    case FINAL_KEYWORD:
    case OVERRIDE_KEYWORD:
    case PRIVATE_KEYWORD:
    case PROTECTED_KEYWORD:
    case PUBLIC_KEYWORD:
    case STATIC_KEYWORD:
    case TRANSIENT_KEYWORD:
    case GLOBAL_KEYWORD:
    case TESTMETHOD_KEYWORD:
    case VIRTUAL_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case AT_SEPARATOR:{
      sharingRules = getSharingRules(sharingRules);
      otherModifiers = Modifiers();
      type = jj_consume_token(CLASS_KEYWORD);
modifiers.addModifiers(otherModifiers);
      break;
      }
    case INTERFACE_KEYWORD:{
      type = jj_consume_token(INTERFACE_KEYWORD);
isInterface = true;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS_KEYWORD:{
      extendsClause = ExtendsList(isInterface);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPLEMENTS_KEYWORD:{
      implementsClause = ImplementsList(isInterface);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    blockStart = jj_consume_token(LBRACE_SEPARATOR);
    body = ClassOrInterfaceBody(isInterface);
    blockEnd = jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return factory.createClass(modifiers, sharingRules, type, identifier, blockStart, blockEnd, body, implementsClause, extendsClause);}
    throw new Error("Missing return statement in function");
  }

  final public List<Token> getSharingRules(List<Token> sharingRules) throws ParseException {Token rule;
    Token sharing;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WITHOUT_OTHER:
      case WITH_KEYWORD:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WITH_KEYWORD:{
          rule = jj_consume_token(WITH_KEYWORD);
          break;
          }
        case WITHOUT_OTHER:{
          rule = jj_consume_token(WITHOUT_OTHER);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        sharing = jj_consume_token(SHARING_KEYWORD);
sharingRules.add(rule);
                sharingRules.add(sharing);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    } catch (ParseException ex) {
contextErrorRecover(new ClassTypeException(ex));
    }
{if ("" != null) return sharingRules;}
    throw new Error("Missing return statement in function");
  }

  final public Tree ExtendsList(boolean isInterface) throws ParseException {boolean extendsMoreThanOne = false;
    Tree type;
    Token exceptionToken;
    jj_consume_token(EXTENDS_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXCEPTION_KEYWORD:{
      exceptionToken = jj_consume_token(EXCEPTION_KEYWORD);
type = factory.createIdentifier(exceptionToken);
      break;
      }
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case GROUP_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case LIMIT_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      type = ClassOrInterfaceType();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA_SEPARATOR);
      ClassOrInterfaceType();
extendsMoreThanOne = true;
    }
if (extendsMoreThanOne && !isInterface) {
            contextErrorRecover(new ParseException("A class cannot extend more than one other class"));
        }
        {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> ImplementsList(boolean isInterface) throws ParseException {List<Tree> implementsList = new ArrayList<Tree>();
    Tree type;
    jj_consume_token(IMPLEMENTS_KEYWORD);
    type = ClassOrInterfaceErasureType();
implementsList.add(type);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA_SEPARATOR);
      type = ClassOrInterfaceErasureType();
implementsList.add(type);
    }
if (isInterface) {
            contextErrorRecover(new ParseException("An interface cannot implement other interfaces"));
        }
        {if ("" != null) return implementsList;}
    throw new Error("Missing return statement in function");
  }

  final public ClassTree EnumDeclaration(ModifiersTree modifiers) throws ParseException {List<? extends ExpressionTree> body = new ArrayList<ExpressionTree>();
    Token type = null;
    Token name = null;
    Token blockStart = null;
    Token blockEnd = null;
    try {
      type = jj_consume_token(ENUM_KEYWORD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        name = AllowedKeywordsAsIdentifier();
        break;
        }
      case GROUP_KEYWORD:
      case LIMIT_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case WITHOUT_OTHER:{
        name = SpecialKeywordsAsIdentifier();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      blockStart = jj_consume_token(LBRACE_SEPARATOR);
      body = EnumBody();
      blockEnd = jj_consume_token(RBRACE_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new EnumTypeException(ex));
    }
{if ("" != null) return factory.createClass(modifiers, null, type, name, blockStart, blockEnd, body);}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends ExpressionTree> EnumBody() throws ParseException {List<ExpressionTree> identifiers = new ArrayList<ExpressionTree>();
    Token identifier;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
identifiers.add(factory.createIdentifier(identifier));
    label_4:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA_SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        identifier = AllowedKeywordsAsIdentifier();
        break;
        }
      case GROUP_KEYWORD:
      case LIMIT_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case WITHOUT_OTHER:{
        identifier = SpecialKeywordsAsIdentifier();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
identifiers.add(factory.createIdentifier(identifier));
    }
{if ("" != null) return identifiers;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> ClassOrInterfaceBody(boolean isInterface) throws ParseException {List<? extends Tree> member;
    List<Tree> members = new ArrayList<Tree>();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case CLASS_KEYWORD:
      case ENUM_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FINAL_KEYWORD:
      case INTERFACE_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case GLOBAL_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case TOLABEL_KEYWORD:
      case VIRTUAL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:
      case LBRACE_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case AT_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      member = ClassOrInterfaceMember(isInterface);
members.addAll(member);
    }
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> ClassOrInterfaceMember(boolean isInterface) throws ParseException {boolean isNestedInterface = false;
    ModifiersTree modifiers;
    Tree member;
    List<VariableTree> variables;
    StatementTree initializer;
    if (jj_2_7(2147483647)) {
      initializer = Initializer();
if (isInterface) {
            contextErrorRecover(new ParseException("An interface cannot have initializers"));
        }
        {if ("" != null) return Collections.singletonList(initializer);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case CLASS_KEYWORD:
      case ENUM_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FINAL_KEYWORD:
      case INTERFACE_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case GLOBAL_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case TOLABEL_KEYWORD:
      case VIRTUAL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:
      case AT_SEPARATOR:{
        modifiers = Modifiers();
        if (jj_2_3(2)) {
          member = ClassOrInterfaceDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ENUM_KEYWORD:{
            member = EnumDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
            break;
            }
          default:
            jj_la1[18] = jj_gen;
            if (jj_2_4(2147483647)) {
              member = ConstructorDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
            } else if (jj_2_5(2147483647)) {
              variables = FieldDeclaration(modifiers);
{if ("" != null) return variables;}
            } else if (jj_2_6(2147483647)) {
              member = PropertyDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EXCEPTION_KEYWORD:
              case LIST_KEYWORD:
              case MAP_KEYWORD:
              case TRANSIENT_KEYWORD:
              case VOID_KEYWORD:
              case ITERATOR_KEYWORD:
              case GROUP_KEYWORD:
              case RETURNING_KEYWORD:
              case SEARCH_KEYWORD:
              case STAT_KEYWORD:
              case CONVERTCURRENCY_KEYWORD:
              case LIMIT_KEYWORD:
              case SAVEPOINT_KEYWORD:
              case TOLABEL_KEYWORD:
              case FIRST_KEYWORD:
              case LAST_KEYWORD:
              case OFFSET_KEYWORD:
              case DATA_KEYWORD:
              case CATEGORY_KEYWORD:
              case NETWORK_KEYWORD:
              case SHARING_KEYWORD:
              case WITHOUT_OTHER:
              case SET_KEYWORD:
              case GET_KEYWORD:
              case AFTER_KEYWORD:
              case BEFORE_KEYWORD:
              case TODAY_KEYWORD:
              case YESTERDAY_KEYWORD:
              case TOMORROW_KEYWORD:
              case LAST_WEEK_KEYWORD:
              case THIS_WEEK_KEYWORD:
              case NEXT_WEEK_KEYWORD:
              case LAST_MONTH_KEYWORD:
              case THIS_MONTH_KEYWORD:
              case NEXT_MONTH_KEYWORD:
              case LAST_90_DAYS_KEYWORD:
              case NEXT_90_DAYS_KEYWORD:
              case THIS_QUARTER_KEYWORD:
              case LAST_QUARTER_KEYWORD:
              case NEXT_QUARTER_KEYWORD:
              case THIS_YEAR_KEYWORD:
              case LAST_YEAR_KEYWORD:
              case NEXT_YEAR_KEYWORD:
              case THIS_FISCAL_QUARTER_KEYWORD:
              case LAST_FISCAL_QUARTER_KEYWORD:
              case NEXT_FISCAL_QUARTER_KEYWORD:
              case THIS_FISCAL_YEAR_KEYWORD:
              case LAST_FISCAL_YEAR_KEYWORD:
              case NEXT_FISCAL_YEAR_KEYWORD:
              case LAST_N_DAYS_KEYWORD:
              case NEXT_N_DAYS_KEYWORD:
              case NEXT_N_WEEKS_KEYWORD:
              case LAST_N_WEEKS_KEYWORD:
              case NEXT_N_MONTHS_KEYWORD:
              case LAST_N_MONTHS_KEYWORD:
              case NEXT_N_QUARTERS_KEYWORD:
              case LAST_N_QUARTERS_KEYWORD:
              case NEXT_N_YEARS_KEYWORD:
              case LAST_N_YEARS_KEYWORD:
              case NEXT_N_FISCAL_QUARTERS_KEYWORD:
              case LAST_N_FISCAL_QUARTERS_KEYWORD:
              case NEXT_N_FISCAL_YEARS_KEYWORD:
              case LAST_N_FISCAL_YEARS_KEYWORD:
              case IDENTIFIER:{
                member = MethodDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
                break;
                }
              default:
                jj_la1[19] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        break;
        }
      case SEMICOLON_SEPARATOR:{
        jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return Collections.singletonList(factory.createEmptyStatement());}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<VariableTree> FieldDeclaration(ModifiersTree modifiers) throws ParseException {List<VariableTree> variables = new ArrayList<VariableTree>();
    VariableTree variable;
    Tree type;
    Token semicolon;
    try {
      // Modifiers are already matched in the caller
              type = Type();
      variable = VariableDeclarator(modifiers, type);
variables.add(variable);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA_SEPARATOR);
        variable = VariableDeclarator(modifiers, type);
variables.add(variable);
      }
      semicolon = jj_consume_token(SEMICOLON_SEPARATOR);
factory.setSemicolonToVariableTree(variables, semicolon);
    } catch (ParseException ex) {
contextErrorRecover(new IllegalVariableDeclarationException(ex));
    }
{if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public VariableTree VariableDeclarator(ModifiersTree modifiers, Tree type) throws ParseException {Token identifier;
    ExpressionTree expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN_OPERATOR:{
      jj_consume_token(ASSIGN_OPERATOR);
      expression = VariableInitializer();
{if ("" != null) return factory.createVariable(type, identifier, modifiers, expression);}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return factory.createVariable(type, identifier, modifiers);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree VariableInitializer() throws ParseException {ExpressionTree expression;
    Token thisToken;
    if (jj_2_8(2)) {
      expression = Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS_KEYWORD:{
        thisToken = jj_consume_token(THIS_KEYWORD);
expression = factory.createIdentifier(thisToken);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public SOQLExpressionTree ExpressionSql() throws ParseException {SOQLExpressionSelectTree expressionSelect;
    SOQLExpressionFromTree expressionFrom;
    ExpressionTree optionalExpression = null;
    List <ExpressionTree> optionalStatements = new ArrayList<ExpressionTree>();
    expressionSelect = ExpressionSelect();
    expressionFrom = ExpressionFrom();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE_KEYWORD:{
      optionalExpression = ExpressionWhere();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH_KEYWORD:{
      SoqlWithExpression();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GROUP_KEYWORD:{
      jj_consume_token(GROUP_KEYWORD);
      jj_consume_token(BY_KEYWORD);
      optionalExpression = SoqlGroupByExpression();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER_KEYWORD:{
      jj_consume_token(ORDER_KEYWORD);
      jj_consume_token(BY_KEYWORD);
      optionalExpression = SoqlOrderByExpression();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIMIT_KEYWORD:{
      optionalExpression = SoqlLimitExpression();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OFFSET_KEYWORD:{
      optionalExpression = SoqlOffsetExpression();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return factory.createSOQLExpression(expressionSelect,expressionFrom,optionalStatements);}
    throw new Error("Missing return statement in function");
  }

  final public void SoqlWithExpression() throws ParseException {
    jj_consume_token(WITH_KEYWORD);
    if (jj_2_9(2147483647)) {
      jj_consume_token(DATA_KEYWORD);
      jj_consume_token(CATEGORY_KEYWORD);
      AllowedKeywordsAsIdentifier();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case INT_KEYWORD:
      case PACKAGE_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:{
        SoqlParenthesizedExpression();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANDLITERAL_KEYWORD:
      case OR_KEYWORD:
      case ABOVE_KEYWORD:
      case AT_KEYWORD:
      case ABOVE_OR_BELOW_KEYWORD:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABOVE_KEYWORD:{
        jj_consume_token(ABOVE_KEYWORD);
        break;
        }
      case AT_KEYWORD:{
        jj_consume_token(AT_KEYWORD);
        break;
        }
      case OR_KEYWORD:{
        jj_consume_token(OR_KEYWORD);
        break;
        }
      case ANDLITERAL_KEYWORD:{
        jj_consume_token(ANDLITERAL_KEYWORD);
        break;
        }
      case ABOVE_OR_BELOW_KEYWORD:{
        jj_consume_token(ABOVE_OR_BELOW_KEYWORD);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        AllowedKeywordsAsIdentifier();
        break;
        }
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        AllowedKeywordsAsIdentifier();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA_SEPARATOR:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA_SEPARATOR);
          AllowedKeywordsAsIdentifier();
        }
        jj_consume_token(RPAREN_SEPARATOR);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public SOQLLimitExpressionTree SoqlLimitExpression() throws ParseException {ExpressionTree soqlValue;
    jj_consume_token(LIMIT_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON_OPERATOR:{
      jj_consume_token(COLON_OPERATOR);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    soqlValue = SoqlValue();
{if ("" != null) return factory.createSOQLLimitExpressionTree(soqlValue);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLOffsetExpressionTree SoqlOffsetExpression() throws ParseException {ExpressionTree soqlValue;
    jj_consume_token(OFFSET_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON_OPERATOR:{
      jj_consume_token(COLON_OPERATOR);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    soqlValue = SoqlValue();
{if ("" != null) return factory.createSOQLOffsetExpressionTree(soqlValue);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLGroupByExpressionTree SoqlGroupByExpression() throws ParseException {ExpressionTree soqlGroupByExpression = null;
    List<MethodInvocationTree> methodInvocations = new ArrayList<MethodInvocationTree>();
    List<IdentifierTree> identifiers = new ArrayList<IdentifierTree>();
    List<? extends ExpressionTree> arguments = new ArrayList<ExpressionTree>();
    Token identifierToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifierToken = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifierToken = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_SEPARATOR:{
      arguments = Arguments();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
if(arguments.isEmpty()){
                identifiers.add(factory.createIdentifier(identifierToken));
            } else {
                methodInvocations.add(factory.createMethodInvocation(factory.createIdentifier(identifierToken),arguments));
            }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA_SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        identifierToken = AllowedKeywordsAsIdentifier();
        break;
        }
      case GROUP_KEYWORD:
      case LIMIT_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case WITHOUT_OTHER:{
        identifierToken = SpecialKeywordsAsIdentifier();
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN_SEPARATOR:{
        arguments = Arguments();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
if(arguments.isEmpty()){
                identifiers.add(factory.createIdentifier(identifierToken));
            } else {
                methodInvocations.add(factory.createMethodInvocation(factory.createIdentifier(identifierToken),arguments));
            }
    }
{if ("" != null) return factory.createSOQLGroupByExpression(identifiers, methodInvocations);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLOrderByExpressionTree SoqlOrderByExpression() throws ParseException {ExpressionTree soqlOrderByExpression = null;
    Name name;
    List <IdentifierTree> identifiers = new ArrayList<IdentifierTree>();
    name = OrderByField();
identifiers.add(factory.createIdentifier(name));
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA_SEPARATOR);
      name = OrderByField();
identifiers.add(factory.createIdentifier(name));
    }
{if ("" != null) return factory.createSOQLOrderByExpression(identifiers);}
    throw new Error("Missing return statement in function");
  }

  final public Name OrderByField() throws ParseException {Name name;
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASC_KEYWORD:
    case DESC_KEYWORD:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASC_KEYWORD:{
        jj_consume_token(ASC_KEYWORD);
        break;
        }
      case DESC_KEYWORD:{
        jj_consume_token(DESC_KEYWORD);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULLS_KEYWORD:{
      jj_consume_token(NULLS_KEYWORD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FIRST_KEYWORD:{
        jj_consume_token(FIRST_KEYWORD);
        break;
        }
      case LAST_KEYWORD:{
        jj_consume_token(LAST_KEYWORD);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      ;
    }
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public SOQLExpressionSelectTree ExpressionSelect() throws ParseException {IdentifierTree identifier;
    SOQLExpressionTree query;
    SOQLSelectFunctionTree function;
    List<IdentifierTree> identifiers = new ArrayList<IdentifierTree>();
    List<SOQLExpressionTree> querys = new ArrayList<SOQLExpressionTree>();
    List<SOQLSelectFunctionTree> functions = new ArrayList<SOQLSelectFunctionTree>();
    jj_consume_token(SELECT_KEYWORD);
    if (jj_2_10(2147483647)) {
      function = SoqlSelectFunction();
functions.add(function);
    } else if (jj_2_11(2147483647)) {
      identifier = SoqlSelectIdentifier();
identifiers.add(identifier);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        query = ExpressionSql();
querys.add(query);
        jj_consume_token(RPAREN_SEPARATOR);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_11:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(COMMA_SEPARATOR);
      if (jj_2_13(2147483647)) {
        function = SoqlSelectFunction();
functions.add(function);
      } else if (jj_2_14(2147483647)) {
        identifier = SoqlSelectIdentifier();
identifiers.add(identifier);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN_SEPARATOR:{
          jj_consume_token(LPAREN_SEPARATOR);
          query = ExpressionSql();
querys.add(query);
          jj_consume_token(RPAREN_SEPARATOR);
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return factory.createSOQLExpressionSelect(identifiers, functions, querys);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLSelectFunctionTree SoqlSelectFunction() throws ParseException {Name name = null;
    Name field = null;
    Name alias = null;
    name = Name();
    jj_consume_token(LPAREN_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case INT_KEYWORD:
    case PACKAGE_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      field = Name();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case INT_KEYWORD:
    case PACKAGE_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      alias = Name();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
{if ("" != null) return factory.createSOQLSelectFunction(name, field, alias);}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierTree SoqlSelectIdentifier() throws ParseException {Name identifier;
    identifier = Name();
{if ("" != null) return factory.createIdentifier(identifier);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLExpressionFromTree ExpressionFrom() throws ParseException {Token argument;
    Token alias = null;
    List<SOQLFromArgumentTree> arguments = new ArrayList<SOQLFromArgumentTree>();
    jj_consume_token(FROM_KEYWORD);
    argument = AllowedKeywordsAsIdentifier();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      alias = AsSOQLExpression();
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USING_KEYWORD:{
      UsingSOQLExpression();
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      ;
    }
arguments.add(factory.createSOQLFromArgumentTree(factory.createIdentifier(argument), factory.createIdentifier(alias)));
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA_SEPARATOR);
      argument = AllowedKeywordsAsIdentifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        alias = AsSOQLExpression();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USING_KEYWORD:{
        UsingSOQLExpression();
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
    }
arguments.add(factory.createSOQLFromArgumentTree(factory.createIdentifier(argument), factory.createIdentifier(alias)));
{if ("" != null) return factory.createSOQLExpressionFrom(arguments);}
    throw new Error("Missing return statement in function");
  }

  final public Token AsSOQLExpression() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AS_KEYWORD:{
      jj_consume_token(AS_KEYWORD);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    token = AllowedKeywordsAsIdentifier();
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public List<Token> UsingSOQLExpression() throws ParseException {List <Token> tokens = new ArrayList<Token>();
    Token token;
    jj_consume_token(USING_KEYWORD);
    token = AllowedKeywordsAsIdentifier();
tokens.add(token);
{if ("" != null) return tokens;}
    throw new Error("Missing return statement in function");
  }

  final public SOQLExpressionWhereTree ExpressionWhere() throws ParseException {ExpressionTree soqlConditionExpression;
    jj_consume_token(WHERE_KEYWORD);
    soqlConditionExpression = SoqlConditionExpression();
{if ("" != null) return factory.createSOQLExpressionWhere(soqlConditionExpression);}
    throw new Error("Missing return statement in function");
  }

  final public SOQLConditionExpressionTree SoqlConditionExpression() throws ParseException {ExpressionTree optionsStatement = null;
    optionsStatement = SoqlOrExpression();
{if ("" != null) return factory.createSOQLConditionExpression(optionsStatement);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlOrExpression() throws ParseException {ExpressionTree soqlOrExpression;
    ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = SoqlAndExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR_KEYWORD:{
        ;
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        break label_13;
      }
      operator = jj_consume_token(OR_KEYWORD);
      right = SoqlAndExpression();
left = factory.createConditionalOROperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlAndExpression() throws ParseException {ExpressionTree soqlAndExpression;
    ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = SoqlParenthesizedExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANDLITERAL_KEYWORD:{
        ;
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        break label_14;
      }
      operator = jj_consume_token(ANDLITERAL_KEYWORD);
      right = SoqlParenthesizedExpression();
left = factory.createConditionalAndOperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlParenthesizedExpression() throws ParseException {ExpressionTree soqlParenthesizedExpression = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_SEPARATOR:{
      jj_consume_token(LPAREN_SEPARATOR);
      soqlParenthesizedExpression = SoqlOrExpression();
      jj_consume_token(RPAREN_SEPARATOR);
      break;
      }
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case INT_KEYWORD:
    case PACKAGE_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      soqlParenthesizedExpression = SoqlFieldExpression();
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return soqlParenthesizedExpression;}
    throw new Error("Missing return statement in function");
  }

  final public SOQLFieldExpressionTree SoqlFieldExpression() throws ParseException {ExpressionTree soqlFieldExpression = null;
    Name name = null;
    Token operator = null;
    Token value = null;
    ExpressionTree expressionValue = null;
    name = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIKE_KEYWORD:
    case NOT_KEYWORD:
    case IN_KEYWORD:
    case EXCLUDES_KEYWORD:
    case INCLUDES_KEYWORD:
    case ASSIGN_OPERATOR:
    case LT_OPERATOR:
    case GT_OPERATOR:
    case LE_OPERATOR:
    case GE_OPERATOR:
    case NE_OPERATOR:
    case DIFFERENT_OPERATOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIKE_KEYWORD:
      case ASSIGN_OPERATOR:
      case LT_OPERATOR:
      case GT_OPERATOR:
      case LE_OPERATOR:
      case GE_OPERATOR:
      case NE_OPERATOR:
      case DIFFERENT_OPERATOR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIKE_KEYWORD:{
          operator = jj_consume_token(LIKE_KEYWORD);
          break;
          }
        case ASSIGN_OPERATOR:{
          operator = jj_consume_token(ASSIGN_OPERATOR);
          break;
          }
        case LT_OPERATOR:{
          operator = jj_consume_token(LT_OPERATOR);
          break;
          }
        case GT_OPERATOR:{
          operator = jj_consume_token(GT_OPERATOR);
          break;
          }
        case LE_OPERATOR:{
          operator = jj_consume_token(LE_OPERATOR);
          break;
          }
        case GE_OPERATOR:{
          operator = jj_consume_token(GE_OPERATOR);
          break;
          }
        case NE_OPERATOR:{
          operator = jj_consume_token(NE_OPERATOR);
          break;
          }
        case DIFFERENT_OPERATOR:{
          operator = jj_consume_token(DIFFERENT_OPERATOR);
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expressionValue = SoqlValueRight();
        break;
        }
      case NOT_KEYWORD:
      case IN_KEYWORD:
      case EXCLUDES_KEYWORD:
      case INCLUDES_KEYWORD:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IN_KEYWORD:{
          operator = jj_consume_token(IN_KEYWORD);
          break;
          }
        case NOT_KEYWORD:{
          operator = jj_consume_token(NOT_KEYWORD);
          break;
          }
        case EXCLUDES_KEYWORD:{
          operator = jj_consume_token(EXCLUDES_KEYWORD);
          break;
          }
        case INCLUDES_KEYWORD:{
          operator = jj_consume_token(INCLUDES_KEYWORD);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IN_KEYWORD:{
          jj_consume_token(IN_KEYWORD);
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN_SEPARATOR:{
          expressionValue = SoqlItems();
          break;
          }
        case COLON_OPERATOR:{
          expressionValue = SoqlExternalVariable();
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      ;
    }
{if ("" != null) return factory.createSOQLFieldExpression(name,operator,expressionValue);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlItems() throws ParseException {ExpressionTree soqlItems;
    jj_consume_token(LPAREN_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      soqlItems = SoqlSetExpressionValues();
      break;
      }
    case SELECT_KEYWORD:{
      soqlItems = ExpressionSql();
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN_SEPARATOR);
{if ("" != null) return soqlItems;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlExternalVariable() throws ParseException {ExpressionTree soqlVariable;
    jj_consume_token(COLON_OPERATOR);
    soqlVariable = SoqlValue();
{if ("" != null) return soqlVariable;}
    throw new Error("Missing return statement in function");
  }

  final public SOQLSetExpressionValuesTree SoqlSetExpressionValues() throws ParseException {List <ExpressionTree> soqlSetExpressionValues = new ArrayList<ExpressionTree>();
    ExpressionTree value = null;
    value = SoqlValue();
soqlSetExpressionValues.add(value);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA_SEPARATOR);
      value = SoqlValue();
soqlSetExpressionValues.add(value);
    }
{if ("" != null) return factory.createSOQLSetExpressionValues(soqlSetExpressionValues);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlValueRight() throws ParseException {ExpressionTree soqlValueRight;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DATE_LITERAL_EXPRESSION:{
      token = jj_consume_token(DATE_LITERAL_EXPRESSION);
soqlValueRight = factory.createIdentifier(token);
      break;
      }
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:{
      token = SOQLDateLiteral();
soqlValueRight = factory.createIdentifier(token);
      break;
      }
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:{
      token = SOQLNDateLiteral();
      jj_consume_token(COLON_OPERATOR);
      jj_consume_token(INTEGER_LITERAL_NUMBER);
soqlValueRight = factory.createIdentifier(token);
      break;
      }
    case COLON_OPERATOR:{
      soqlValueRight = SoqlExternalVariable();
      break;
      }
    case FALSE_KEYWORD:
    case NULL_KEYWORD:
    case TRUE_KEYWORD:
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:{
      soqlValueRight = Literal();
      break;
      }
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return soqlValueRight;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree SoqlValue() throws ParseException {ExpressionTree soqlValue = null;
    soqlValue = Expression();
{if ("" != null) return soqlValue;}
    throw new Error("Missing return statement in function");
  }

  final public List<ExpressionTree> ArrayInitializer() throws ParseException {List<ExpressionTree> arrayInitializers = new ArrayList<ExpressionTree>();
    ExpressionTree initializer;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      initializer = VariableInitializer();
arrayInitializers.add(initializer);
      label_16:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA_SEPARATOR);
        initializer = VariableInitializer();
arrayInitializers.add(initializer);
      }
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA_SEPARATOR:{
      jj_consume_token(COMMA_SEPARATOR);
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      ;
    }
{if ("" != null) return arrayInitializers;}
    throw new Error("Missing return statement in function");
  }

  final public PropertyTree PropertyDeclaration(ModifiersTree modifiers) throws ParseException {Tree type;
    Token identifier;
    Token blockStart = null;
    Token blockEnd = null;
    List<? extends AccessorTree> accessors;
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    blockStart = jj_consume_token(LBRACE_SEPARATOR);
    accessors = AccessorDeclarations();
    blockEnd = jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return factory.createProperty(modifiers, type, identifier, blockStart, blockEnd, accessors);}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends AccessorTree> AccessorDeclarations() throws ParseException {AccessorTree accessorDeclaration;
    List<AccessorTree> accessors = new ArrayList<AccessorTree>();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case FINAL_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case GLOBAL_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case VIRTUAL_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AT_SEPARATOR:{
        accessorDeclaration = AccessorDeclaration();
accessors.add(accessorDeclaration);
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case FINAL_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case GLOBAL_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case VIRTUAL_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AT_SEPARATOR:{
        accessorDeclaration = AccessorDeclaration();
accessors.add(accessorDeclaration);
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        ;
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalPropertyDeclarationException(ex));
    }
{if ("" != null) return accessors;}
    throw new Error("Missing return statement in function");
  }

  final public AccessorTree AccessorDeclaration() throws ParseException {BlockTree body = null;
    IdentifierTree accessor;
    ModifiersTree modifiers;
    Token endToken = null;
    modifiers = Modifiers();
    accessor = Accesor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE_SEPARATOR:{
      body = AccessorBody();
      break;
      }
    case SEMICOLON_SEPARATOR:{
      endToken = jj_consume_token(SEMICOLON_SEPARATOR);
      break;
      }
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(body != null) {
            {if ("" != null) return factory.createAccessor(modifiers, accessor, body);}
        } else {
            {if ("" != null) return factory.createAccessor(modifiers, accessor, endToken);}
        }
    throw new Error("Missing return statement in function");
  }

  final public IdentifierTree Accesor() throws ParseException {Token accessor;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GET_KEYWORD:{
      accessor = jj_consume_token(GET_KEYWORD);
      break;
      }
    case SET_KEYWORD:{
      accessor = jj_consume_token(SET_KEYWORD);
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return factory.createIdentifier(accessor);}
    throw new Error("Missing return statement in function");
  }

  final public BlockTree AccessorBody() throws ParseException {BlockTree block;
    block = Block();
{if ("" != null) return block;}
    throw new Error("Missing return statement in function");
  }

  final public MethodTree MethodDeclaration(ModifiersTree modifiers) throws ParseException {Tree type;
    ExpressionTree identifier;
    List<VariableTree> parameters;
    BlockTree body = null;
    Token endToken = null;
    type = ResultType();
    identifier = MethodIdentifier();
    parameters = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE_SEPARATOR:{
      body = Block();
      break;
      }
    case SEMICOLON_SEPARATOR:{
      endToken = jj_consume_token(SEMICOLON_SEPARATOR);
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if(body != null) {
            {if ("" != null) return factory.createMethod(modifiers, type, identifier, body, parameters);}
        } else {
            {if ("" != null) return factory.createMethod(modifiers, type, identifier, parameters, endToken);}
        }
    throw new Error("Missing return statement in function");
  }

  final public List<VariableTree> FormalParameters() throws ParseException {VariableTree param;
    List<VariableTree> parameters = new ArrayList<VariableTree>();
    try {
      jj_consume_token(LPAREN_SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXCEPTION_KEYWORD:
      case FINAL_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        param = FormalParameter();
parameters.add(param);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA_SEPARATOR:{
            ;
            break;
            }
          default:
            jj_la1[78] = jj_gen;
            break label_17;
          }
          jj_consume_token(COMMA_SEPARATOR);
          param = FormalParameter();
parameters.add(param);
        }
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new BadParameterException(ex));
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public VariableTree FormalParameter() throws ParseException {Tree type;
    Token identifier;
    LinkedHashMap<Integer, Token> modifiers = new LinkedHashMap<Integer, Token>();
    Token finalKeyword = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINAL_KEYWORD:{
      finalKeyword = jj_consume_token(FINAL_KEYWORD);
      break;
      }
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    type = Type();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
ModifiersTree modifier = null;
        if (finalKeyword != null) {
            modifiers.put(ModifierSet.FINAL, finalKeyword);
            modifier = factory.createModifier(modifiers);
        }
        {if ("" != null) return factory.createVariable(type, identifier, modifier);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorTree ConstructorDeclaration(ModifiersTree modifiers) throws ParseException {Token identifierToken;
    IdentifierTree identifier;
    MethodInvocationTree explicitInvocation;
    List<VariableTree> parameters;
    Collection<? extends StatementTree> statements;
    List<StatementTree> body = new ArrayList<StatementTree>();
    Token start;
    Token end;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifierToken = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifierToken = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    parameters = FormalParameters();
    start = jj_consume_token(LBRACE_SEPARATOR);
    if (jj_2_16(2147483647)) {
      explicitInvocation = ExplicitConstructorInvocation();
body.add(factory.createExpressionStatement(explicitInvocation));
    } else {
      ;
    }
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FINAL_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        break label_18;
      }
      statements = BlockStatement();
body.addAll(statements);
    }
    end = jj_consume_token(RBRACE_SEPARATOR);
identifier = factory.createIdentifier(identifierToken);
        {if ("" != null) return factory.createConstructor(modifiers, identifier, parameters, body, start, end);}
    throw new Error("Missing return statement in function");
  }

  final public MethodInvocationTree ExplicitConstructorInvocation() throws ParseException {List<? extends ExpressionTree> arguments;
    Token invocationKeyword;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THIS_KEYWORD:{
      invocationKeyword = jj_consume_token(THIS_KEYWORD);
      break;
      }
    case SUPER_KEYWORD:{
      invocationKeyword = jj_consume_token(SUPER_KEYWORD);
      break;
      }
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    arguments = Arguments();
    jj_consume_token(SEMICOLON_SEPARATOR);
//Name name = factory.createName(Collections.singletonList(invocationKeyword));
        {if ("" != null) return factory.createMethodInvocation(factory.createIdentifier(invocationKeyword), arguments);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree Initializer() throws ParseException {StatementTree block;
    boolean isStatic = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC_KEYWORD:{
      jj_consume_token(STATIC_KEYWORD);
isStatic = true;
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      ;
    }
    block = InitializerBlock(isStatic);
{if ("" != null) return block;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree InitializerBlock(boolean isStatic) throws ParseException {List<? extends StatementTree> member;
    List<StatementTree> members = new ArrayList<StatementTree>();
    Token blockStart = null;
    Token blockEnd = null;
    blockStart = jj_consume_token(LBRACE_SEPARATOR);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        break label_19;
      }
      member = InitializerBlockMember();
members.addAll(member);
    }
    blockEnd = jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return factory.createBlock(members, isStatic, blockStart, blockEnd);}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends StatementTree> InitializerBlockMember() throws ParseException {ModifiersTree modifiers = factory.createModifier(new LinkedHashMap<Integer, Token>());
    StatementTree member;
    List<VariableTree> variables;
    StatementTree initializer;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE_SEPARATOR:{
      initializer = InitializerBlock(false);
{if ("" != null) return Collections.singletonList(initializer);}
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      if (jj_2_17(2147483647)) {
        variables = FieldDeclaration(modifiers);
{if ("" != null) return variables;}
      } else if (jj_2_18(2)) {
        member = InitializerBlockStatement();
{if ("" != null) return Collections.singletonList(member);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON_SEPARATOR:{
          jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return Collections.singletonList(factory.createEmptyStatement());}
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementTree InitializerBlockStatement() throws ParseException {StatementTree statement = null;
    try {
      if (jj_2_19(2)) {
        statement = EmptyStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARRAY_KEYWORD:
        case EXCEPTION_KEYWORD:
        case FALSE_KEYWORD:
        case INT_KEYWORD:
        case LIST_KEYWORD:
        case MAP_KEYWORD:
        case NEW_KEYWORD:
        case NULL_KEYWORD:
        case PACKAGE_KEYWORD:
        case SUPER_KEYWORD:
        case THIS_KEYWORD:
        case TRANSIENT_KEYWORD:
        case TRUE_KEYWORD:
        case VOID_KEYWORD:
        case ITERATOR_KEYWORD:
        case ACTIVATE_KEYWORD:
        case ANY_KEYWORD:
        case AUTONOMOUS_KEYWORD:
        case BEGIN_KEYWORD:
        case BIGDECIMAL_KEYWORD:
        case BYTE_KEYWORD:
        case CASE_KEYWORD:
        case CAST_KEYWORD:
        case CHAR_KEYWORD:
        case COLLECT_KEYWORD:
        case CONST_KEYWORD:
        case _DEFAULT_KEYWORD:
        case END_KEYWORD:
        case EXIT_KEYWORD:
        case EXPORT_KEYWORD:
        case FLOAT_KEYWORD:
        case GOTO_KEYWORD:
        case GROUP_KEYWORD:
        case HINT_KEYWORD:
        case IMPORT_KEYWORD:
        case INNER_KEYWORD:
        case INTO_KEYWORD:
        case JOIN_KEYWORD:
        case LOOP_KEYWORD:
        case NUMBER_KEYWORD:
        case OF_KEYWORD:
        case OUTER_KEYWORD:
        case PARALLEL_KEYWORD:
        case RETRIEVE_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case SHORT_KEYWORD:
        case STAT_KEYWORD:
        case SWITCH_KEYWORD:
        case SYNCHRONIZED_KEYWORD:
        case THEN_KEYWORD:
        case TRANSACTION_KEYWORD:
        case WHEN_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case DELETE_KEYWORD:
        case INSERT_KEYWORD:
        case LIMIT_KEYWORD:
        case MERGE_KEYWORD:
        case ROLLBACK_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case TRIGGER_KEYWORD:
        case UNDELETE_KEYWORD:
        case UPDATE_KEYWORD:
        case UPSERT_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case WITH_KEYWORD:
        case SET_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:
        case IDENTIFIER:
        case LPAREN_SEPARATOR:
        case LBRACKET_SEPARATOR:
        case INCR_OPERATOR:
        case DECR_OPERATOR:{
          statement = StatementExpression();
          jj_consume_token(SEMICOLON_SEPARATOR);
          break;
          }
        case IF_KEYWORD:{
          statement = IfStatement();
          break;
          }
        case WHILE_KEYWORD:{
          statement = WhileStatement();
          break;
          }
        case DO_KEYWORD:{
          statement = DoStatement();
          break;
          }
        case FOR_KEYWORD:{
          statement = ForStatement();
          break;
          }
        case BREAK_KEYWORD:{
          statement = BreakStatement();
          break;
          }
        case CONTINUE_KEYWORD:{
          statement = ContinueStatement();
          break;
          }
        case RETURN_KEYWORD:{
          statement = ReturnStatement();
          break;
          }
        case THROW_KEYWORD:{
          statement = ThrowStatement();
          break;
          }
        case TRY_KEYWORD:{
          statement = TryStatement();
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException ex) {
ContextParseException contextException = new IllegalStatementException(ex);
        contextErrorRecover(contextException);
        statement = factory.createEmptyStatement();
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public Tree Type() throws ParseException {Tree type;
    Tree argumentType;
    List<Tree> arguments = new ArrayList<Tree>();
    Token collectionType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAP_KEYWORD:{
      collectionType = jj_consume_token(MAP_KEYWORD);
      jj_consume_token(LT_OPERATOR);
      argumentType = Type();
arguments.add(argumentType);
      jj_consume_token(COMMA_SEPARATOR);
      argumentType = Type();
arguments.add(argumentType);
      jj_consume_token(GT_OPERATOR);
type = factory.createGenericType(factory.createIdentifier(collectionType) , arguments);
      break;
      }
    default:
      jj_la1[91] = jj_gen;
      if (jj_2_20(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIST_KEYWORD:{
          collectionType = jj_consume_token(LIST_KEYWORD);
          break;
          }
        case SET_KEYWORD:{
          collectionType = jj_consume_token(SET_KEYWORD);
          break;
          }
        case ITERATOR_KEYWORD:{
          collectionType = jj_consume_token(ITERATOR_KEYWORD);
          break;
          }
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LT_OPERATOR);
        argumentType = Type();
arguments.add(argumentType);
        jj_consume_token(GT_OPERATOR);
type = factory.createGenericType(factory.createIdentifier(collectionType) , arguments);
      } else if (jj_2_21(2)) {
        type = ReferenceType();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Tree SimpleType() throws ParseException {Tree simpleType;
    Token exceptionKeyword;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXCEPTION_KEYWORD:{
      exceptionKeyword = jj_consume_token(EXCEPTION_KEYWORD);
simpleType = factory.createIdentifier(exceptionKeyword);
      break;
      }
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case GROUP_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case LIMIT_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      simpleType = ClassOrInterfaceType();
      break;
      }
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return simpleType;}
    throw new Error("Missing return statement in function");
  }

  final public Tree ReferenceType() throws ParseException {Tree type;
    Token exceptionKeyword;
    type = SimpleType();
    if (jj_2_22(2)) {
      jj_consume_token(LBRACKET_SEPARATOR);
      jj_consume_token(RBRACKET_SEPARATOR);
type = factory.createArrayType(type);
    } else {
      ;
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Tree ClassOrInterfaceErasureType() throws ParseException {IdentifierTree name;
    Tree type;
    List<Tree> genericArguments = new ArrayList<Tree>();
    name = ClassOrInterfaceType();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT_OPERATOR:{
      jj_consume_token(LT_OPERATOR);
      type = Type();
genericArguments.add(type);
      label_20:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(COMMA_SEPARATOR);
        type = Type();
genericArguments.add(type);
      }
      jj_consume_token(GT_OPERATOR);
      break;
      }
    default:
      jj_la1[93] = jj_gen;
      ;
    }
if (genericArguments.size() > 0) {
            {if ("" != null) return factory.createGenericType(name, genericArguments);}
        } else {
            {if ("" != null) return name;}
        }
    throw new Error("Missing return statement in function");
  }

  final public IdentifierTree ClassOrInterfaceType() throws ParseException {Token identifier;
    List<IdentifierTree> identifiers = new ArrayList<IdentifierTree>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      identifier = AllowedKeywordsAsIdentifier();
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      identifier = SpecialKeywordsAsIdentifier();
      break;
      }
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
identifiers.add(factory.createIdentifier(identifier));
    label_21:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(DOT_SEPARATOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        identifier = AllowedKeywordsAsIdentifier();
        break;
        }
      case GROUP_KEYWORD:
      case LIMIT_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case WITHOUT_OTHER:{
        identifier = SpecialKeywordsAsIdentifier();
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
identifiers.add(factory.createIdentifier(identifier));
    }
{if ("" != null) return factory.createIdentifier(identifiers);}
    throw new Error("Missing return statement in function");
  }

  final public Tree ResultType() throws ParseException {Tree resultType;
    Token voidKeyword;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID_KEYWORD:{
      voidKeyword = jj_consume_token(VOID_KEYWORD);
{if ("" != null) return factory.createIdentifier(voidKeyword);}
      break;
      }
    case EXCEPTION_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case GROUP_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case LIMIT_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      resultType = Type();
{if ("" != null) return resultType;}
      break;
      }
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
  final public Name Name() throws ParseException {ExpressionTree identifier;
    List<ExpressionTree> identifiers = new ArrayList<ExpressionTree>();
    identifier = MethodIdentifier();
identifiers.add(identifier);
    label_22:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(DOT_SEPARATOR);
      identifier = MethodIdentifier();
identifiers.add(identifier);
    }
{if ("" != null) return factory.createName(identifiers);}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
  final public ExpressionTree Expression() throws ParseException {ExpressionTree expression;
    Token operator;
    ExpressionTree assignment;
    expression = ConditionalExpression();
    if (jj_2_26(2)) {
      operator = AssignmentOperator();
      assignment = Expression();
expression = factory.createCompoundAssignment(expression, assignment, operator);
    } else {
      ;
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public Token AssignmentOperator() throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN_OPERATOR:{
      operator = jj_consume_token(ASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case STARASSIGN_OPERATOR:{
      operator = jj_consume_token(STARASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case SLASHASSIGN_OPERATOR:{
      operator = jj_consume_token(SLASHASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case REMASSIGN_OPERATOR:{
      operator = jj_consume_token(REMASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case PLUSASSIGN_OPERATOR:{
      operator = jj_consume_token(PLUSASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case MINUSASSIGN_OPERATOR:{
      operator = jj_consume_token(MINUSASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case LSHIFTASSIGN_OPERATOR:{
      operator = jj_consume_token(LSHIFTASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case RSIGNEDSHIFTASSIGN_OPERATOR:{
      operator = jj_consume_token(RSIGNEDSHIFTASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case RUNSIGNEDSHIFTASSIGN_OPERATOR:{
      operator = jj_consume_token(RUNSIGNEDSHIFTASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case ANDASSIGN_OPERATOR:{
      operator = jj_consume_token(ANDASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case XORASSIGN_OPERATOR:{
      operator = jj_consume_token(XORASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    case ORASSIGN_OPERATOR:{
      operator = jj_consume_token(ORASSIGN_OPERATOR);
{if ("" != null) return operator;}
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ConditionalExpression() throws ParseException {ExpressionTree condition;
    ExpressionTree trueExpression;
    ExpressionTree falseExpression;
    condition = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HOOK_OPERATOR:{
      jj_consume_token(HOOK_OPERATOR);
      trueExpression = Expression();
      jj_consume_token(COLON_OPERATOR);
      falseExpression = Expression();
condition = factory.createConditional(condition, trueExpression, falseExpression);
      break;
      }
    default:
      jj_la1[98] = jj_gen;
      ;
    }
{if ("" != null) return condition;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ConditionalOrExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = ConditionalAndExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        break label_23;
      }
      operator = jj_consume_token(SC_OR_OPERATOR);
      right = ConditionalAndExpression();
left = factory.createConditionalOROperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ConditionalAndExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = InclusiveOrExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_AND_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        break label_24;
      }
      operator = jj_consume_token(SC_AND_OPERATOR);
      right = InclusiveOrExpression();
left = factory.createConditionalAndOperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree InclusiveOrExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    Tree.Kind kind;
    left = ExclusiveOrExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_OR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        break label_25;
      }
      operator = jj_consume_token(BIT_OR_OPERATOR);
kind = Tree.Kind.OR;
      right = ExclusiveOrExpression();
left = factory.createBinary(kind, left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ExclusiveOrExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = AndExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case XOR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        break label_26;
      }
      operator = jj_consume_token(XOR_OPERATOR);
      right = AndExpression();
left = factory.createXOROperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree AndExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    Tree.Kind kind;
    left = EqualityExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        break label_27;
      }
      operator = jj_consume_token(BIT_AND_OPERATOR);
kind = Tree.Kind.AND;
      right = EqualityExpression();
left = factory.createBinary(kind, left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree EqualityExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    left = InstanceOfExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ_OPERATOR:
      case NE_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ_OPERATOR:{
        operator = jj_consume_token(EQ_OPERATOR);
        break;
        }
      case NE_OPERATOR:{
        operator = jj_consume_token(NE_OPERATOR);
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceOfExpression();
left = factory.createEqualOperation(left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree InstanceOfExpression() throws ParseException {ExpressionTree exp;
    Tree type;
    exp = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTANCEOF_KEYWORD:{
      jj_consume_token(INSTANCEOF_KEYWORD);
      type = Type();
exp = factory.createInstanceOf(exp, type);
      break;
      }
    default:
      jj_la1[106] = jj_gen;
      ;
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree RelationalExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    Tree.Kind kind;
    left = ShiftExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT_OPERATOR:
      case GT_OPERATOR:
      case LE_OPERATOR:
      case GE_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT_OPERATOR:{
        operator = jj_consume_token(LT_OPERATOR);
kind = Tree.Kind.LESS_THAN;
        break;
        }
      case GT_OPERATOR:{
        operator = jj_consume_token(GT_OPERATOR);
kind = Tree.Kind.GREATER_THAN;
        break;
        }
      case LE_OPERATOR:{
        operator = jj_consume_token(LE_OPERATOR);
kind = Tree.Kind.LESS_THAN_EQUAL;
        break;
        }
      case GE_OPERATOR:{
        operator = jj_consume_token(GE_OPERATOR);
kind = Tree.Kind.GREATER_THAN_EQUAL;
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = ShiftExpression();
left = factory.createBinary(kind, left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ShiftExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    Tree.Kind kind;
    left = AdditiveExpression();
    label_30:
    while (true) {
      if (jj_2_27(1)) {
        ;
      } else {
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSHIFT_OPERATOR:{
        operator = jj_consume_token(LSHIFT_OPERATOR);
kind = Tree.Kind.LEFT_SHIFT;
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        if (jj_2_28(1)) {
          operator = RSIGNEDSHIFT();
kind = Tree.Kind.RIGHT_SHIFT;
        } else if (jj_2_29(1)) {
          operator = RUNSIGNEDSHIFT();
kind = Tree.Kind.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      right = AdditiveExpression();
left = factory.createBinary(kind, left, right, operator);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree AdditiveExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    boolean isPlus = false;
    left = MultiplicativeExpression();
    label_31:
    while (true) {
      if (jj_2_30(2147483647)) {
        ;
      } else {
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_OPERATOR:{
        operator = jj_consume_token(PLUS_OPERATOR);
isPlus = true;
        break;
        }
      case MINUS_OPERATOR:{
        operator = jj_consume_token(MINUS_OPERATOR);
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MultiplicativeExpression();
if (isPlus) {
                left = factory.createPlusOperation(left, right, operator);
            } else {
                left = factory.createMinusOperation(left, right, operator);
            }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree MultiplicativeExpression() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token operator;
    boolean isMultiplication = false;
    boolean isDivision = false;
    left = UnaryExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR_OPERATOR:
      case SLASH_OPERATOR:
      case REM_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[111] = jj_gen;
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR_OPERATOR:{
        operator = jj_consume_token(STAR_OPERATOR);
isMultiplication = true;
        break;
        }
      case SLASH_OPERATOR:{
        operator = jj_consume_token(SLASH_OPERATOR);
isDivision = true;
        break;
        }
      case REM_OPERATOR:{
        operator = jj_consume_token(REM_OPERATOR);
        break;
        }
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
if (isMultiplication) {
                left = factory.createMultiplyOperation(left, right, operator);
            } else if (isDivision) {
                left = factory.createDivideOperation(left, right, operator);
            } else {
                left = factory.createRemainderOperation(left, right, operator);
            }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree UnaryExpression() throws ParseException {ExpressionTree exp;
    Token operator;
    Tree.Kind kind;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS_OPERATOR:{
        operator = jj_consume_token(PLUS_OPERATOR);
kind = Tree.Kind.UNARY_PLUS;
        break;
        }
      case MINUS_OPERATOR:{
        operator = jj_consume_token(MINUS_OPERATOR);
kind = Tree.Kind.UNARY_MINUS;
        break;
        }
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = UnaryExpression();
{if ("" != null) return factory.createUnary(kind, exp, operator);}
      break;
      }
    case INCR_OPERATOR:{
      exp = PreIncrementExpression();
{if ("" != null) return exp;}
      break;
      }
    case DECR_OPERATOR:{
      exp = PreDecrementExpression();
{if ("" != null) return exp;}
      break;
      }
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:{
      exp = UnaryExpressionNotPlusMinus();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PreIncrementExpression() throws ParseException {ExpressionTree exp;
    Token operator;
    operator = jj_consume_token(INCR_OPERATOR);
    exp = PrimaryExpression();
{if ("" != null) return factory.createPrefixIncrement(exp, operator);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PreDecrementExpression() throws ParseException {ExpressionTree exp;
    Token operator;
    operator = jj_consume_token(DECR_OPERATOR);
    exp = PrimaryExpression();
{if ("" != null) return factory.createPrefixDecrement(exp, operator);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree UnaryExpressionNotPlusMinus() throws ParseException {ExpressionTree exp;
    Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BANG_OPERATOR:{
      operator = jj_consume_token(BANG_OPERATOR);
      exp = UnaryExpression();
{if ("" != null) return factory.createUnary(Tree.Kind.LOGICAL_COMPLEMENT, exp, operator);}
      break;
      }
    default:
      jj_la1[115] = jj_gen;
      if (jj_2_32(2147483647)) {
        exp = CastExpression();
{if ("" != null) return exp;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARRAY_KEYWORD:
        case EXCEPTION_KEYWORD:
        case FALSE_KEYWORD:
        case INT_KEYWORD:
        case LIST_KEYWORD:
        case MAP_KEYWORD:
        case NEW_KEYWORD:
        case NULL_KEYWORD:
        case PACKAGE_KEYWORD:
        case SUPER_KEYWORD:
        case THIS_KEYWORD:
        case TRANSIENT_KEYWORD:
        case TRUE_KEYWORD:
        case VOID_KEYWORD:
        case ITERATOR_KEYWORD:
        case ACTIVATE_KEYWORD:
        case ANY_KEYWORD:
        case AUTONOMOUS_KEYWORD:
        case BEGIN_KEYWORD:
        case BIGDECIMAL_KEYWORD:
        case BYTE_KEYWORD:
        case CASE_KEYWORD:
        case CAST_KEYWORD:
        case CHAR_KEYWORD:
        case COLLECT_KEYWORD:
        case CONST_KEYWORD:
        case _DEFAULT_KEYWORD:
        case END_KEYWORD:
        case EXIT_KEYWORD:
        case EXPORT_KEYWORD:
        case FLOAT_KEYWORD:
        case GOTO_KEYWORD:
        case GROUP_KEYWORD:
        case HINT_KEYWORD:
        case IMPORT_KEYWORD:
        case INNER_KEYWORD:
        case INTO_KEYWORD:
        case JOIN_KEYWORD:
        case LOOP_KEYWORD:
        case NUMBER_KEYWORD:
        case OF_KEYWORD:
        case OUTER_KEYWORD:
        case PARALLEL_KEYWORD:
        case RETRIEVE_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case SHORT_KEYWORD:
        case STAT_KEYWORD:
        case SWITCH_KEYWORD:
        case SYNCHRONIZED_KEYWORD:
        case THEN_KEYWORD:
        case TRANSACTION_KEYWORD:
        case WHEN_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case DELETE_KEYWORD:
        case INSERT_KEYWORD:
        case LIMIT_KEYWORD:
        case MERGE_KEYWORD:
        case ROLLBACK_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case TRIGGER_KEYWORD:
        case UNDELETE_KEYWORD:
        case UPDATE_KEYWORD:
        case UPSERT_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case WITH_KEYWORD:
        case SET_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:
        case IDENTIFIER:
        case LPAREN_SEPARATOR:
        case LBRACKET_SEPARATOR:{
          exp = PrimaryExpression();
          if (jj_2_31(2147483647)) {
            exp = PostfixExpression(exp);
          } else {
            ;
          }
{if ("" != null) return exp;}
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_33(2147483647)) {
      jj_consume_token(LPAREN_SEPARATOR);
      Type();
      jj_consume_token(LBRACKET_SEPARATOR);
      jj_consume_token(RBRACKET_SEPARATOR);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        Type();
        jj_consume_token(RPAREN_SEPARATOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BANG_OPERATOR:{
          jj_consume_token(BANG_OPERATOR);
          break;
          }
        case LPAREN_SEPARATOR:{
          jj_consume_token(LPAREN_SEPARATOR);
          break;
          }
        case TRANSIENT_KEYWORD:
        case ITERATOR_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case STAT_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case IDENTIFIER:{
          AllowedKeywordsAsIdentifier();
          break;
          }
        case THIS_KEYWORD:{
          jj_consume_token(THIS_KEYWORD);
          break;
          }
        case SUPER_KEYWORD:{
          jj_consume_token(SUPER_KEYWORD);
          break;
          }
        case NEW_KEYWORD:{
          jj_consume_token(NEW_KEYWORD);
          break;
          }
        case FALSE_KEYWORD:
        case NULL_KEYWORD:
        case TRUE_KEYWORD:
        case GROUP_KEYWORD:
        case LIMIT_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case WITHOUT_OTHER:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:{
          Literal();
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public ExpressionTree CastExpression() throws ParseException {ExpressionTree exp;
    Tree type;
    if (jj_2_34(2147483647)) {
      jj_consume_token(LPAREN_SEPARATOR);
      type = Type();
      jj_consume_token(RPAREN_SEPARATOR);
      exp = UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        type = Type();
        jj_consume_token(RPAREN_SEPARATOR);
        exp = UnaryExpressionNotPlusMinus();
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return factory.createTypeCast(exp, type);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PostfixExpression(ExpressionTree exp) throws ParseException {Token operator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCR_OPERATOR:{
      operator = jj_consume_token(INCR_OPERATOR);
{if ("" != null) return factory.createPostfixIncrement(exp, operator);}
      break;
      }
    case DECR_OPERATOR:{
      operator = jj_consume_token(DECR_OPERATOR);
{if ("" != null) return factory.createPostfixDecrement(exp, operator);}
      break;
      }
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ApexParser.Tuple TuplePrimaryExpression() throws ParseException {ApexParser.Tuple treeObject = new ApexParser.Tuple();
    ApexParser.Tuple prefix;
    ApexParser.Tuple suffix;
    prefix = TuplePrimaryPrefix();
    label_33:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_33;
      }
      suffix = TuplePrimarySuffix((ExpressionTree)prefix.treeObject);
prefix = suffix;
    }
{if ("" != null) return prefix;}
    throw new Error("Missing return statement in function");
  }

  final public ApexParser.Tuple TuplePrimaryPrefix() throws ParseException {ApexParser.Tuple treeObject = new ApexParser.Tuple();
    ExpressionTree exp;
    Name name;
    Tree type;
    Token identifier;
    List<Token> identifiers = new ArrayList<Token>();
    ExpressionTree primaryPrefix;
    Token modifier = null;
    if (jj_2_36(2)) {
      exp = Literal();
primaryPrefix = exp;
    } else if (jj_2_37(2147483647)) {
      type = ResultType();
      jj_consume_token(DOT_SEPARATOR);
      identifier = jj_consume_token(CLASS_KEYWORD);
primaryPrefix = null;
    } else if (jj_2_38(2147483647)) {
      name = Name();
primaryPrefix = factory.createIdentifier(name);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXCEPTION_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUPER_KEYWORD:{
          //TODO: Valid the structure "Super, This and Namespace" with an Identifier in the Primary prefix
                      modifier = jj_consume_token(SUPER_KEYWORD);
          break;
          }
        case THIS_KEYWORD:{
          modifier = jj_consume_token(THIS_KEYWORD);
          break;
          }
        case EXCEPTION_KEYWORD:
        case TRANSIENT_KEYWORD:
        case ITERATOR_KEYWORD:
        case GROUP_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case STAT_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case LIMIT_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case IDENTIFIER:{
          SimpleType();
          break;
          }
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT_SEPARATOR);
        name = Name();
primaryPrefix = factory.createIdentifier(name, modifier);
        break;
        }
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        exp = Expression();
        jj_consume_token(RPAREN_SEPARATOR);
primaryPrefix = factory.createParenthesized(exp);
        break;
        }
      case NEW_KEYWORD:{
        exp = AllocationExpression();
primaryPrefix = exp;
        break;
        }
      case LBRACKET_SEPARATOR:{
        jj_consume_token(LBRACKET_SEPARATOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELECT_KEYWORD:{
          primaryPrefix = ExpressionSql();
treeObject.treeType = ApexParser.Type.ExpressionSql;
          break;
          }
        case FIND_KEYWORD:{
          primaryPrefix = ExpressionSosl();
treeObject.treeType = ApexParser.Type.ExpressionSosl;
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBRACKET_SEPARATOR);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
treeObject.treeObject = primaryPrefix;
        {if ("" != null) return treeObject;}
    throw new Error("Missing return statement in function");
  }

  final public ApexParser.Tuple TuplePrimarySuffix(ExpressionTree prefixExpression) throws ParseException {ApexParser.Tuple treeObject = new ApexParser.Tuple();
    ExpressionTree index;
    Token identifier;
    List<? extends ExpressionTree> arguments;
    ExpressionTree primmarySuffix;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET_SEPARATOR:{
      jj_consume_token(LBRACKET_SEPARATOR);
      index = Expression();
      jj_consume_token(RBRACKET_SEPARATOR);
primmarySuffix = factory.createArrayAccess(prefixExpression, index);
      break;
      }
    case DOT_SEPARATOR:{
      jj_consume_token(DOT_SEPARATOR);
      identifier = AllowedKeywordsAsIdentifierForMethods();
primmarySuffix = factory.createMemberSelect(identifier, prefixExpression);
      break;
      }
    case LPAREN_SEPARATOR:{
      arguments = Arguments();
treeObject.treeType = ApexParser.Type.Arguments;
              primmarySuffix = factory.createMethodInvocation(prefixExpression, arguments);
      break;
      }
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
treeObject.treeObject = primmarySuffix;
        {if ("" != null) return treeObject;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PrimaryExpression() throws ParseException {ExpressionTree prefix;
    ExpressionTree suffix;
    prefix = PrimaryPrefix();
    label_34:
    while (true) {
      if (jj_2_39(2)) {
        ;
      } else {
        break label_34;
      }
      suffix = PrimarySuffix(prefix);
prefix = suffix;
    }
{if ("" != null) return prefix;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PrimaryPrefix() throws ParseException {ExpressionTree exp;
    Name name;
    Tree type;
    Token identifier;
    List<Token> identifiers = new ArrayList<Token>();
    ExpressionTree primaryPrefix;
    Token modifier = null;
    if (jj_2_40(2)) {
      exp = Literal();
primaryPrefix = exp;
    } else if (jj_2_41(2147483647)) {
      type = ResultType();
      jj_consume_token(DOT_SEPARATOR);
      identifier = jj_consume_token(CLASS_KEYWORD);
primaryPrefix = null;
    } else if (jj_2_42(2147483647)) {
      name = Name();
primaryPrefix = factory.createIdentifier(name);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXCEPTION_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUPER_KEYWORD:{
          //TODO: Valid the structure "Super, This and Namespace" with an Identifier in the Primary prefix
                      modifier = jj_consume_token(SUPER_KEYWORD);
          break;
          }
        case THIS_KEYWORD:{
          modifier = jj_consume_token(THIS_KEYWORD);
          break;
          }
        case EXCEPTION_KEYWORD:
        case TRANSIENT_KEYWORD:
        case ITERATOR_KEYWORD:
        case GROUP_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case STAT_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case LIMIT_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case IDENTIFIER:{
          SimpleType();
          break;
          }
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT_SEPARATOR);
        name = Name();
primaryPrefix = factory.createIdentifier(name, modifier); //add TYPE

        break;
        }
      case LPAREN_SEPARATOR:{
        jj_consume_token(LPAREN_SEPARATOR);
        exp = Expression();
        jj_consume_token(RPAREN_SEPARATOR);
primaryPrefix = factory.createParenthesized(exp);
        break;
        }
      case NEW_KEYWORD:{
        exp = AllocationExpression();
primaryPrefix = exp;
        break;
        }
      case LBRACKET_SEPARATOR:{
        jj_consume_token(LBRACKET_SEPARATOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELECT_KEYWORD:{
          exp = ExpressionSql();
          break;
          }
        case FIND_KEYWORD:{
          exp = ExpressionSosl();
          break;
          }
        default:
          jj_la1[126] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBRACKET_SEPARATOR);
primaryPrefix = exp;
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return primaryPrefix;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree PrimarySuffix(ExpressionTree prefixExpression) throws ParseException {ExpressionTree index;
    Token identifier;
    List<? extends ExpressionTree> arguments;
    ExpressionTree primmarySuffix;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACKET_SEPARATOR:{
      jj_consume_token(LBRACKET_SEPARATOR);
      index = Expression();
      jj_consume_token(RBRACKET_SEPARATOR);
primmarySuffix = factory.createArrayAccess(prefixExpression, index);
      break;
      }
    case DOT_SEPARATOR:{
      jj_consume_token(DOT_SEPARATOR);
      identifier = AllowedKeywordsAsIdentifierForMethods();
primmarySuffix = factory.createMemberSelect(identifier, prefixExpression);
      break;
      }
    case LPAREN_SEPARATOR:{
      arguments = Arguments();
primmarySuffix = factory.createMethodInvocation(prefixExpression, arguments);
      break;
      }
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return primmarySuffix;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree Literal() throws ParseException {Token value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL_NUMBER:{
      value = jj_consume_token(INTEGER_LITERAL_NUMBER);
{if ("" != null) return factory.createIntegerLiteral(value);}
      break;
      }
    case FLOATING_POINT_LITERAL_NUMBER:{
      value = jj_consume_token(FLOATING_POINT_LITERAL_NUMBER);
{if ("" != null) return factory.createDoubleLiteral(value);}
      break;
      }
    case STRING_LITERAL_STRING:{
      value = jj_consume_token(STRING_LITERAL_STRING);
{if ("" != null) return factory.createStringLiteral(value);}
      break;
      }
    case FALSE_KEYWORD:
    case TRUE_KEYWORD:{
      value = BooleanLiteral();
{if ("" != null) return factory.createBooleanLiteral(value);}
      break;
      }
    case NULL_KEYWORD:{
      value = NullLiteral();
{if ("" != null) return factory.createNullLiteral(value);}
      break;
      }
    case GROUP_KEYWORD:
    case LIMIT_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case WITHOUT_OTHER:{
      value = SpecialKeywordsAsIdentifier();
{if ("" != null) return factory.createNullLiteral(value);}
      break;
      }
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token BooleanLiteral() throws ParseException {Token keyword;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE_KEYWORD:{
      keyword = jj_consume_token(TRUE_KEYWORD);
{if ("" != null) return keyword;}
      break;
      }
    case FALSE_KEYWORD:{
      keyword = jj_consume_token(FALSE_KEYWORD);
{if ("" != null) return keyword;}
      break;
      }
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token NullLiteral() throws ParseException {Token keyword;
    keyword = jj_consume_token(NULL_KEYWORD);
{if ("" != null) return keyword;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends ExpressionTree> Arguments() throws ParseException {List<? extends ExpressionTree> expressions = new ArrayList<ExpressionTree>();
    jj_consume_token(LPAREN_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      expressions = ArgumentList();
      break;
      }
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_SEPARATOR);
{if ("" != null) return expressions;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends ExpressionTree> ArgumentList() throws ParseException {ExpressionTree expression;
    List<ExpressionTree> expressions = new ArrayList<ExpressionTree>();
    Token thisToken;
    if (jj_2_43(2)) {
      expression = Expression();
expressions.add(expression);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS_KEYWORD:{
        thisToken = jj_consume_token(THIS_KEYWORD);
expressions.add(factory.createIdentifier(thisToken));
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        break label_35;
      }
      jj_consume_token(COMMA_SEPARATOR);
      if (jj_2_44(2)) {
        expression = Expression();
expressions.add(expression);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THIS_KEYWORD:{
          thisToken = jj_consume_token(THIS_KEYWORD);
expressions.add(factory.createIdentifier(thisToken));
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return expressions;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree AllocationExpression() throws ParseException {ExpressionTree type;
    ExpressionTree allocationExpression;
    List<? extends ExpressionTree> arguments;
    Tree primitiveType;
    Token collectionType;
    List<? extends Tree> typeArguments;
    Token blockStart = null;
    Token blockEnd = null;
    jj_consume_token(NEW_KEYWORD);
    if (jj_2_46(2)) {
      type = ClassOrInterfaceType();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET_SEPARATOR:{
        allocationExpression = ArrayDimsAndInits(type);
        break;
        }
      case LPAREN_SEPARATOR:{
        arguments = Arguments();
        if (jj_2_45(2)) {
          blockStart = jj_consume_token(LBRACE_SEPARATOR);
          blockEnd = jj_consume_token(RBRACE_SEPARATOR);
        } else {
          ;
        }
allocationExpression = factory.createNewClass(type, blockStart, blockEnd, arguments);
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case ITERATOR_KEYWORD:
      case SET_KEYWORD:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LIST_KEYWORD:
        case ITERATOR_KEYWORD:
        case SET_KEYWORD:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LIST_KEYWORD:{
            collectionType = jj_consume_token(LIST_KEYWORD);
            break;
            }
          case SET_KEYWORD:{
            collectionType = jj_consume_token(SET_KEYWORD);
            break;
            }
          case ITERATOR_KEYWORD:{
            collectionType = jj_consume_token(ITERATOR_KEYWORD);
            break;
            }
          default:
            jj_la1[136] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          typeArguments = GenericType();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN_SEPARATOR:{
            arguments = Arguments();
            break;
            }
          case LBRACE_SEPARATOR:{
            blockStart = jj_consume_token(LBRACE_SEPARATOR);
            arguments = SimpleInitialCollectionValues();
            blockEnd = jj_consume_token(RBRACE_SEPARATOR);
            break;
            }
          default:
            jj_la1[137] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case MAP_KEYWORD:{
          collectionType = jj_consume_token(MAP_KEYWORD);
          typeArguments = GenericType();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN_SEPARATOR:{
            arguments = Arguments();
            break;
            }
          case LBRACE_SEPARATOR:{
            blockStart = jj_consume_token(LBRACE_SEPARATOR);
            arguments = MapInitialCollectionValues();
            blockEnd = jj_consume_token(RBRACE_SEPARATOR);
            break;
            }
          default:
            jj_la1[138] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[139] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
allocationExpression = factory.createNewCollection(collectionType, blockStart, blockEnd, typeArguments, arguments);
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return allocationExpression;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree ExpressionSosl() throws ParseException {SOSLFindExpressionTree findSOSLExpression;
    Token findQuery = null;
    LiteralTree findQueryExpression = null;
    ExpressionTree optionalExpression = null;
    List<ExpressionTree> optionalStatements = new ArrayList<ExpressionTree>();
    jj_consume_token(FIND_KEYWORD);
    findQuery = jj_consume_token(STRING_LITERAL_STRING);
findQueryExpression = factory.createStringLiteral(findQuery);
             findSOSLExpression = factory.createSOSLFindExpression(findQueryExpression);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN_KEYWORD:{
      optionalExpression = SoslInSearchGroupSpec();
      break;
      }
    default:
      jj_la1[141] = jj_gen;
      ;
    }
optionalStatements.add(optionalExpression);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RETURNING_KEYWORD:{
      optionalExpression = SoslReturningFieldSpec();
      break;
      }
    default:
      jj_la1[142] = jj_gen;
      ;
    }
optionalStatements.add(optionalExpression);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UPDATE_KEYWORD:{
      optionalExpression = SoslUpdateSpec();
      break;
      }
    default:
      jj_la1[143] = jj_gen;
      ;
    }
optionalStatements.add(optionalExpression);
    if (jj_2_47(2)) {
      optionalExpression = SoslWithDivisionFilter();
    } else {
      ;
    }
optionalStatements.add(optionalExpression);
    if (jj_2_48(2)) {
      optionalExpression = SoslWithDataCategory();
    } else {
      ;
    }
optionalStatements.add(optionalExpression);
    if (jj_2_49(2)) {
      optionalExpression = SoslWithNetworkSpec();
    } else {
      ;
    }
optionalStatements.add(optionalExpression);
    if (jj_2_50(2)) {
      optionalExpression = SoslWithSnippetSpec();
    } else {
      ;
    }
optionalStatements.add(optionalExpression);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIMIT_KEYWORD:{
      optionalExpression = SoqlLimitExpression();
      break;
      }
    default:
      jj_la1[144] = jj_gen;
      ;
    }
optionalStatements.add(optionalExpression);
{if ("" != null) return factory.createSOSLExpression(findSOSLExpression,optionalStatements);}
    throw new Error("Missing return statement in function");
  }

  final public SOSLInExpressionTree SoslInSearchGroupSpec() throws ParseException {SOSLSearchGroupType searchGroup;
    jj_consume_token(IN_KEYWORD);
    searchGroup = SoslSearchGroup();
{if ("" != null) return factory.createSOSLInExpression(searchGroup);}
    throw new Error("Missing return statement in function");
  }

  final public SOSLSearchGroupType SoslSearchGroup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ALL_FIELDS_KEYWORD:{
      jj_consume_token(ALL_FIELDS_KEYWORD);
{if ("" != null) return SOSLSearchGroupType.ALL_FIELDS;}
      break;
      }
    case EMAIL_FIELDS_KEYWORD:{
      jj_consume_token(EMAIL_FIELDS_KEYWORD);
{if ("" != null) return SOSLSearchGroupType.EMAIL_FIELDS;}
      break;
      }
    case NAME_FIELDS_KEYWORD:{
      jj_consume_token(NAME_FIELDS_KEYWORD);
{if ("" != null) return SOSLSearchGroupType.NAME_FIELDS;}
      break;
      }
    case PHONE_FIELDS_KEYWORD:{
      jj_consume_token(PHONE_FIELDS_KEYWORD);
{if ("" != null) return SOSLSearchGroupType.PHONE_FIELDS;}
      break;
      }
    case SIDEBAR_FIELDS_KEYWORD:{
      jj_consume_token(SIDEBAR_FIELDS_KEYWORD);
{if ("" != null) return SOSLSearchGroupType.SIDEBAR_FIELDS;}
      break;
      }
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SOSLReturningExpressionTree SoslReturningFieldSpec() throws ParseException {List<SOSLObjectFieldExpressionTree> objectFieldList;
    jj_consume_token(RETURNING_KEYWORD);
    objectFieldList = SoslReturningObjectTypeSpec();
{if ("" != null) return factory.createSOSLReturningExpression(objectFieldList);}
    throw new Error("Missing return statement in function");
  }

  final public List<SOSLObjectFieldExpressionTree> SoslReturningObjectTypeSpec() throws ParseException {SOSLObjectFieldExpressionTree objectField;
    List<SOSLObjectFieldExpressionTree> objectFieldList = new ArrayList<SOSLObjectFieldExpressionTree>();
    objectField = SoslReturningObjectType();
objectFieldList.add(objectField);
    label_36:
    while (true) {
      if (jj_2_51(2)) {
        ;
      } else {
        break label_36;
      }
      jj_consume_token(COMMA_SEPARATOR);
      objectField = SoslReturningObjectType();
objectFieldList.add(objectField);
    }
{if ("" != null) return objectFieldList;}
    throw new Error("Missing return statement in function");
  }

  final public SOSLObjectFieldExpressionTree SoslReturningObjectType() throws ParseException {Name objectTypeName;
    List<IdentifierTree> fieldList = new ArrayList<IdentifierTree>();
    List<ExpressionTree> optionalStatements = new ArrayList<ExpressionTree>();
    objectTypeName = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_SEPARATOR:{
      SoslObjectTypeFieldList(fieldList, optionalStatements);
      break;
      }
    default:
      jj_la1[146] = jj_gen;
      ;
    }
{if ("" != null) return factory.createSOSLObjectFieldExpression(factory.createIdentifier(objectTypeName), fieldList, optionalStatements);}
    throw new Error("Missing return statement in function");
  }

  final public void SoslObjectTypeFieldList(List<IdentifierTree> identifiers, List<ExpressionTree> optionalStatements) throws ParseException {
    jj_consume_token(LPAREN_SEPARATOR);
    label_37:
    while (true) {
      SoslObjectTypeField(identifiers, optionalStatements);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case INT_KEYWORD:
      case PACKAGE_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[147] = jj_gen;
        break label_37;
      }
    }
    jj_consume_token(RPAREN_SEPARATOR);
  }

  final public void SoslObjectTypeField(List<IdentifierTree> identifiers, List<ExpressionTree> optionalStatements) throws ParseException {Name name;
    ExpressionTree optionalExpression = null;
    name = SoslObjectTypeFieldName();
identifiers.add(factory.createIdentifier(name));
    label_38:
    while (true) {
      if (jj_2_52(2)) {
        ;
      } else {
        break label_38;
      }
      jj_consume_token(COMMA_SEPARATOR);
      name = SoslObjectTypeFieldName();
identifiers.add(factory.createIdentifier(name));
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WHERE_KEYWORD:{
      optionalExpression = ExpressionWhere();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ORDER_KEYWORD:{
      jj_consume_token(ORDER_KEYWORD);
      jj_consume_token(BY_KEYWORD);
      optionalExpression = SoqlOrderByExpression();
optionalStatements.add(optionalExpression);
      break;
      }
    default:
      jj_la1[149] = jj_gen;
      ;
    }
    if (jj_2_53(2)) {
      optionalExpression = SoqlLimitExpression();
optionalStatements.add(optionalExpression);
    } else {
      ;
    }
    if (jj_2_54(2)) {
      optionalExpression = SoqlOffsetExpression();
optionalStatements.add(optionalExpression);
    } else {
      ;
    }
  }

  final public Name SoslObjectTypeFieldName() throws ParseException {Name name;
    if (jj_2_55(2)) {
      jj_consume_token(TOLABEL_KEYWORD);
      jj_consume_token(LPAREN_SEPARATOR);
      name = Name();
      jj_consume_token(RPAREN_SEPARATOR);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case INT_KEYWORD:
      case PACKAGE_KEYWORD:
      case TRANSIENT_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:{
        name = Name();
        break;
        }
      default:
        jj_la1[150] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return name;}
    throw new Error("Missing return statement in function");
  }

  final public SOSLUpdateExpressionTree SoslUpdateSpec() throws ParseException {SOSLUpdateType UpdateType;
    jj_consume_token(UPDATE_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRACKING_KEYWORD:{
      jj_consume_token(TRACKING_KEYWORD);
UpdateType = SOSLUpdateType.TRACKING;
      break;
      }
    case VIEWSTAT_KEYWORD:{
      jj_consume_token(VIEWSTAT_KEYWORD);
UpdateType = SOSLUpdateType.VIEWSTAT;
      break;
      }
    default:
      jj_la1[151] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return factory.createSOSLUpdateExpression(UpdateType);}
    throw new Error("Missing return statement in function");
  }

  final public SOSLWithDivisionFilterExpressionTree SoslWithDivisionFilter() throws ParseException {Token FindFilter;
    jj_consume_token(WITH_KEYWORD);
    jj_consume_token(DIVISION_KEYWORD);
    jj_consume_token(ASSIGN_OPERATOR);
    FindFilter = jj_consume_token(STRING_LITERAL_STRING);
{if ("" != null) return factory.createSOSLWithDivisionFilterExpression(factory.createStringLiteral(FindFilter));}
    throw new Error("Missing return statement in function");
  }

  final public SOSLWithDataCategoryExpressionTree SoslWithDataCategory() throws ParseException {ExpressionTree left;
    ExpressionTree right;
    Token logicalOperator;
    jj_consume_token(WITH_KEYWORD);
    jj_consume_token(DATA_KEYWORD);
    jj_consume_token(CATEGORY_KEYWORD);
    left = SoslDataCategorySpec();
    label_39:
    while (true) {
      if (jj_2_56(2)) {
        ;
      } else {
        break label_39;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ANDLITERAL_KEYWORD:{
        logicalOperator = jj_consume_token(ANDLITERAL_KEYWORD);
        break;
        }
      case OR_KEYWORD:{
        logicalOperator = jj_consume_token(OR_KEYWORD);
        break;
        }
      default:
        jj_la1[152] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = SoslDataCategorySpec();
left = factory.createBinary(null, left, right, logicalOperator);
    }
{if ("" != null) return factory.createSOSLWithDataCategoryExpression(left);}
    throw new Error("Missing return statement in function");
  }

  final public SOSLDataCategoryExpressionTree SoslDataCategorySpec() throws ParseException {Name groupName;
    SOSLDataCategoryOperator operator;
    Name category;
    groupName = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AT_KEYWORD:{
      jj_consume_token(AT_KEYWORD);
operator = SOSLDataCategoryOperator.AT;
      break;
      }
    case ABOVE_OR_BELOW_KEYWORD:{
      jj_consume_token(ABOVE_OR_BELOW_KEYWORD);
operator = SOSLDataCategoryOperator.ABOVE_OR_BELOW;
      break;
      }
    case ABOVE_KEYWORD:{
      jj_consume_token(ABOVE_KEYWORD);
operator = SOSLDataCategoryOperator.ABOVE;
      break;
      }
    case BELOW_KEYWORD:{
      jj_consume_token(BELOW_KEYWORD);
operator = SOSLDataCategoryOperator.BELOW;
      break;
      }
    default:
      jj_la1[153] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    category = Name();
{if ("" != null) return factory.createSOSLDataCategoryExpression(factory.createIdentifier(groupName), operator, factory.createIdentifier(category));}
    throw new Error("Missing return statement in function");
  }

  final public SOSLWithNetworkExpressionTree SoslWithNetworkSpec() throws ParseException {List<LiteralTree> networkList = new ArrayList<LiteralTree>();
    Token network;
    jj_consume_token(WITH_KEYWORD);
    jj_consume_token(NETWORK_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IN_KEYWORD:{
      jj_consume_token(IN_KEYWORD);
      jj_consume_token(LPAREN_SEPARATOR);
      network = jj_consume_token(STRING_LITERAL_STRING);
networkList.add(factory.createStringLiteral(network));
      label_40:
      while (true) {
        if (jj_2_57(2)) {
          ;
        } else {
          break label_40;
        }
        jj_consume_token(COMMA_SEPARATOR);
        network = jj_consume_token(STRING_LITERAL_STRING);
networkList.add(factory.createStringLiteral(network));
      }
      jj_consume_token(RPAREN_SEPARATOR);
      break;
      }
    case ASSIGN_OPERATOR:{
      jj_consume_token(ASSIGN_OPERATOR);
      network = jj_consume_token(STRING_LITERAL_STRING);
networkList.add(factory.createStringLiteral(network));
      break;
      }
    default:
      jj_la1[154] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return factory.createSOSLWithNetworkExpression(networkList);}
    throw new Error("Missing return statement in function");
  }

  final public SOSLWithSnippetExpressionTree SoslWithSnippetSpec() throws ParseException {Token value = null;
    jj_consume_token(WITH_KEYWORD);
    jj_consume_token(SNIPPET_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_SEPARATOR:{
      jj_consume_token(LPAREN_SEPARATOR);
      jj_consume_token(TARGET_LENGTH_KEYWORD);
      jj_consume_token(ASSIGN_OPERATOR);
      value = jj_consume_token(INTEGER_LITERAL_NUMBER);
      jj_consume_token(RPAREN_SEPARATOR);
      break;
      }
    default:
      jj_la1[155] = jj_gen;
      ;
    }
{if ("" != null) return factory.createSOSLWithSnippetExpression(factory.createIntegerLiteral(value));}
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public NewArrayTree ArrayDimsAndInits(ExpressionTree type) throws ParseException {ExpressionTree dimention;
    List<? extends ExpressionTree> initializers;
    NewArrayTree newArray;
    Token blockStart = null;
    Token blockEnd = null;
    if (jj_2_58(2)) {
      jj_consume_token(LBRACKET_SEPARATOR);
      dimention = Expression();
      jj_consume_token(RBRACKET_SEPARATOR);
newArray = factory.createNewArray(blockStart, blockEnd, type, dimention);
    } else if (jj_2_59(2)) {
      jj_consume_token(LBRACKET_SEPARATOR);
      jj_consume_token(RBRACKET_SEPARATOR);
      blockStart = jj_consume_token(LBRACE_SEPARATOR);
      initializers = ArrayInitializer();
      blockEnd = jj_consume_token(RBRACE_SEPARATOR);
newArray = factory.createNewArray(blockStart, blockEnd, type, initializers);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return newArray;}
    throw new Error("Missing return statement in function");
  }

  final public List<Tree> GenericType() throws ParseException {List<Tree> typeArguments = new ArrayList<Tree>();
    Tree type;
    jj_consume_token(LT_OPERATOR);
    type = Type();
typeArguments.add(type);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA_SEPARATOR:{
      jj_consume_token(COMMA_SEPARATOR);
      type = Type();
typeArguments.add(type);
      break;
      }
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    jj_consume_token(GT_OPERATOR);
{if ("" != null) return typeArguments;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends ExpressionTree> SimpleInitialCollectionValues() throws ParseException {List<? extends ExpressionTree> arguments = new ArrayList<ExpressionTree>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      arguments = ArgumentList();
      break;
      }
    default:
      jj_la1[157] = jj_gen;
      ;
    }
{if ("" != null) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends ExpressionTree> MapInitialCollectionValues() throws ParseException {List<? extends ExpressionTree> arguments = new ArrayList<ExpressionTree>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      arguments = MapValues();
      break;
      }
    default:
      jj_la1[158] = jj_gen;
      ;
    }
{if ("" != null) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public List<PairExpressionTree> MapValues() throws ParseException {List<PairExpressionTree> arguments = new ArrayList<PairExpressionTree>();
    ExpressionTree key;
    ExpressionTree value;
    key = Expression();
    jj_consume_token(MAP_OPERATOR);
    value = Expression();
arguments.add(factory.createPair(key, value));
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_SEPARATOR:{
        ;
        break;
        }
      default:
        jj_la1[159] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA_SEPARATOR);
      key = Expression();
      jj_consume_token(MAP_OPERATOR);
      value = Expression();
arguments.add(factory.createPair(key, value));
    }
{if ("" != null) return arguments;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public StatementTree Statement() throws ParseException {StatementTree statement;
    try {
      if (jj_2_60(2)) {
        statement = Block();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE_KEYWORD:
        case INSERT_KEYWORD:
        case MERGE_KEYWORD:
        case UNDELETE_KEYWORD:
        case UPDATE_KEYWORD:
        case UPSERT_KEYWORD:{
          statement = DMLOperations();
          jj_consume_token(SEMICOLON_SEPARATOR);
          break;
          }
        case SEMICOLON_SEPARATOR:{
          statement = EmptyStatement();
          break;
          }
        case ARRAY_KEYWORD:
        case EXCEPTION_KEYWORD:
        case FALSE_KEYWORD:
        case INT_KEYWORD:
        case LIST_KEYWORD:
        case MAP_KEYWORD:
        case NEW_KEYWORD:
        case NULL_KEYWORD:
        case PACKAGE_KEYWORD:
        case SUPER_KEYWORD:
        case THIS_KEYWORD:
        case TRANSIENT_KEYWORD:
        case TRUE_KEYWORD:
        case VOID_KEYWORD:
        case ITERATOR_KEYWORD:
        case ACTIVATE_KEYWORD:
        case ANY_KEYWORD:
        case AUTONOMOUS_KEYWORD:
        case BEGIN_KEYWORD:
        case BIGDECIMAL_KEYWORD:
        case BYTE_KEYWORD:
        case CASE_KEYWORD:
        case CAST_KEYWORD:
        case CHAR_KEYWORD:
        case COLLECT_KEYWORD:
        case CONST_KEYWORD:
        case _DEFAULT_KEYWORD:
        case END_KEYWORD:
        case EXIT_KEYWORD:
        case EXPORT_KEYWORD:
        case FLOAT_KEYWORD:
        case GOTO_KEYWORD:
        case GROUP_KEYWORD:
        case HINT_KEYWORD:
        case IMPORT_KEYWORD:
        case INNER_KEYWORD:
        case INTO_KEYWORD:
        case JOIN_KEYWORD:
        case LOOP_KEYWORD:
        case NUMBER_KEYWORD:
        case OF_KEYWORD:
        case OUTER_KEYWORD:
        case PARALLEL_KEYWORD:
        case RETRIEVE_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case SHORT_KEYWORD:
        case STAT_KEYWORD:
        case SWITCH_KEYWORD:
        case SYNCHRONIZED_KEYWORD:
        case THEN_KEYWORD:
        case TRANSACTION_KEYWORD:
        case WHEN_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case LIMIT_KEYWORD:
        case ROLLBACK_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case TRIGGER_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case WITH_KEYWORD:
        case SET_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:
        case IDENTIFIER:
        case LPAREN_SEPARATOR:
        case LBRACKET_SEPARATOR:
        case INCR_OPERATOR:
        case DECR_OPERATOR:{
          statement = CompoundStatementExpression();
          break;
          }
        case IF_KEYWORD:{
          statement = IfStatement();
          break;
          }
        case WHILE_KEYWORD:{
          statement = WhileStatement();
          break;
          }
        case DO_KEYWORD:{
          statement = DoStatement();
          break;
          }
        case FOR_KEYWORD:{
          statement = ForStatement();
          break;
          }
        case BREAK_KEYWORD:{
          statement = BreakStatement();
          break;
          }
        case CONTINUE_KEYWORD:{
          statement = ContinueStatement();
          break;
          }
        case RETURN_KEYWORD:{
          statement = ReturnStatement();
          break;
          }
        case THROW_KEYWORD:{
          statement = ThrowStatement();
          break;
          }
        case TRY_KEYWORD:{
          statement = TryStatement();
          break;
          }
        default:
          jj_la1[160] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException ex) {
ContextParseException contextException = new IllegalStatementException(ex);
        contextErrorRecover(contextException);
        statement = factory.createEmptyStatement();
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree CompoundStatementExpression() throws ParseException {StatementTree statement = null;
    StatementTree result = null;
    List<StatementTree> childrenStatements = new ArrayList<StatementTree>();
    statement = StatementExpression();
result = statement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE_SEPARATOR:{
      statement = Block();
childrenStatements.add(statement); result = factory.createCompoundStatementExpression(result,childrenStatements);
      break;
      }
    case SEMICOLON_SEPARATOR:{
      jj_consume_token(SEMICOLON_SEPARATOR);
      break;
      }
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree DMLOperations() throws ParseException {StatementTree statement;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:{
        statement = DMLOperation();
        break;
        }
      case UPSERT_KEYWORD:{
        statement = DMLUpsert();
        break;
        }
      case MERGE_KEYWORD:{
        statement = DMLMerge();
        break;
        }
      default:
        jj_la1[162] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
ContextParseException contextException = new IllegalStatementException(ex);
        contextErrorRecover(contextException);
        statement = factory.createEmptyStatement();
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree DMLOperation() throws ParseException {ExpressionTree expression = null;
    Token operator = null;
    DMLOperationEnum dmlOperationEnum = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT_KEYWORD:{
        operator = jj_consume_token(INSERT_KEYWORD);
dmlOperationEnum = DMLOperationEnum.insert;
        break;
        }
      case DELETE_KEYWORD:{
        operator = jj_consume_token(DELETE_KEYWORD);
dmlOperationEnum = DMLOperationEnum.delete;
        break;
        }
      case UNDELETE_KEYWORD:{
        operator = jj_consume_token(UNDELETE_KEYWORD);
dmlOperationEnum = DMLOperationEnum.undelete;
        break;
        }
      case UPDATE_KEYWORD:{
        operator = jj_consume_token(UPDATE_KEYWORD);
dmlOperationEnum = DMLOperationEnum.update;
        break;
        }
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression = PrimaryExpression();
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
    }
{if ("" != null) return factory.createDMLOperation(dmlOperationEnum.setExpression(expression));}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree DMLUpsert() throws ParseException {ExpressionTree upsertExpression = null;
    ExpressionTree optionalField = null;
    DMLOperationEnum dmlOperationEnum = DMLOperationEnum.upsert;
    try {
      jj_consume_token(UPSERT_KEYWORD);
      upsertExpression = PrimaryExpression();
dmlOperationEnum.setExpression(upsertExpression);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACKET_SEPARATOR:{
        optionalField = PrimaryExpression();
        break;
        }
      default:
        jj_la1[164] = jj_gen;
        ;
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
    }
{if ("" != null) return factory.createDMLUpsert(dmlOperationEnum, optionalField);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree DMLMerge() throws ParseException {ExpressionTree masterRecords = null;
    ExpressionTree mergeRecords = null;
    DMLOperationEnum dmlOperationEnum = DMLOperationEnum.merge;
    try {
      jj_consume_token(MERGE_KEYWORD);
      masterRecords = PrimaryExpression();
dmlOperationEnum.setExpression(masterRecords);
      mergeRecords = PrimaryExpression();
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
    }
{if ("" != null) return factory.createDMLMerge(dmlOperationEnum, mergeRecords);}
    throw new Error("Missing return statement in function");
  }

  final public BlockTree Block() throws ParseException {Collection<StatementTree> statements = Collections.emptyList();
    List<StatementTree> blockStatements = new ArrayList<StatementTree>();
    Token blockStart;
    Token blockEnd;
    blockStart = jj_consume_token(LBRACE_SEPARATOR);
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FINAL_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[165] = jj_gen;
        break label_42;
      }
      statements = BlockStatement();
blockStatements.addAll(statements);
    }
    blockEnd = jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return factory.createBlock(blockStatements, false, blockStart, blockEnd);}
    throw new Error("Missing return statement in function");
  }

  final public Collection<StatementTree> BlockStatement() throws ParseException {StatementTree statement;
    List<VariableTree> variableStatements;
    if (jj_2_61(2147483647)) {
      variableStatements = LocalVariableDeclaration();
      jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return new ArrayList<StatementTree>(variableStatements);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        statement = Statement();
{if ("" != null) return Collections.singletonList(statement);}
        break;
        }
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<VariableTree> LocalVariableDeclaration() throws ParseException {VariableTree variable;
    Tree type;
    List<VariableTree> variables = new ArrayList<VariableTree>();
    LinkedHashMap<Integer, Token> modifiers = new LinkedHashMap<Integer, Token>();
    Token modifierToken;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL_KEYWORD:{
        modifierToken = jj_consume_token(FINAL_KEYWORD);
modifiers.put(ModifierSet.FINAL, modifierToken);
        break;
        }
      default:
        jj_la1[167] = jj_gen;
        ;
      }
      type = Type();
      variable = VariableDeclarator(factory.createModifier(modifiers), type);
variables.add(variable);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[168] = jj_gen;
          break label_43;
        }
        jj_consume_token(COMMA_SEPARATOR);
        variable = VariableDeclarator(factory.createModifier(modifiers), type);
variables.add(variable);
      }
    } catch (ParseException ex) {
contextErrorRecover(new BadAssignmentException(ex));
    }
{if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return factory.createEmptyStatement();}
    throw new Error("Missing return statement in function");
  }

/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
  final public ExpressionStatementTree StatementExpression() throws ParseException {ApexParser.Tuple primaryExpression = new ApexParser.Tuple();
    ExpressionTree expression;
    Token operator;
    ExpressionTree assignment;
    Token thisToken;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR_OPERATOR:{
        expression = PreIncrementExpression();
        break;
        }
      case DECR_OPERATOR:{
        expression = PreDecrementExpression();
        break;
        }
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACKET_SEPARATOR:{
        primaryExpression = TuplePrimaryExpression();
expression = (ExpressionTree)primaryExpression.treeObject;
                if (primaryExpression.treeType == ApexParser.Type.ExpressionSql
                    || primaryExpression.treeType == ApexParser.Type.ExpressionSosl
                    || primaryExpression.treeType == ApexParser.Type.Arguments
                    || primaryExpression.treeObject instanceof NewClassTree) {
                    {if ("" != null) return factory.createExpressionStatement(expression);}
                }
        label_44:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR_OPERATOR:{
            operator = jj_consume_token(INCR_OPERATOR);
expression = factory.createPostfixIncrement(expression, operator);
            break;
            }
          case DECR_OPERATOR:{
            operator = jj_consume_token(DECR_OPERATOR);
expression = factory.createPostfixDecrement(expression, operator);
            break;
            }
          case ASSIGN_OPERATOR:
          case PLUSASSIGN_OPERATOR:
          case MINUSASSIGN_OPERATOR:
          case STARASSIGN_OPERATOR:
          case SLASHASSIGN_OPERATOR:
          case ANDASSIGN_OPERATOR:
          case ORASSIGN_OPERATOR:
          case XORASSIGN_OPERATOR:
          case REMASSIGN_OPERATOR:
          case LSHIFTASSIGN_OPERATOR:
          case RSIGNEDSHIFTASSIGN_OPERATOR:
          case RUNSIGNEDSHIFTASSIGN_OPERATOR:{
            operator = AssignmentOperator();
            if (jj_2_62(2)) {
              assignment = Expression();
expression = factory.createCompoundAssignment(expression, assignment, operator);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case THIS_KEYWORD:{
                thisToken = jj_consume_token(THIS_KEYWORD);
expression = factory.createCompoundAssignment(expression, factory.createIdentifier(thisToken), operator);
                break;
                }
              default:
                jj_la1[169] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            break;
            }
          default:
            jj_la1[170] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN_OPERATOR:
          case INCR_OPERATOR:
          case DECR_OPERATOR:
          case PLUSASSIGN_OPERATOR:
          case MINUSASSIGN_OPERATOR:
          case STARASSIGN_OPERATOR:
          case SLASHASSIGN_OPERATOR:
          case ANDASSIGN_OPERATOR:
          case ORASSIGN_OPERATOR:
          case XORASSIGN_OPERATOR:
          case REMASSIGN_OPERATOR:
          case LSHIFTASSIGN_OPERATOR:
          case RSIGNEDSHIFTASSIGN_OPERATOR:
          case RUNSIGNEDSHIFTASSIGN_OPERATOR:{
            ;
            break;
            }
          default:
            jj_la1[171] = jj_gen;
            break label_44;
          }
        }
        break;
        }
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
        expression = factory.createErroneousExpression();
    }
{if ("" != null) return factory.createExpressionStatement(expression);}
    throw new Error("Missing return statement in function");
  }

/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
  final public StatementTree IfStatement() throws ParseException {ExpressionTree condition;
    StatementTree thenStatement = factory.createEmptyStatement();
    StatementTree elseStatement = factory.createEmptyStatement();
    try {
      jj_consume_token(IF_KEYWORD);
      jj_consume_token(LPAREN_SEPARATOR);
      condition = Expression();
      jj_consume_token(RPAREN_SEPARATOR);
      thenStatement = Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE_KEYWORD:{
        jj_consume_token(ELSE_KEYWORD);
        elseStatement = Statement();
        break;
        }
      default:
        jj_la1[173] = jj_gen;
        ;
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalIfStatementException(ex));
        condition = factory.createErroneousExpression();
    }
{if ("" != null) return factory.createIf(condition, thenStatement, elseStatement);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree WhileStatement() throws ParseException {ExpressionTree condition;
    StatementTree statement = factory.createEmptyStatement();
    try {
      jj_consume_token(WHILE_KEYWORD);
      jj_consume_token(LPAREN_SEPARATOR);
      condition = Expression();
      jj_consume_token(RPAREN_SEPARATOR);
      statement = Statement();
    } catch (ParseException ex) {
contextErrorRecover(new IllegalWhileStatementException(ex));
        condition = factory.createErroneousExpression();
    }
{if ("" != null) return factory.createWhileLoop(condition, statement);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree DoStatement() throws ParseException {ExpressionTree condition;
    StatementTree statement = factory.createEmptyStatement();
    Token startToken = null;
    Token endToken = null;
    try {
      startToken = jj_consume_token(DO_KEYWORD);
      statement = Statement();
      jj_consume_token(WHILE_KEYWORD);
      jj_consume_token(LPAREN_SEPARATOR);
      condition = Expression();
      jj_consume_token(RPAREN_SEPARATOR);
      endToken = jj_consume_token(SEMICOLON_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new IllegalDoWhileStatementException(ex));
        condition = factory.createErroneousExpression();
    }
{if ("" != null) return factory.createDoWhileLoop(condition, statement, startToken, endToken);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ForStatement() throws ParseException {StatementTree forStatement = factory.createEmptyStatement();
    try {
      jj_consume_token(FOR_KEYWORD);
      if (jj_2_63(2147483647)) {
        forStatement = ForEachLoop();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN_SEPARATOR:{
          forStatement = ForLoop();
          break;
          }
        default:
          jj_la1[174] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalForStatementException(ex));
    }
{if ("" != null) return forStatement;}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ForEachLoop() throws ParseException {Tree type;
    Token identifier;
    ExpressionTree expression;
    StatementTree statements;
    jj_consume_token(LPAREN_SEPARATOR);
    type = Type();
    identifier = AllowedKeywordsAsIdentifier();
    jj_consume_token(COLON_OPERATOR);
    expression = Expression();
    jj_consume_token(RPAREN_SEPARATOR);
    statements = Statement();
VariableTree variable = factory.createVariable(type, identifier, null);
        {if ("" != null) return factory.createEnhancedForLoop(variable, expression, statements);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ForLoop() throws ParseException {List<VariableTree> initializer = new ArrayList<VariableTree>();
    ExpressionTree condition = factory.createErroneousExpression();
    List<ExpressionStatementTree> update = new ArrayList<ExpressionStatementTree>();
    StatementTree statement;
    jj_consume_token(LPAREN_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXCEPTION_KEYWORD:
    case FINAL_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case TRANSIENT_KEYWORD:
    case ITERATOR_KEYWORD:
    case GROUP_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case STAT_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case LIMIT_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case IDENTIFIER:{
      initializer = ForInit();
      break;
      }
    default:
      jj_la1[175] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case BANG_OPERATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:
    case PLUS_OPERATOR:
    case MINUS_OPERATOR:{
      condition = Expression();
      break;
      }
    default:
      jj_la1[176] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON_SEPARATOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARRAY_KEYWORD:
    case EXCEPTION_KEYWORD:
    case FALSE_KEYWORD:
    case INT_KEYWORD:
    case LIST_KEYWORD:
    case MAP_KEYWORD:
    case NEW_KEYWORD:
    case NULL_KEYWORD:
    case PACKAGE_KEYWORD:
    case SUPER_KEYWORD:
    case THIS_KEYWORD:
    case TRANSIENT_KEYWORD:
    case TRUE_KEYWORD:
    case VOID_KEYWORD:
    case ITERATOR_KEYWORD:
    case ACTIVATE_KEYWORD:
    case ANY_KEYWORD:
    case AUTONOMOUS_KEYWORD:
    case BEGIN_KEYWORD:
    case BIGDECIMAL_KEYWORD:
    case BYTE_KEYWORD:
    case CASE_KEYWORD:
    case CAST_KEYWORD:
    case CHAR_KEYWORD:
    case COLLECT_KEYWORD:
    case CONST_KEYWORD:
    case _DEFAULT_KEYWORD:
    case END_KEYWORD:
    case EXIT_KEYWORD:
    case EXPORT_KEYWORD:
    case FLOAT_KEYWORD:
    case GOTO_KEYWORD:
    case GROUP_KEYWORD:
    case HINT_KEYWORD:
    case IMPORT_KEYWORD:
    case INNER_KEYWORD:
    case INTO_KEYWORD:
    case JOIN_KEYWORD:
    case LOOP_KEYWORD:
    case NUMBER_KEYWORD:
    case OF_KEYWORD:
    case OUTER_KEYWORD:
    case PARALLEL_KEYWORD:
    case RETRIEVE_KEYWORD:
    case RETURNING_KEYWORD:
    case SEARCH_KEYWORD:
    case SHORT_KEYWORD:
    case STAT_KEYWORD:
    case SWITCH_KEYWORD:
    case SYNCHRONIZED_KEYWORD:
    case THEN_KEYWORD:
    case TRANSACTION_KEYWORD:
    case WHEN_KEYWORD:
    case CONVERTCURRENCY_KEYWORD:
    case DELETE_KEYWORD:
    case INSERT_KEYWORD:
    case LIMIT_KEYWORD:
    case MERGE_KEYWORD:
    case ROLLBACK_KEYWORD:
    case SAVEPOINT_KEYWORD:
    case TOLABEL_KEYWORD:
    case TRIGGER_KEYWORD:
    case UNDELETE_KEYWORD:
    case UPDATE_KEYWORD:
    case UPSERT_KEYWORD:
    case FIRST_KEYWORD:
    case LAST_KEYWORD:
    case OFFSET_KEYWORD:
    case DATA_KEYWORD:
    case CATEGORY_KEYWORD:
    case NETWORK_KEYWORD:
    case SHARING_KEYWORD:
    case WITHOUT_OTHER:
    case WITH_KEYWORD:
    case SET_KEYWORD:
    case GET_KEYWORD:
    case AFTER_KEYWORD:
    case BEFORE_KEYWORD:
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:
    case INTEGER_LITERAL_NUMBER:
    case FLOATING_POINT_LITERAL_NUMBER:
    case STRING_LITERAL_STRING:
    case IDENTIFIER:
    case LPAREN_SEPARATOR:
    case LBRACKET_SEPARATOR:
    case INCR_OPERATOR:
    case DECR_OPERATOR:{
      update = ForUpdate();
      break;
      }
    default:
      jj_la1[177] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN_SEPARATOR);
    statement = Statement();
{if ("" != null) return factory.createForLoop(initializer, condition, update, statement);}
    throw new Error("Missing return statement in function");
  }

  final public List<VariableTree> ForInit() throws ParseException {LinkedHashMap<Integer, Token> modifiers = new LinkedHashMap<Integer, Token>();
    List<VariableTree> variables = new ArrayList<VariableTree>();
    VariableTree variable;
    try {
      if (jj_2_64(2147483647)) {
        variables = LocalVariableDeclaration();
      } else if (jj_2_65(2147483647)) {
        variable = VariableDeclarator(factory.createModifier(modifiers, null), null);
variables.add(variable);
        label_45:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA_SEPARATOR:{
            ;
            break;
            }
          default:
            jj_la1[178] = jj_gen;
            break label_45;
          }
          jj_consume_token(COMMA_SEPARATOR);
          variable = VariableDeclarator(factory.createModifier(modifiers), null);
variables.add(variable);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException ex) {
contextErrorRecover(new BadAssignmentException(ex));
    }
{if ("" != null) return variables;}
    throw new Error("Missing return statement in function");
  }

  final public List<ExpressionStatementTree> ForUpdate() throws ParseException {ExpressionStatementTree statement;
    statement = StatementExpression();
{if ("" != null) return Collections.singletonList(statement);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree BreakStatement() throws ParseException {
    jj_consume_token(BREAK_KEYWORD);
    jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return factory.createBreak();}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE_KEYWORD);
    jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return factory.createContinue();}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ReturnStatement() throws ParseException {ExpressionTree expression = factory.createErroneousExpression();
    Token thisKeyword;
    try {
      jj_consume_token(RETURN_KEYWORD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case BANG_OPERATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:
      case PLUS_OPERATOR:
      case MINUS_OPERATOR:{
        if (jj_2_66(2)) {
          expression = Expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case THIS_KEYWORD:{
            thisKeyword = jj_consume_token(THIS_KEYWORD);
expression = factory.createIdentifier(thisKeyword);
            break;
            }
          default:
            jj_la1[179] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[180] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
    }
{if ("" != null) return factory.createReturn(expression);}
    throw new Error("Missing return statement in function");
  }

  final public StatementTree ThrowStatement() throws ParseException {ExpressionTree expression;
    try {
      jj_consume_token(THROW_KEYWORD);
      expression = Expression();
      jj_consume_token(SEMICOLON_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
        expression = factory.createErroneousExpression();
    }
{if ("" != null) return factory.createThrow(expression);}
    throw new Error("Missing return statement in function");
  }

/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
  final public TryTree TryStatement() throws ParseException {BlockTree tryBlock = factory.createEmptyBlock();
    BlockTree finallyBlock = null;
    VariableTree parameter;
    BlockTree catchBlock;
    CatchTree catchTree;
    List<CatchTree> catches = new ArrayList<CatchTree>();
    try {
      jj_consume_token(TRY_KEYWORD);
      tryBlock = Block();
      label_46:
      while (true) {
        jj_consume_token(CATCH_KEYWORD);
        jj_consume_token(LPAREN_SEPARATOR);
        parameter = FormalParameter();
        jj_consume_token(RPAREN_SEPARATOR);
        catchBlock = Block();
catchTree = factory.createCatch(parameter, catchBlock);
                catches.add(catchTree);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH_KEYWORD:{
          ;
          break;
          }
        default:
          jj_la1[181] = jj_gen;
          break label_46;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY_KEYWORD:{
        jj_consume_token(FINALLY_KEYWORD);
        finallyBlock = Block();
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        ;
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalTryCatchStatementException(ex));
    }
{if ("" != null) return factory.createTry(tryBlock, catches, finallyBlock);}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public Token RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT_OPERATOR &&
                      (getToken(1)).realKind == RUNSIGNEDSHIFT_OPERATOR) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT_OPERATOR);
    jj_consume_token(GT_OPERATOR);
    jj_consume_token(GT_OPERATOR);
{if ("" != null) return getToken(0);}
    throw new Error("Missing return statement in function");
  }

  final public Token RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT_OPERATOR &&
                      (getToken(1)).realKind == RSIGNEDSHIFT_OPERATOR) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT_OPERATOR);
    jj_consume_token(GT_OPERATOR);
{if ("" != null) return getToken(0);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTree Annotation() throws ParseException {Name annotationType;
    List<ExpressionTree> arguments = new ArrayList<ExpressionTree>();
    ExpressionTree argument;
    Token symbol;
    symbol = jj_consume_token(AT_SEPARATOR);
    annotationType = Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN_SEPARATOR:{
      jj_consume_token(LPAREN_SEPARATOR);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARRAY_KEYWORD:
        case EXCEPTION_KEYWORD:
        case FALSE_KEYWORD:
        case INT_KEYWORD:
        case LIST_KEYWORD:
        case MAP_KEYWORD:
        case NEW_KEYWORD:
        case NULL_KEYWORD:
        case PACKAGE_KEYWORD:
        case SUPER_KEYWORD:
        case THIS_KEYWORD:
        case TRANSIENT_KEYWORD:
        case TRUE_KEYWORD:
        case VOID_KEYWORD:
        case ITERATOR_KEYWORD:
        case ACTIVATE_KEYWORD:
        case ANY_KEYWORD:
        case AUTONOMOUS_KEYWORD:
        case BEGIN_KEYWORD:
        case BIGDECIMAL_KEYWORD:
        case BYTE_KEYWORD:
        case CASE_KEYWORD:
        case CAST_KEYWORD:
        case CHAR_KEYWORD:
        case COLLECT_KEYWORD:
        case CONST_KEYWORD:
        case _DEFAULT_KEYWORD:
        case END_KEYWORD:
        case EXIT_KEYWORD:
        case EXPORT_KEYWORD:
        case FLOAT_KEYWORD:
        case GOTO_KEYWORD:
        case GROUP_KEYWORD:
        case HINT_KEYWORD:
        case IMPORT_KEYWORD:
        case INNER_KEYWORD:
        case INTO_KEYWORD:
        case JOIN_KEYWORD:
        case LOOP_KEYWORD:
        case NUMBER_KEYWORD:
        case OF_KEYWORD:
        case OUTER_KEYWORD:
        case PARALLEL_KEYWORD:
        case RETRIEVE_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case SHORT_KEYWORD:
        case STAT_KEYWORD:
        case SWITCH_KEYWORD:
        case SYNCHRONIZED_KEYWORD:
        case THEN_KEYWORD:
        case TRANSACTION_KEYWORD:
        case WHEN_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case DELETE_KEYWORD:
        case INSERT_KEYWORD:
        case LIMIT_KEYWORD:
        case MERGE_KEYWORD:
        case ROLLBACK_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case TRIGGER_KEYWORD:
        case UNDELETE_KEYWORD:
        case UPDATE_KEYWORD:
        case UPSERT_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case WITH_KEYWORD:
        case SET_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:
        case IDENTIFIER:
        case LPAREN_SEPARATOR:
        case LBRACKET_SEPARATOR:
        case BANG_OPERATOR:
        case INCR_OPERATOR:
        case DECR_OPERATOR:
        case PLUS_OPERATOR:
        case MINUS_OPERATOR:{
          ;
          break;
          }
        default:
          jj_la1[183] = jj_gen;
          break label_47;
        }
        argument = Expression();
arguments.add(argument);
      }
      jj_consume_token(RPAREN_SEPARATOR);
      break;
      }
    default:
      jj_la1[184] = jj_gen;
      ;
    }
{if ("" != null) return factory.createAnnotation(symbol, annotationType, arguments);}
    throw new Error("Missing return statement in function");
  }

/*
 * Trigger structure syntax follows.
 */
  final public CompilationUnitTree TriggerCompilationUnit() throws ParseException {Tree triggerDecl = null;
    try {
      triggerDecl = TriggerDeclaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case END_OF_FILE_WHITESPACE:{
        jj_consume_token(END_OF_FILE_WHITESPACE);
        break;
        }
      default:
        jj_la1[185] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STUFF_TO_IGNORE:{
        jj_consume_token(STUFF_TO_IGNORE);
        break;
        }
      default:
        jj_la1[186] = jj_gen;
        ;
      }
      jj_consume_token(0);
    } catch (ParseException ex) {
recover(ex, SEMICOLON_SEPARATOR);
        triggerDecl = factory.createEmptyTrigger();
    }
{if ("" != null) return factory.createTriggerCompilationUnit(triggerDecl);}
    throw new Error("Missing return statement in function");
  }

  final public Tree TriggerDeclaration() throws ParseException {List<TriggerParameterTree> parameters = null;
    Token name = null;
    Token object = null;
    List<? extends Tree> body = null;
    jj_consume_token(TRIGGER_KEYWORD);
    name = AllowedKeywordsAsIdentifier();
    jj_consume_token(ON_KEYWORD);
    object = AllowedKeywordsAsIdentifier();
    parameters = TriggerParameters();
    body = TriggerBody();
{if ("" != null) return factory.createTriggerDeclaration(name, object, parameters, body);}
    throw new Error("Missing return statement in function");
  }

  final public List<TriggerParameterTree> TriggerParameters() throws ParseException {List<TriggerParameterTree> parameters =  new ArrayList<TriggerParameterTree>();
    try {
      jj_consume_token(LPAREN_SEPARATOR);
      FormalTriggerParameter(parameters);
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA_SEPARATOR:{
          ;
          break;
          }
        default:
          jj_la1[187] = jj_gen;
          break label_48;
        }
        jj_consume_token(COMMA_SEPARATOR);
        FormalTriggerParameter(parameters);
      }
      jj_consume_token(RPAREN_SEPARATOR);
    } catch (ParseException ex) {
contextErrorRecover(new TriggerTypeException(ex));
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public void FormalTriggerParameter(List<TriggerParameterTree> parameters) throws ParseException {TriggerType type;
   TriggerOperation operation;
    type = TriggerType();
    operation = TriggerOperation();
parameters.add(factory.createTriggerParameterTree(type,operation));
  }

  final public TriggerType TriggerType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BEFORE_KEYWORD:{
      jj_consume_token(BEFORE_KEYWORD);
{if ("" != null) return TriggerType.BEFORE;}
      break;
      }
    case AFTER_KEYWORD:{
      jj_consume_token(AFTER_KEYWORD);
{if ("" != null) return TriggerType.AFTER;}
      break;
      }
    default:
      jj_la1[188] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TriggerOperation TriggerOperation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSERT_KEYWORD:{
      jj_consume_token(INSERT_KEYWORD);
{if ("" != null) return TriggerOperation.INSERT;}
      break;
      }
    case UPDATE_KEYWORD:{
      jj_consume_token(UPDATE_KEYWORD);
{if ("" != null) return TriggerOperation.UPDATE;}
      break;
      }
    case DELETE_KEYWORD:{
      jj_consume_token(DELETE_KEYWORD);
{if ("" != null) return TriggerOperation.DELETE;}
      break;
      }
    case UNDELETE_KEYWORD:{
      jj_consume_token(UNDELETE_KEYWORD);
{if ("" != null) return TriggerOperation.UNDELETE;}
      break;
      }
    default:
      jj_la1[189] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerBody() throws ParseException {List<? extends Tree> member;
    member = TriggerBlock();
{if ("" != null) return member;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerBlock() throws ParseException {List<? extends Tree> member;
    List<Tree> members = new ArrayList<Tree>();
    jj_consume_token(LBRACE_SEPARATOR);
    label_49:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CLASS_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FINAL_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case INTERFACE_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PACKAGE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case RETURN_KEYWORD:
      case STATIC_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case GLOBAL_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case VIRTUAL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case AT_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[190] = jj_gen;
        break label_49;
      }
      member = TriggerBlockStatement();
members.addAll(member);
    }
    jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerBlockStatement() throws ParseException {ModifiersTree modifiers;
    Tree member;
    List<? extends Tree> TriggerMember;
    List<VariableTree> variables;
    if (jj_2_68(2147483647)) {
      variables = LocalVariableDeclaration();
      jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return variables;}
    } else if (jj_2_69(3)) {
      TriggerMember = TriggerStatement();
{if ("" != null) return TriggerMember;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT_KEYWORD:
      case CLASS_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FINAL_KEYWORD:
      case INTERFACE_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case OVERRIDE_KEYWORD:
      case PRIVATE_KEYWORD:
      case PROTECTED_KEYWORD:
      case PUBLIC_KEYWORD:
      case STATIC_KEYWORD:
      case TRANSIENT_KEYWORD:
      case VOID_KEYWORD:
      case ITERATOR_KEYWORD:
      case GROUP_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case STAT_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case GLOBAL_KEYWORD:
      case LIMIT_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TESTMETHOD_KEYWORD:
      case TOLABEL_KEYWORD:
      case VIRTUAL_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case IDENTIFIER:
      case AT_SEPARATOR:{
        modifiers = Modifiers();
        if (jj_2_67(2)) {
          member = ClassOrInterfaceDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EXCEPTION_KEYWORD:
          case LIST_KEYWORD:
          case MAP_KEYWORD:
          case TRANSIENT_KEYWORD:
          case VOID_KEYWORD:
          case ITERATOR_KEYWORD:
          case GROUP_KEYWORD:
          case RETURNING_KEYWORD:
          case SEARCH_KEYWORD:
          case STAT_KEYWORD:
          case CONVERTCURRENCY_KEYWORD:
          case LIMIT_KEYWORD:
          case SAVEPOINT_KEYWORD:
          case TOLABEL_KEYWORD:
          case FIRST_KEYWORD:
          case LAST_KEYWORD:
          case OFFSET_KEYWORD:
          case DATA_KEYWORD:
          case CATEGORY_KEYWORD:
          case NETWORK_KEYWORD:
          case SHARING_KEYWORD:
          case WITHOUT_OTHER:
          case SET_KEYWORD:
          case GET_KEYWORD:
          case AFTER_KEYWORD:
          case BEFORE_KEYWORD:
          case TODAY_KEYWORD:
          case YESTERDAY_KEYWORD:
          case TOMORROW_KEYWORD:
          case LAST_WEEK_KEYWORD:
          case THIS_WEEK_KEYWORD:
          case NEXT_WEEK_KEYWORD:
          case LAST_MONTH_KEYWORD:
          case THIS_MONTH_KEYWORD:
          case NEXT_MONTH_KEYWORD:
          case LAST_90_DAYS_KEYWORD:
          case NEXT_90_DAYS_KEYWORD:
          case THIS_QUARTER_KEYWORD:
          case LAST_QUARTER_KEYWORD:
          case NEXT_QUARTER_KEYWORD:
          case THIS_YEAR_KEYWORD:
          case LAST_YEAR_KEYWORD:
          case NEXT_YEAR_KEYWORD:
          case THIS_FISCAL_QUARTER_KEYWORD:
          case LAST_FISCAL_QUARTER_KEYWORD:
          case NEXT_FISCAL_QUARTER_KEYWORD:
          case THIS_FISCAL_YEAR_KEYWORD:
          case LAST_FISCAL_YEAR_KEYWORD:
          case NEXT_FISCAL_YEAR_KEYWORD:
          case LAST_N_DAYS_KEYWORD:
          case NEXT_N_DAYS_KEYWORD:
          case NEXT_N_WEEKS_KEYWORD:
          case LAST_N_WEEKS_KEYWORD:
          case NEXT_N_MONTHS_KEYWORD:
          case LAST_N_MONTHS_KEYWORD:
          case NEXT_N_QUARTERS_KEYWORD:
          case LAST_N_QUARTERS_KEYWORD:
          case NEXT_N_YEARS_KEYWORD:
          case LAST_N_YEARS_KEYWORD:
          case NEXT_N_FISCAL_QUARTERS_KEYWORD:
          case LAST_N_FISCAL_QUARTERS_KEYWORD:
          case NEXT_N_FISCAL_YEARS_KEYWORD:
          case LAST_N_FISCAL_YEARS_KEYWORD:
          case IDENTIFIER:{
            member = MethodDeclaration(modifiers);
{if ("" != null) return Collections.singletonList(member);}
            break;
            }
          default:
            jj_la1[191] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[192] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerInnerBlock() throws ParseException {List<Tree> members = new ArrayList<Tree>();
    List<? extends Tree> member;
    jj_consume_token(LBRACE_SEPARATOR);
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FINAL_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        ;
        break;
        }
      default:
        jj_la1[193] = jj_gen;
        break label_50;
      }
      member = TriggerInnerBlockStatement();
members.addAll(member);
    }
    jj_consume_token(RBRACE_SEPARATOR);
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerInnerBlockStatement() throws ParseException {List<VariableTree> member;
    List<? extends Tree> triggerMember;
    if (jj_2_70(2147483647)) {
      member = LocalVariableDeclaration();
      jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return member;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARRAY_KEYWORD:
      case BREAK_KEYWORD:
      case CONTINUE_KEYWORD:
      case DO_KEYWORD:
      case EXCEPTION_KEYWORD:
      case FALSE_KEYWORD:
      case FOR_KEYWORD:
      case IF_KEYWORD:
      case INT_KEYWORD:
      case LIST_KEYWORD:
      case MAP_KEYWORD:
      case NEW_KEYWORD:
      case NULL_KEYWORD:
      case PACKAGE_KEYWORD:
      case RETURN_KEYWORD:
      case SUPER_KEYWORD:
      case THIS_KEYWORD:
      case THROW_KEYWORD:
      case TRANSIENT_KEYWORD:
      case TRUE_KEYWORD:
      case TRY_KEYWORD:
      case VOID_KEYWORD:
      case WHILE_KEYWORD:
      case ITERATOR_KEYWORD:
      case ACTIVATE_KEYWORD:
      case ANY_KEYWORD:
      case AUTONOMOUS_KEYWORD:
      case BEGIN_KEYWORD:
      case BIGDECIMAL_KEYWORD:
      case BYTE_KEYWORD:
      case CASE_KEYWORD:
      case CAST_KEYWORD:
      case CHAR_KEYWORD:
      case COLLECT_KEYWORD:
      case CONST_KEYWORD:
      case _DEFAULT_KEYWORD:
      case END_KEYWORD:
      case EXIT_KEYWORD:
      case EXPORT_KEYWORD:
      case FLOAT_KEYWORD:
      case GOTO_KEYWORD:
      case GROUP_KEYWORD:
      case HINT_KEYWORD:
      case IMPORT_KEYWORD:
      case INNER_KEYWORD:
      case INTO_KEYWORD:
      case JOIN_KEYWORD:
      case LOOP_KEYWORD:
      case NUMBER_KEYWORD:
      case OF_KEYWORD:
      case OUTER_KEYWORD:
      case PARALLEL_KEYWORD:
      case RETRIEVE_KEYWORD:
      case RETURNING_KEYWORD:
      case SEARCH_KEYWORD:
      case SHORT_KEYWORD:
      case STAT_KEYWORD:
      case SWITCH_KEYWORD:
      case SYNCHRONIZED_KEYWORD:
      case THEN_KEYWORD:
      case TRANSACTION_KEYWORD:
      case WHEN_KEYWORD:
      case CONVERTCURRENCY_KEYWORD:
      case DELETE_KEYWORD:
      case INSERT_KEYWORD:
      case LIMIT_KEYWORD:
      case MERGE_KEYWORD:
      case ROLLBACK_KEYWORD:
      case SAVEPOINT_KEYWORD:
      case TOLABEL_KEYWORD:
      case TRIGGER_KEYWORD:
      case UNDELETE_KEYWORD:
      case UPDATE_KEYWORD:
      case UPSERT_KEYWORD:
      case FIRST_KEYWORD:
      case LAST_KEYWORD:
      case OFFSET_KEYWORD:
      case DATA_KEYWORD:
      case CATEGORY_KEYWORD:
      case NETWORK_KEYWORD:
      case SHARING_KEYWORD:
      case WITHOUT_OTHER:
      case WITH_KEYWORD:
      case SET_KEYWORD:
      case GET_KEYWORD:
      case AFTER_KEYWORD:
      case BEFORE_KEYWORD:
      case TODAY_KEYWORD:
      case YESTERDAY_KEYWORD:
      case TOMORROW_KEYWORD:
      case LAST_WEEK_KEYWORD:
      case THIS_WEEK_KEYWORD:
      case NEXT_WEEK_KEYWORD:
      case LAST_MONTH_KEYWORD:
      case THIS_MONTH_KEYWORD:
      case NEXT_MONTH_KEYWORD:
      case LAST_90_DAYS_KEYWORD:
      case NEXT_90_DAYS_KEYWORD:
      case THIS_QUARTER_KEYWORD:
      case LAST_QUARTER_KEYWORD:
      case NEXT_QUARTER_KEYWORD:
      case THIS_YEAR_KEYWORD:
      case LAST_YEAR_KEYWORD:
      case NEXT_YEAR_KEYWORD:
      case THIS_FISCAL_QUARTER_KEYWORD:
      case LAST_FISCAL_QUARTER_KEYWORD:
      case NEXT_FISCAL_QUARTER_KEYWORD:
      case THIS_FISCAL_YEAR_KEYWORD:
      case LAST_FISCAL_YEAR_KEYWORD:
      case NEXT_FISCAL_YEAR_KEYWORD:
      case LAST_N_DAYS_KEYWORD:
      case NEXT_N_DAYS_KEYWORD:
      case NEXT_N_WEEKS_KEYWORD:
      case LAST_N_WEEKS_KEYWORD:
      case NEXT_N_MONTHS_KEYWORD:
      case LAST_N_MONTHS_KEYWORD:
      case NEXT_N_QUARTERS_KEYWORD:
      case LAST_N_QUARTERS_KEYWORD:
      case NEXT_N_YEARS_KEYWORD:
      case LAST_N_YEARS_KEYWORD:
      case NEXT_N_FISCAL_QUARTERS_KEYWORD:
      case LAST_N_FISCAL_QUARTERS_KEYWORD:
      case NEXT_N_FISCAL_YEARS_KEYWORD:
      case LAST_N_FISCAL_YEARS_KEYWORD:
      case INTEGER_LITERAL_NUMBER:
      case FLOATING_POINT_LITERAL_NUMBER:
      case STRING_LITERAL_STRING:
      case IDENTIFIER:
      case LPAREN_SEPARATOR:
      case LBRACE_SEPARATOR:
      case LBRACKET_SEPARATOR:
      case SEMICOLON_SEPARATOR:
      case INCR_OPERATOR:
      case DECR_OPERATOR:{
        triggerMember = TriggerStatement();
{if ("" != null) return triggerMember;}
        break;
        }
      default:
        jj_la1[194] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<? extends Tree> TriggerStatement() throws ParseException {Tree member;
     List<? extends Tree> members;
    try {
      if (jj_2_71(2)) {
        members = TriggerInnerBlock();
{if ("" != null) return members;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON_SEPARATOR:{
          member = EmptyStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case ARRAY_KEYWORD:
        case EXCEPTION_KEYWORD:
        case FALSE_KEYWORD:
        case INT_KEYWORD:
        case LIST_KEYWORD:
        case MAP_KEYWORD:
        case NEW_KEYWORD:
        case NULL_KEYWORD:
        case PACKAGE_KEYWORD:
        case SUPER_KEYWORD:
        case THIS_KEYWORD:
        case TRANSIENT_KEYWORD:
        case TRUE_KEYWORD:
        case VOID_KEYWORD:
        case ITERATOR_KEYWORD:
        case ACTIVATE_KEYWORD:
        case ANY_KEYWORD:
        case AUTONOMOUS_KEYWORD:
        case BEGIN_KEYWORD:
        case BIGDECIMAL_KEYWORD:
        case BYTE_KEYWORD:
        case CASE_KEYWORD:
        case CAST_KEYWORD:
        case CHAR_KEYWORD:
        case COLLECT_KEYWORD:
        case CONST_KEYWORD:
        case _DEFAULT_KEYWORD:
        case END_KEYWORD:
        case EXIT_KEYWORD:
        case EXPORT_KEYWORD:
        case FLOAT_KEYWORD:
        case GOTO_KEYWORD:
        case GROUP_KEYWORD:
        case HINT_KEYWORD:
        case IMPORT_KEYWORD:
        case INNER_KEYWORD:
        case INTO_KEYWORD:
        case JOIN_KEYWORD:
        case LOOP_KEYWORD:
        case NUMBER_KEYWORD:
        case OF_KEYWORD:
        case OUTER_KEYWORD:
        case PARALLEL_KEYWORD:
        case RETRIEVE_KEYWORD:
        case RETURNING_KEYWORD:
        case SEARCH_KEYWORD:
        case SHORT_KEYWORD:
        case STAT_KEYWORD:
        case SWITCH_KEYWORD:
        case SYNCHRONIZED_KEYWORD:
        case THEN_KEYWORD:
        case TRANSACTION_KEYWORD:
        case WHEN_KEYWORD:
        case CONVERTCURRENCY_KEYWORD:
        case DELETE_KEYWORD:
        case INSERT_KEYWORD:
        case LIMIT_KEYWORD:
        case MERGE_KEYWORD:
        case ROLLBACK_KEYWORD:
        case SAVEPOINT_KEYWORD:
        case TOLABEL_KEYWORD:
        case TRIGGER_KEYWORD:
        case UNDELETE_KEYWORD:
        case UPDATE_KEYWORD:
        case UPSERT_KEYWORD:
        case FIRST_KEYWORD:
        case LAST_KEYWORD:
        case OFFSET_KEYWORD:
        case DATA_KEYWORD:
        case CATEGORY_KEYWORD:
        case NETWORK_KEYWORD:
        case SHARING_KEYWORD:
        case WITHOUT_OTHER:
        case WITH_KEYWORD:
        case SET_KEYWORD:
        case GET_KEYWORD:
        case AFTER_KEYWORD:
        case BEFORE_KEYWORD:
        case TODAY_KEYWORD:
        case YESTERDAY_KEYWORD:
        case TOMORROW_KEYWORD:
        case LAST_WEEK_KEYWORD:
        case THIS_WEEK_KEYWORD:
        case NEXT_WEEK_KEYWORD:
        case LAST_MONTH_KEYWORD:
        case THIS_MONTH_KEYWORD:
        case NEXT_MONTH_KEYWORD:
        case LAST_90_DAYS_KEYWORD:
        case NEXT_90_DAYS_KEYWORD:
        case THIS_QUARTER_KEYWORD:
        case LAST_QUARTER_KEYWORD:
        case NEXT_QUARTER_KEYWORD:
        case THIS_YEAR_KEYWORD:
        case LAST_YEAR_KEYWORD:
        case NEXT_YEAR_KEYWORD:
        case THIS_FISCAL_QUARTER_KEYWORD:
        case LAST_FISCAL_QUARTER_KEYWORD:
        case NEXT_FISCAL_QUARTER_KEYWORD:
        case THIS_FISCAL_YEAR_KEYWORD:
        case LAST_FISCAL_YEAR_KEYWORD:
        case NEXT_FISCAL_YEAR_KEYWORD:
        case LAST_N_DAYS_KEYWORD:
        case NEXT_N_DAYS_KEYWORD:
        case NEXT_N_WEEKS_KEYWORD:
        case LAST_N_WEEKS_KEYWORD:
        case NEXT_N_MONTHS_KEYWORD:
        case LAST_N_MONTHS_KEYWORD:
        case NEXT_N_QUARTERS_KEYWORD:
        case LAST_N_QUARTERS_KEYWORD:
        case NEXT_N_YEARS_KEYWORD:
        case LAST_N_YEARS_KEYWORD:
        case NEXT_N_FISCAL_QUARTERS_KEYWORD:
        case LAST_N_FISCAL_QUARTERS_KEYWORD:
        case NEXT_N_FISCAL_YEARS_KEYWORD:
        case LAST_N_FISCAL_YEARS_KEYWORD:
        case INTEGER_LITERAL_NUMBER:
        case FLOATING_POINT_LITERAL_NUMBER:
        case STRING_LITERAL_STRING:
        case IDENTIFIER:
        case LPAREN_SEPARATOR:
        case LBRACKET_SEPARATOR:
        case INCR_OPERATOR:
        case DECR_OPERATOR:{
          member = StatementExpression();
          jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case IF_KEYWORD:{
          member = IfStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case WHILE_KEYWORD:{
          member = WhileStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case DO_KEYWORD:{
          member = DoStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case FOR_KEYWORD:{
          member = ForStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case BREAK_KEYWORD:{
          member = BreakStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case CONTINUE_KEYWORD:{
          member = ContinueStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case RETURN_KEYWORD:{
          member = TriggerReturnStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case THROW_KEYWORD:{
          member = ThrowStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        case TRY_KEYWORD:{
          member = TryStatement();
{if ("" != null) return Collections.singletonList(member);}
          break;
          }
        default:
          jj_la1[195] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException ex) {
contextErrorRecover(new IllegalStatementException(ex));
        {if ("" != null) return Collections.singletonList(factory.createErroneousExpression());}
    }
    throw new Error("Missing return statement in function");
  }

  final public StatementTree TriggerReturnStatement() throws ParseException {
    jj_consume_token(RETURN_KEYWORD);
    jj_consume_token(SEMICOLON_SEPARATOR);
{if ("" != null) return factory.createReturn(null);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionTree MethodIdentifier() throws ParseException {Token identifierToken = null;
    try {
      if (jj_2_72(2147483647)) {
        identifierToken = AllowedKeywordsAsIdentifierForMethods();
      } else if (jj_2_73(2147483647)) {
        identifierToken = SpecialKeywordsAsIdentifier();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
{if ("" != null) return factory.createIdentifier(identifierToken);}
    } catch (ParseException ex) {
contextErrorRecoverToNextToken(new ContextParseException(ex));
        {if ("" != null) return factory.createErroneousExpression();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Token AllowedKeywordsAsIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case TRANSIENT_KEYWORD:{
      jj_consume_token(TRANSIENT_KEYWORD);
      break;
      }
    case RETURNING_KEYWORD:{
      jj_consume_token(RETURNING_KEYWORD);
      break;
      }
    case SEARCH_KEYWORD:{
      jj_consume_token(SEARCH_KEYWORD);
      break;
      }
    case STAT_KEYWORD:{
      jj_consume_token(STAT_KEYWORD);
      break;
      }
    case CONVERTCURRENCY_KEYWORD:{
      jj_consume_token(CONVERTCURRENCY_KEYWORD);
      break;
      }
    case SAVEPOINT_KEYWORD:{
      jj_consume_token(SAVEPOINT_KEYWORD);
      break;
      }
    case TOLABEL_KEYWORD:{
      jj_consume_token(TOLABEL_KEYWORD);
      break;
      }
    case SHARING_KEYWORD:{
      jj_consume_token(SHARING_KEYWORD);
      break;
      }
    case GET_KEYWORD:{
      jj_consume_token(GET_KEYWORD);
      break;
      }
    case AFTER_KEYWORD:{
      jj_consume_token(AFTER_KEYWORD);
      break;
      }
    case BEFORE_KEYWORD:{
      jj_consume_token(BEFORE_KEYWORD);
      break;
      }
    case FIRST_KEYWORD:{
      jj_consume_token(FIRST_KEYWORD);
      break;
      }
    case LAST_KEYWORD:{
      jj_consume_token(LAST_KEYWORD);
      break;
      }
    case CATEGORY_KEYWORD:{
      jj_consume_token(CATEGORY_KEYWORD);
      break;
      }
    case NETWORK_KEYWORD:{
      jj_consume_token(NETWORK_KEYWORD);
      break;
      }
    case ITERATOR_KEYWORD:{
      jj_consume_token(ITERATOR_KEYWORD);
      break;
      }
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:{
      SOQLDateLiteral();
      break;
      }
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:{
      SOQLNDateLiteral();
      break;
      }
    default:
      jj_la1[196] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token AllowedKeywordsAsIdentifierForMethods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      jj_consume_token(IDENTIFIER);
      break;
      }
    case ARRAY_KEYWORD:{
      jj_consume_token(ARRAY_KEYWORD);
      break;
      }
    case EXCEPTION_KEYWORD:{
      jj_consume_token(EXCEPTION_KEYWORD);
      break;
      }
    case INT_KEYWORD:{
      jj_consume_token(INT_KEYWORD);
      break;
      }
    case PACKAGE_KEYWORD:{
      jj_consume_token(PACKAGE_KEYWORD);
      break;
      }
    case TRANSIENT_KEYWORD:{
      jj_consume_token(TRANSIENT_KEYWORD);
      break;
      }
    case ACTIVATE_KEYWORD:{
      jj_consume_token(ACTIVATE_KEYWORD);
      break;
      }
    case ANY_KEYWORD:{
      jj_consume_token(ANY_KEYWORD);
      break;
      }
    case AUTONOMOUS_KEYWORD:{
      jj_consume_token(AUTONOMOUS_KEYWORD);
      break;
      }
    case BEGIN_KEYWORD:{
      jj_consume_token(BEGIN_KEYWORD);
      break;
      }
    case BIGDECIMAL_KEYWORD:{
      jj_consume_token(BIGDECIMAL_KEYWORD);
      break;
      }
    case BYTE_KEYWORD:{
      jj_consume_token(BYTE_KEYWORD);
      break;
      }
    case CASE_KEYWORD:{
      jj_consume_token(CASE_KEYWORD);
      break;
      }
    case CAST_KEYWORD:{
      jj_consume_token(CAST_KEYWORD);
      break;
      }
    case CHAR_KEYWORD:{
      jj_consume_token(CHAR_KEYWORD);
      break;
      }
    case COLLECT_KEYWORD:{
      jj_consume_token(COLLECT_KEYWORD);
      break;
      }
    case CONST_KEYWORD:{
      jj_consume_token(CONST_KEYWORD);
      break;
      }
    case _DEFAULT_KEYWORD:{
      jj_consume_token(_DEFAULT_KEYWORD);
      break;
      }
    case END_KEYWORD:{
      jj_consume_token(END_KEYWORD);
      break;
      }
    case EXIT_KEYWORD:{
      jj_consume_token(EXIT_KEYWORD);
      break;
      }
    case EXPORT_KEYWORD:{
      jj_consume_token(EXPORT_KEYWORD);
      break;
      }
    case FLOAT_KEYWORD:{
      jj_consume_token(FLOAT_KEYWORD);
      break;
      }
    case GOTO_KEYWORD:{
      jj_consume_token(GOTO_KEYWORD);
      break;
      }
    case GROUP_KEYWORD:{
      jj_consume_token(GROUP_KEYWORD);
      break;
      }
    case HINT_KEYWORD:{
      jj_consume_token(HINT_KEYWORD);
      break;
      }
    case IMPORT_KEYWORD:{
      jj_consume_token(IMPORT_KEYWORD);
      break;
      }
    case INNER_KEYWORD:{
      jj_consume_token(INNER_KEYWORD);
      break;
      }
    case INTO_KEYWORD:{
      jj_consume_token(INTO_KEYWORD);
      break;
      }
    case JOIN_KEYWORD:{
      jj_consume_token(JOIN_KEYWORD);
      break;
      }
    case LOOP_KEYWORD:{
      jj_consume_token(LOOP_KEYWORD);
      break;
      }
    case NUMBER_KEYWORD:{
      jj_consume_token(NUMBER_KEYWORD);
      break;
      }
    case OF_KEYWORD:{
      jj_consume_token(OF_KEYWORD);
      break;
      }
    case OUTER_KEYWORD:{
      jj_consume_token(OUTER_KEYWORD);
      break;
      }
    case PARALLEL_KEYWORD:{
      jj_consume_token(PARALLEL_KEYWORD);
      break;
      }
    case RETRIEVE_KEYWORD:{
      jj_consume_token(RETRIEVE_KEYWORD);
      break;
      }
    case RETURNING_KEYWORD:{
      jj_consume_token(RETURNING_KEYWORD);
      break;
      }
    case SEARCH_KEYWORD:{
      jj_consume_token(SEARCH_KEYWORD);
      break;
      }
    case SHORT_KEYWORD:{
      jj_consume_token(SHORT_KEYWORD);
      break;
      }
    case STAT_KEYWORD:{
      jj_consume_token(STAT_KEYWORD);
      break;
      }
    case SWITCH_KEYWORD:{
      jj_consume_token(SWITCH_KEYWORD);
      break;
      }
    case SYNCHRONIZED_KEYWORD:{
      jj_consume_token(SYNCHRONIZED_KEYWORD);
      break;
      }
    case THEN_KEYWORD:{
      jj_consume_token(THEN_KEYWORD);
      break;
      }
    case TRANSACTION_KEYWORD:{
      jj_consume_token(TRANSACTION_KEYWORD);
      break;
      }
    case WHEN_KEYWORD:{
      jj_consume_token(WHEN_KEYWORD);
      break;
      }
    case CONVERTCURRENCY_KEYWORD:{
      jj_consume_token(CONVERTCURRENCY_KEYWORD);
      break;
      }
    case ROLLBACK_KEYWORD:{
      jj_consume_token(ROLLBACK_KEYWORD);
      break;
      }
    case SAVEPOINT_KEYWORD:{
      jj_consume_token(SAVEPOINT_KEYWORD);
      break;
      }
    case TOLABEL_KEYWORD:{
      jj_consume_token(TOLABEL_KEYWORD);
      break;
      }
    case SHARING_KEYWORD:{
      jj_consume_token(SHARING_KEYWORD);
      break;
      }
    case WITHOUT_OTHER:{
      jj_consume_token(WITHOUT_OTHER);
      break;
      }
    case WITH_KEYWORD:{
      jj_consume_token(WITH_KEYWORD);
      break;
      }
    case SET_KEYWORD:{
      jj_consume_token(SET_KEYWORD);
      break;
      }
    case GET_KEYWORD:{
      jj_consume_token(GET_KEYWORD);
      break;
      }
    case AFTER_KEYWORD:{
      jj_consume_token(AFTER_KEYWORD);
      break;
      }
    case TRIGGER_KEYWORD:{
      jj_consume_token(TRIGGER_KEYWORD);
      break;
      }
    case FIRST_KEYWORD:{
      jj_consume_token(FIRST_KEYWORD);
      break;
      }
    case LAST_KEYWORD:{
      jj_consume_token(LAST_KEYWORD);
      break;
      }
    case CATEGORY_KEYWORD:{
      jj_consume_token(CATEGORY_KEYWORD);
      break;
      }
    case NETWORK_KEYWORD:{
      jj_consume_token(NETWORK_KEYWORD);
      break;
      }
    case DELETE_KEYWORD:{
      jj_consume_token(DELETE_KEYWORD);
      break;
      }
    case INSERT_KEYWORD:{
      jj_consume_token(INSERT_KEYWORD);
      break;
      }
    case MERGE_KEYWORD:{
      jj_consume_token(MERGE_KEYWORD);
      break;
      }
    case UNDELETE_KEYWORD:{
      jj_consume_token(UNDELETE_KEYWORD);
      break;
      }
    case UPDATE_KEYWORD:{
      jj_consume_token(UPDATE_KEYWORD);
      break;
      }
    case UPSERT_KEYWORD:{
      jj_consume_token(UPSERT_KEYWORD);
      break;
      }
    case ITERATOR_KEYWORD:{
      jj_consume_token(ITERATOR_KEYWORD);
      break;
      }
    case TODAY_KEYWORD:
    case YESTERDAY_KEYWORD:
    case TOMORROW_KEYWORD:
    case LAST_WEEK_KEYWORD:
    case THIS_WEEK_KEYWORD:
    case NEXT_WEEK_KEYWORD:
    case LAST_MONTH_KEYWORD:
    case THIS_MONTH_KEYWORD:
    case NEXT_MONTH_KEYWORD:
    case LAST_90_DAYS_KEYWORD:
    case NEXT_90_DAYS_KEYWORD:
    case THIS_QUARTER_KEYWORD:
    case LAST_QUARTER_KEYWORD:
    case NEXT_QUARTER_KEYWORD:
    case THIS_YEAR_KEYWORD:
    case LAST_YEAR_KEYWORD:
    case NEXT_YEAR_KEYWORD:
    case THIS_FISCAL_QUARTER_KEYWORD:
    case LAST_FISCAL_QUARTER_KEYWORD:
    case NEXT_FISCAL_QUARTER_KEYWORD:
    case THIS_FISCAL_YEAR_KEYWORD:
    case LAST_FISCAL_YEAR_KEYWORD:
    case NEXT_FISCAL_YEAR_KEYWORD:{
      SOQLDateLiteral();
      break;
      }
    case LAST_N_DAYS_KEYWORD:
    case NEXT_N_DAYS_KEYWORD:
    case NEXT_N_WEEKS_KEYWORD:
    case LAST_N_WEEKS_KEYWORD:
    case NEXT_N_MONTHS_KEYWORD:
    case LAST_N_MONTHS_KEYWORD:
    case NEXT_N_QUARTERS_KEYWORD:
    case LAST_N_QUARTERS_KEYWORD:
    case NEXT_N_YEARS_KEYWORD:
    case LAST_N_YEARS_KEYWORD:
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:
    case LAST_N_FISCAL_QUARTERS_KEYWORD:
    case NEXT_N_FISCAL_YEARS_KEYWORD:
    case LAST_N_FISCAL_YEARS_KEYWORD:{
      SOQLNDateLiteral();
      break;
      }
    default:
      jj_la1[197] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token SOQLDateLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TODAY_KEYWORD:{
      jj_consume_token(TODAY_KEYWORD);
      break;
      }
    case YESTERDAY_KEYWORD:{
      jj_consume_token(YESTERDAY_KEYWORD);
      break;
      }
    case TOMORROW_KEYWORD:{
      jj_consume_token(TOMORROW_KEYWORD);
      break;
      }
    case LAST_WEEK_KEYWORD:{
      jj_consume_token(LAST_WEEK_KEYWORD);
      break;
      }
    case THIS_WEEK_KEYWORD:{
      jj_consume_token(THIS_WEEK_KEYWORD);
      break;
      }
    case NEXT_WEEK_KEYWORD:{
      jj_consume_token(NEXT_WEEK_KEYWORD);
      break;
      }
    case LAST_MONTH_KEYWORD:{
      jj_consume_token(LAST_MONTH_KEYWORD);
      break;
      }
    case THIS_MONTH_KEYWORD:{
      jj_consume_token(THIS_MONTH_KEYWORD);
      break;
      }
    case NEXT_MONTH_KEYWORD:{
      jj_consume_token(NEXT_MONTH_KEYWORD);
      break;
      }
    case LAST_90_DAYS_KEYWORD:{
      jj_consume_token(LAST_90_DAYS_KEYWORD);
      break;
      }
    case NEXT_90_DAYS_KEYWORD:{
      jj_consume_token(NEXT_90_DAYS_KEYWORD);
      break;
      }
    case THIS_QUARTER_KEYWORD:{
      jj_consume_token(THIS_QUARTER_KEYWORD);
      break;
      }
    case LAST_QUARTER_KEYWORD:{
      jj_consume_token(LAST_QUARTER_KEYWORD);
      break;
      }
    case NEXT_QUARTER_KEYWORD:{
      jj_consume_token(NEXT_QUARTER_KEYWORD);
      break;
      }
    case THIS_YEAR_KEYWORD:{
      jj_consume_token(THIS_YEAR_KEYWORD);
      break;
      }
    case LAST_YEAR_KEYWORD:{
      jj_consume_token(LAST_YEAR_KEYWORD);
      break;
      }
    case NEXT_YEAR_KEYWORD:{
      jj_consume_token(NEXT_YEAR_KEYWORD);
      break;
      }
    case THIS_FISCAL_QUARTER_KEYWORD:{
      jj_consume_token(THIS_FISCAL_QUARTER_KEYWORD);
      break;
      }
    case LAST_FISCAL_QUARTER_KEYWORD:{
      jj_consume_token(LAST_FISCAL_QUARTER_KEYWORD);
      break;
      }
    case NEXT_FISCAL_QUARTER_KEYWORD:{
      jj_consume_token(NEXT_FISCAL_QUARTER_KEYWORD);
      break;
      }
    case THIS_FISCAL_YEAR_KEYWORD:{
      jj_consume_token(THIS_FISCAL_YEAR_KEYWORD);
      break;
      }
    case LAST_FISCAL_YEAR_KEYWORD:{
      jj_consume_token(LAST_FISCAL_YEAR_KEYWORD);
      break;
      }
    case NEXT_FISCAL_YEAR_KEYWORD:{
      jj_consume_token(NEXT_FISCAL_YEAR_KEYWORD);
      break;
      }
    default:
      jj_la1[198] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token SOQLNDateLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LAST_N_DAYS_KEYWORD:{
      jj_consume_token(LAST_N_DAYS_KEYWORD);
      break;
      }
    case NEXT_N_DAYS_KEYWORD:{
      jj_consume_token(NEXT_N_DAYS_KEYWORD);
      break;
      }
    case NEXT_N_WEEKS_KEYWORD:{
      jj_consume_token(NEXT_N_WEEKS_KEYWORD);
      break;
      }
    case LAST_N_WEEKS_KEYWORD:{
      jj_consume_token(LAST_N_WEEKS_KEYWORD);
      break;
      }
    case NEXT_N_MONTHS_KEYWORD:{
      jj_consume_token(NEXT_N_MONTHS_KEYWORD);
      break;
      }
    case LAST_N_MONTHS_KEYWORD:{
      jj_consume_token(LAST_N_MONTHS_KEYWORD);
      break;
      }
    case NEXT_N_QUARTERS_KEYWORD:{
      jj_consume_token(NEXT_N_QUARTERS_KEYWORD);
      break;
      }
    case LAST_N_QUARTERS_KEYWORD:{
      jj_consume_token(LAST_N_QUARTERS_KEYWORD);
      break;
      }
    case NEXT_N_YEARS_KEYWORD:{
      jj_consume_token(NEXT_N_YEARS_KEYWORD);
      break;
      }
    case LAST_N_YEARS_KEYWORD:{
      jj_consume_token(LAST_N_YEARS_KEYWORD);
      break;
      }
    case NEXT_N_FISCAL_QUARTERS_KEYWORD:{
      jj_consume_token(NEXT_N_FISCAL_QUARTERS_KEYWORD);
      break;
      }
    case LAST_N_FISCAL_QUARTERS_KEYWORD:{
      jj_consume_token(LAST_N_FISCAL_QUARTERS_KEYWORD);
      break;
      }
    case NEXT_N_FISCAL_YEARS_KEYWORD:{
      jj_consume_token(NEXT_N_FISCAL_YEARS_KEYWORD);
      break;
      }
    case LAST_N_FISCAL_YEARS_KEYWORD:{
      jj_consume_token(LAST_N_FISCAL_YEARS_KEYWORD);
      break;
      }
    default:
      jj_la1[199] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  final public Token SpecialKeywordsAsIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITHOUT_OTHER:{
      jj_consume_token(WITHOUT_OTHER);
      break;
      }
    case OFFSET_KEYWORD:{
      jj_consume_token(OFFSET_KEYWORD);
      break;
      }
    case DATA_KEYWORD:{
      jj_consume_token(DATA_KEYWORD);
      break;
      }
    case GROUP_KEYWORD:{
      jj_consume_token(GROUP_KEYWORD);
      break;
      }
    case LIMIT_KEYWORD:{
      jj_consume_token(LIMIT_KEYWORD);
      break;
      }
    default:
      jj_la1[200] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_3_58()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) return true;
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_437()
 {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_416()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(213)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_415()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_scan_token(TARGET_LENGTH_KEYWORD)) return true;
    if (jj_scan_token(ASSIGN_OPERATOR)) return true;
    if (jj_scan_token(INTEGER_LITERAL_NUMBER)) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(WITH_KEYWORD)) return true;
    if (jj_scan_token(SNIPPET_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_467()
 {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_414()
 {
    if (jj_scan_token(ASSIGN_OPERATOR)) return true;
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    return false;
  }

  private boolean jj_3R_463()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_462()
 {
    if (jj_3R_465()) return true;
    return false;
  }

  private boolean jj_3R_461()
 {
    if (jj_3R_209()) return true;
    if (jj_scan_token(COLON_OPERATOR)) return true;
    if (jj_scan_token(INTEGER_LITERAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    return false;
  }

  private boolean jj_3R_460()
 {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_459()
 {
    if (jj_scan_token(DATE_LITERAL_EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3R_454()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_459()) {
    jj_scanpos = xsp;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_3R_461()) {
    jj_scanpos = xsp;
    if (jj_3R_462()) {
    jj_scanpos = xsp;
    if (jj_3R_463()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_456()
 {
    if (jj_3R_465()) return true;
    return false;
  }

  private boolean jj_3R_413()
 {
    if (jj_scan_token(IN_KEYWORD)) return true;
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_469()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(WITH_KEYWORD)) return true;
    if (jj_scan_token(NETWORK_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) return true;
    }
    return false;
  }

  private boolean jj_3R_436()
 {
    if (jj_scan_token(BELOW_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_468()
 {
    if (jj_3R_188()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_469()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_466()
 {
    if (jj_3R_468()) return true;
    return false;
  }

  private boolean jj_3R_435()
 {
    if (jj_scan_token(ABOVE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_434()
 {
    if (jj_scan_token(ABOVE_OR_BELOW_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_455()
 {
    if (jj_3R_464()) return true;
    return false;
  }

  private boolean jj_3R_465()
 {
    if (jj_scan_token(COLON_OPERATOR)) return true;
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_433()
 {
    if (jj_scan_token(AT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_433()) {
    jj_scanpos = xsp;
    if (jj_3R_434()) {
    jj_scanpos = xsp;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) return true;
    }
    }
    }
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_464()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_466()) {
    jj_scanpos = xsp;
    if (jj_3R_467()) return true;
    }
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_452()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) return true;
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(120)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) {
    jj_scanpos = xsp;
    if (jj_3R_456()) return true;
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(WITH_KEYWORD)) return true;
    if (jj_scan_token(DATA_KEYWORD)) return true;
    if (jj_scan_token(CATEGORY_KEYWORD)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_449()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_451()) {
    jj_scanpos = xsp;
    if (jj_3R_452()) return true;
    }
    return false;
  }

  private boolean jj_3R_451()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) {
    jj_scanpos = xsp;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(225)) {
    jj_scanpos = xsp;
    if (jj_scan_token(226)) {
    jj_scanpos = xsp;
    if (jj_scan_token(227)) {
    jj_scanpos = xsp;
    if (jj_scan_token(252)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_454()) return true;
    return false;
  }

  private boolean jj_3R_447()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_449()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(WITH_KEYWORD)) return true;
    if (jj_scan_token(DIVISION_KEYWORD)) return true;
    if (jj_scan_token(ASSIGN_OPERATOR)) return true;
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    return false;
  }

  private boolean jj_3R_442()
 {
    if (jj_3R_447()) return true;
    return false;
  }

  private boolean jj_3R_412()
 {
    if (jj_scan_token(VIEWSTAT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_441()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_419()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_411()
 {
    if (jj_scan_token(TRACKING_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_420()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_3R_442()) return true;
    }
    return false;
  }

  private boolean jj_3R_391()
 {
    if (jj_scan_token(UPDATE_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_411()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) return true;
    }
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_446()
 {
    if (jj_scan_token(ANDLITERAL_KEYWORD)) return true;
    if (jj_3R_420()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(TOLABEL_KEYWORD)) return true;
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_439()
 {
    if (jj_3R_420()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_446()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_440()
 {
    if (jj_scan_token(OR_KEYWORD)) return true;
    if (jj_3R_439()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_419()
 {
    if (jj_3R_439()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_440()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_458()
 {
    if (jj_scan_token(ORDER_KEYWORD)) return true;
    if (jj_scan_token(BY_KEYWORD)) return true;
    if (jj_3R_388()) return true;
    return false;
  }

  private boolean jj_3R_457()
 {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_450()
 {
    if (jj_3R_453()) return true;
    return false;
  }

  private boolean jj_3R_399()
 {
    if (jj_3R_419()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_444()
 {
    if (jj_3R_448()) return true;
    return false;
  }

  private boolean jj_3R_453()
 {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_458()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_385()
 {
    if (jj_scan_token(WHERE_KEYWORD)) return true;
    if (jj_3R_399()) return true;
    return false;
  }

  private boolean jj_3R_448()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    Token xsp;
    if (jj_3R_450()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_450()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_396()
 {
    if (jj_scan_token(USING_KEYWORD)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_444()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_395()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_398()
 {
    if (jj_3R_396()) return true;
    return false;
  }

  private boolean jj_3R_397()
 {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_410()
 {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_384()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_383()
 {
    if (jj_3R_396()) return true;
    return false;
  }

  private boolean jj_3R_382()
 {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_390()
 {
    if (jj_scan_token(RETURNING_KEYWORD)) return true;
    if (jj_3R_410()) return true;
    return false;
  }

  private boolean jj_3R_367()
 {
    if (jj_scan_token(FROM_KEYWORD)) return true;
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_383()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_432()
 {
    if (jj_scan_token(SIDEBAR_FIELDS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_431()
 {
    if (jj_scan_token(PHONE_FIELDS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_430()
 {
    if (jj_scan_token(NAME_FIELDS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_429()
 {
    if (jj_scan_token(EMAIL_FIELDS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_427()
 {
    if (jj_scan_token(NULLS_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    }
    return false;
  }

  private boolean jj_3R_409()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) {
    jj_scanpos = xsp;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_428()
 {
    if (jj_scan_token(ALL_FIELDS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_99()) return true;
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_389()
 {
    if (jj_scan_token(IN_KEYWORD)) return true;
    if (jj_3R_409()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_317()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_377()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_337()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_317()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_336()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_335()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_331()
 {
    if (jj_scan_token(SELECT_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_426()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_376()
 {
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_375()
 {
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_374()
 {
    if (jj_3R_389()) return true;
    return false;
  }

  private boolean jj_3R_407()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_426()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_318()
 {
    if (jj_scan_token(FIND_KEYWORD)) return true;
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_408()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_407()) return true;
    return false;
  }

  private boolean jj_3R_381()
 {
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    if (jj_3R_394()) return true;
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_388()
 {
    if (jj_3R_407()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_408()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_380()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_379()
 {
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    if (jj_3R_393()) return true;
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_330()
 {
    if (jj_scan_token(MAP_KEYWORD)) return true;
    if (jj_3R_334()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) {
    jj_scanpos = xsp;
    if (jj_3R_381()) return true;
    }
    return false;
  }

  private boolean jj_3R_378()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_425()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_424()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_423()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_329()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    if (jj_3R_334()) return true;
    xsp = jj_scanpos;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) return true;
    }
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_406()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_425()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_316()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_138()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_405()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_404()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_403()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_304()
 {
    if (jj_scan_token(NEW_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    return false;
  }

  private boolean jj_3R_387()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_406()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_271()
 {
    if (jj_scan_token(THIS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(OFFSET_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(222)) jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_247()
 {
    if (jj_scan_token(THIS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_443()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(LIMIT_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(222)) jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_422()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_443()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_421()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(DATA_KEYWORD)) return true;
    if (jj_scan_token(CATEGORY_KEYWORD)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_401()
 {
    if (jj_3R_420()) return true;
    return false;
  }

  private boolean jj_3R_402()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_421()) {
    jj_scanpos = xsp;
    if (jj_3R_422()) return true;
    }
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_scan_token(NULL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_400()
 {
    if (jj_scan_token(DATA_KEYWORD)) return true;
    if (jj_scan_token(CATEGORY_KEYWORD)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_scan_token(FALSE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_scan_token(TRUE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_223()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    return false;
  }

  private boolean jj_3R_326()
 {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) {
    jj_scanpos = xsp;
    if (jj_scan_token(184)) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_386()
 {
    if (jj_scan_token(WITH_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_402()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_scan_token(STRING_LITERAL_STRING)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_373()
 {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(INTEGER_LITERAL_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_372()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_371()
 {
    if (jj_scan_token(ORDER_KEYWORD)) return true;
    if (jj_scan_token(BY_KEYWORD)) return true;
    if (jj_3R_388()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_325()
 {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_370()
 {
    if (jj_scan_token(GROUP_KEYWORD)) return true;
    if (jj_scan_token(BY_KEYWORD)) return true;
    if (jj_3R_387()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_369()
 {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_208()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) {
    jj_scanpos = xsp;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_368()
 {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_302()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_317()
 {
    if (jj_3R_331()) return true;
    if (jj_3R_367()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_301()
 {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_300()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_315()
 {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(THIS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_98()) return true;
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_scan_token(CLASS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_299()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    }
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_298()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_297()
 {
    if (jj_3R_98()) return true;
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_scan_token(CLASS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_324()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_323()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_283()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_310()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) return true;
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_272()
 {
    if (jj_3R_283()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(201)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_306()
 {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(201)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_305()
 {
    if (jj_3R_317()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_289()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_288()
 {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_287()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_303()
 {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_98()) return true;
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_scan_token(CLASS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_286()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_303()) return true;
    }
    }
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_285()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    if (jj_scan_token(RETURN_KEYWORD)) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_284()
 {
    if (jj_3R_98()) return true;
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_scan_token(CLASS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_273()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_251()
 {
    if (jj_3R_273()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_3R_211()) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_366()
 {
    if (jj_scan_token(DECR_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_364()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) return true;
    }
    return false;
  }

  private boolean jj_3R_365()
 {
    if (jj_scan_token(INCR_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_363()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_362()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_360()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) return true;
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  private boolean jj_3R_243()
 {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(219)) {
    jj_scanpos = xsp;
    if (jj_scan_token(206)) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_222()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(230)) {
    jj_scanpos = xsp;
    if (jj_scan_token(231)) return true;
    }
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_361()
 {
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_359()
 {
    if (jj_3R_272()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_358()
 {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_356()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_357()
 {
    if (jj_scan_token(BANG_OPERATOR)) return true;
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_250()
 {
    if (jj_scan_token(DECR_OPERATOR)) return true;
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(SHARING_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_249()
 {
    if (jj_scan_token(INCR_OPERATOR)) return true;
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_351()
 {
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_350()
 {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_355()
 {
    if (jj_scan_token(MINUS_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_349()
 {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_354()
 {
    if (jj_scan_token(PLUS_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_345()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_348()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) return true;
    }
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(INTERFACE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_204()) return true;
    if (jj_3R_205()) return true;
    if (jj_scan_token(CLASS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_353()
 {
    if (jj_scan_token(SLASH_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_352()
 {
    if (jj_scan_token(STAR_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  private boolean jj_3R_346()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_scan_token(239)) return true;
    }
    }
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3R_343()
 {
    if (jj_3R_345()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(232)) {
    jj_scanpos = xsp;
    if (jj_scan_token(233)) return true;
    }
    return false;
  }

  private boolean jj_3R_347()
 {
    if (jj_scan_token(PLUS_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_344()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_scan_token(233)) return true;
    }
    if (jj_3R_343()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_338()
 {
    if (jj_3R_343()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(TESTMETHOD_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(OVERRIDE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(VIRTUAL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(TRANSIENT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(ABSTRACT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(FINAL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(GLOBAL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(PRIVATE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(PROTECTED_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(STATIC_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(PUBLIC_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(LSHIFT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_332()
 {
    if (jj_3R_338()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_342()
 {
    if (jj_scan_token(GE_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_341()
 {
    if (jj_scan_token(LE_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_340()
 {
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_339()
 {
    if (jj_scan_token(LT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_333()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) return true;
    }
    }
    }
    if (jj_3R_332()) return true;
    return false;
  }

  private boolean jj_3R_327()
 {
    if (jj_3R_332()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(AT_SEPARATOR)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    return false;
  }

  private boolean jj_3R_328()
 {
    if (jj_scan_token(INSTANCEOF_KEYWORD)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_313()
 {
    if (jj_3R_327()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_328()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_164()
 {
    return false;
  }

  private boolean jj_3R_92()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT_OPERATOR &&
                  (getToken(1)).realKind == RSIGNEDSHIFT_OPERATOR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_163()) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_314()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(224)) {
    jj_scanpos = xsp;
    if (jj_scan_token(227)) return true;
    }
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT_OPERATOR &&
                  (getToken(1)).realKind == RUNSIGNEDSHIFT_OPERATOR;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_164()) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_295()
 {
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_296()
 {
    if (jj_scan_token(BIT_AND_OPERATOR)) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_281()
 {
    if (jj_3R_295()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_220()
 {
    if (jj_scan_token(TRY_KEYWORD)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_282()
 {
    if (jj_scan_token(XOR_OPERATOR)) return true;
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_269()
 {
    if (jj_3R_281()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_219()
 {
    if (jj_scan_token(THROW_KEYWORD)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_270()
 {
    if (jj_scan_token(BIT_OR_OPERATOR)) return true;
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_267()
 {
    if (jj_scan_token(THIS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    }
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_245()
 {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_scan_token(RETURN_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    if (jj_scan_token(SC_AND_OPERATOR)) return true;
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_3R_245()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_246()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_scan_token(CONTINUE_KEYWORD)) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(BREAK_KEYWORD)) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_scan_token(SC_OR_OPERATOR)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_65()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    if (jj_scan_token(ASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_207()
 {
    if (jj_scan_token(HOOK_OPERATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(COLON_OPERATOR)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_312()
 {
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_206()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_311()
 {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_294()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(ORASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(XORASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(ANDASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(LSHIFTASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(MINUSASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(PLUSASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(REMASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(SLASHASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(STARASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_280()
 {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(ASSIGN_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_266()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_90()) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_132()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_265()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    if (jj_scan_token(COLON_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_scan_token(FOR_KEYWORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(VOID_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    return false;
  }

  private boolean jj_3R_214()
 {
    if (jj_scan_token(DO_KEYWORD)) return true;
    if (jj_3R_235()) return true;
    if (jj_scan_token(WHILE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(DOT_SEPARATOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(WHILE_KEYWORD)) return true;
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_scan_token(IF_KEYWORD)) return true;
    if (jj_scan_token(LPAREN_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_293()
 {
    if (jj_scan_token(THIS_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_276()
 {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) return true;
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_275()
 {
    if (jj_scan_token(DECR_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_252()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_274()
 {
    if (jj_scan_token(INCR_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(EXCEPTION_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_3R_251()) return true;
    Token xsp;
    if (jj_3R_252()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    if (jj_scan_token(LT_OPERATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(MAP_KEYWORD)) return true;
    if (jj_scan_token(LT_OPERATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_279()
 {
    if (jj_scan_token(FINAL_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_268()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    return false;
  }

  private boolean jj_3R_242()
 {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3R_309()
 {
    if (jj_scan_token(MERGE_KEYWORD)) return true;
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    if (jj_3R_138()) return true;
    if (jj_scan_token(SEMICOLON_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_308()
 {
    if (jj_scan_token(UPSERT_KEYWORD)) return true;
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_322()
 {
    if (jj_scan_token(UPDATE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_321()
 {
    if (jj_scan_token(UNDELETE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_320()
 {
    if (jj_scan_token(DELETE_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_319()
 {
    if (jj_scan_token(INSERT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_307()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    }
    }
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_292()
 {
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_291()
 {
    if (jj_3R_308()) return true;
    return false;
  }

  private boolean jj_3R_290()
 {
    if (jj_3R_307()) return true;
    return false;
  }

  private boolean jj_3R_277()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_278()
 {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_264()
 {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_263()
 {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_262()
 {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_261()
 {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_260()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_259()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_258()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_257()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_256()
 {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_255()
 {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_254()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_253()
 {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_392()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_445()
 {
    if (jj_scan_token(COMMA_SEPARATOR)) return true;
    if (jj_3R_73()) return true;
    if (jj_scan_token(MAP_OPERATOR)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_438()
 {
    if (jj_3R_73()) return true;
    if (jj_scan_token(MAP_OPERATOR)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_445()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_418()
 {
    if (jj_3R_438()) return true;
    return false;
  }

  private boolean jj_3R_394()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_418()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_417()
 {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_393()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_334()
 {
    if (jj_scan_token(LT_OPERATOR)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) jj_scanpos = xsp;
    if (jj_scan_token(GT_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_scan_token(LBRACKET_SEPARATOR)) return true;
    if (jj_scan_token(RBRACKET_SEPARATOR)) return true;
    if (jj_scan_token(LBRACE_SEPARATOR)) return true;
    if (jj_3R_416()) return true;
    if (jj_scan_token(RBRACE_SEPARATOR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ApexParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[201];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x8088840,0x80040,0x8088840,0x8080840,0x0,0x20000,0x1000000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x38098840,0x8000,0x30010000,0x38098840,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4010080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4010080,0x4010080,0x100,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x4010080,0x0,0x0,0x0,0x0,0x0,0x0,0xf4050080,0x0,0x80040000,0xf4050080,0x0,0x0,0x80040,0x80040,0x0,0x0,0x0,0x0,0x30090000,0x80000,0x0,0x0,0xf4ad3280,0x0,0x0,0xf4a53280,0x0,0x0,0xf4a53280,0x10000000,0x20000000,0x10000,0x0,0x0,0x0,0x30010000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf4050080,0x0,0xf4050080,0xc0040000,0x0,0x0,0x0,0x10000,0x0,0x40010000,0x0,0x10000,0x0,0x40010000,0x0,0x80040000,0x40000,0xf4050080,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x30000000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4010080,0x0,0x0,0x4010080,0x0,0x0,0x0,0x0,0x0,0x0,0xf4050080,0xf4050080,0x0,0xf4a53280,0x0,0x0,0x0,0xf4050080,0xf4ad3280,0xf4a53280,0x80000,0x0,0x0,0x0,0x0,0xf4050080,0x4000,0x0,0x30090000,0xf4050080,0xf4050080,0x0,0x0,0xf4050080,0x400,0x100000,0xf4050080,0x0,0x0,0x0,0x0,0x0,0x0,0xfcad3ac0,0x30010000,0x38090840,0xf4ad3280,0xf4a53280,0xf4a53280,0x0,0x4010080,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x45d,0x45d,0x45d,0x45d,0x10400,0x0,0x0,0x0,0x0,0x10400,0x0,0x0,0x10400,0x10400,0x10400,0x1245d,0x0,0x12400,0x1245d,0x0,0x10400,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0xffff0402,0x0,0x0,0x0,0x10400,0x0,0x0,0x10400,0x0,0x0,0x10400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff0402,0xffff0402,0x10400,0x0,0x0,0x10400,0x0,0x0,0x0,0x0,0xffff0402,0x0,0x0,0x0,0x0,0x0,0x0,0xffff2d82,0x0,0x800,0xffff2d82,0x0,0x10400,0x45d,0x45d,0x0,0x0,0x0,0x0,0x10400,0x0,0x10400,0x10400,0xffffbfa2,0x180,0x40,0xffffbfa2,0x0,0x0,0xffffbfa2,0x10000,0x0,0x10400,0x0,0x10400,0x10400,0x12400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffff2d82,0x0,0xffff2d82,0x10d80,0x0,0x0,0x0,0x10580,0x0,0x10580,0x0,0x10580,0x0,0x10580,0x0,0x800,0x800,0xffff2d82,0x100,0x0,0x100,0x0,0x10000,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0xffff0402,0x0,0x0,0xffff0402,0x0,0x0,0x0,0x0,0x0,0x0,0xffff2d82,0xffff2d82,0x0,0xffffbfa2,0x0,0x0,0x0,0xffff2d82,0xffffbfa2,0xffffbfa2,0x0,0x0,0x100,0x0,0x0,0xffff2d82,0x0,0x0,0x10400,0xffff2d82,0xffff2d82,0x0,0x100,0xffff2d82,0x0,0x0,0xffff2d82,0x0,0x0,0x0,0x0,0x0,0x0,0xffffbfff,0x12400,0x1245d,0xffffbfa2,0xffffbfa2,0xffffbfa2,0x10400,0xffff0402,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x20058004,0x0,0x0,0x0,0x0,0x20058004,0x0,0x0,0x20058004,0x20058004,0x20058004,0x20058004,0x0,0x20058004,0x20058004,0x0,0x20058004,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x60fffff7,0x1000000,0x1000000,0x0,0x20058000,0x0,0x0,0x20058004,0x0,0x0,0x20058004,0x0,0x0,0x82000000,0x82000000,0x0,0x0,0x0,0x0,0x60fffff7,0x60fffff7,0x20058000,0x0,0x0,0x20058000,0x0,0x0,0x0,0x1000000,0x60fffff7,0x0,0x0,0x0,0x0,0x0,0x0,0x60fffff7,0x0,0x4,0x60fffff7,0x0,0x20058004,0x0,0x0,0x0,0x0,0x0,0x0,0x20058004,0x0,0x20058004,0x20058004,0x60fffff7,0x0,0x0,0x60fffff7,0x0,0x0,0x60fffff7,0x0,0x0,0x20058004,0x0,0x20058004,0x20058004,0x20058004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60fffff7,0x0,0x60fffff7,0x20058004,0x0,0x0,0x0,0x20058004,0x0,0x20058004,0x0,0x20058004,0x0,0x20058004,0x0,0x4,0x0,0x60fffff7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x60fffff7,0x0,0x0,0x60fffff7,0x0,0x1000000,0x0,0x0,0x0,0x0,0x60fffff7,0x60fffff7,0x0,0x60fffff7,0x0,0x40000000,0x40000000,0x60fffff7,0x60fffff7,0x60fffff7,0x0,0x0,0x0,0x0,0x0,0x60fffff7,0x0,0x0,0x20058004,0x60fffff7,0x60fffff7,0x0,0x0,0x60fffff7,0x0,0x0,0x60fffff7,0x0,0x0,0x0,0x0,0x0,0x40000000,0x60fffff7,0x20058004,0x20058004,0x60fffff7,0x60fffff7,0x60fffff7,0x20058000,0x60fffff7,0x0,0x0,0x4,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x81001,0x81001,0x81001,0x81001,0x38c02408,0x0,0x0,0x0,0x0,0x38c02408,0x0,0x0,0x38c02408,0x38c02408,0x38c02408,0x38c83409,0x0,0x38c02408,0x38c83409,0x0,0x38c02408,0x0,0x0,0x100000,0x0,0x0,0x200000,0x8,0x8000000,0x38c3e64a,0xc0000100,0xc0000100,0x0,0x20c02400,0x0,0x0,0x38c02408,0x0,0x0,0x38c02408,0x0,0x0,0x0,0x0,0xc00000,0x20,0x0,0x0,0x38c3e64a,0x38c3e64a,0x20c02400,0x40000,0x0,0x20c02400,0x40000,0x0,0x100,0x0,0x38c3e64a,0x4,0x7000010,0x1000000,0x0,0x7000014,0x7000014,0x38c3ee4a,0x0,0x18000008,0x38c3e64a,0x0,0x38c02408,0x81001,0x81001,0x0,0x0,0x0,0x0,0x38c02408,0x0,0x38c02408,0x38c02408,0x38c3e64a,0x0,0x0,0x38c3e64a,0x0,0x0,0x38c3e64a,0x0,0x0,0x38c02408,0x0,0x38c02408,0x38c02408,0x38c02408,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38c3e64a,0x0,0x38c3e64a,0x38c02408,0x0,0x0,0x0,0x38c02408,0x800,0x38c02408,0x0,0x38c02408,0x800,0x38c02408,0x0,0x18000008,0x0,0x38c3e64a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x10000,0x8,0x0,0x0,0x38c3e64a,0x100000,0x200000,0x38c3e64a,0x0,0x100,0xc0000000,0x1000000,0x0,0x0,0x38c3e64a,0x38c3e64a,0x0,0x38c3e64a,0x0,0x38042,0x18002,0x38c3e64a,0x38c3e64a,0x38c3e64a,0x0,0x0,0x0,0x0,0x0,0x38c3e64a,0x0,0x0,0x38c02408,0x38c3e64a,0x38c3e64a,0x0,0x0,0x38c3e64a,0x0,0x0,0x38c3e64a,0x0,0x0,0x0,0x0,0x0,0x18002,0x38cbf64b,0x38c02408,0x38c83409,0x38c3e64a,0x38c3e64a,0x38c3e64a,0x20c02400,0x20c3e642,0x0,0x0,0x18000008,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x18000,0x0,0x18000,0x18000,0xfffcc800,0x0,0x0,0x18000,0x18000,0xfffcc800,0x0,0x0,0xfffcc800,0xfffcc800,0xfffcc800,0xffffc800,0x0,0xfffec800,0xffffc800,0x0,0xfffcc800,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0xffefc800,0x1,0x1,0x0,0xfffc4800,0x0,0x0,0xfffcc800,0x0,0x0,0xfffcc800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffefc800,0xffefc800,0xfffc4800,0x0,0x0,0xfffc4800,0x0,0x0,0x0,0x0,0xffefc800,0x0,0x0,0x0,0x0,0x0,0x0,0xffffc800,0x0,0xffe08000,0xffffc800,0x0,0xfffcc800,0x60000,0x60000,0x0,0x60000,0x0,0x0,0xfffec800,0x0,0xfffcc800,0xfffcc800,0xffffc800,0x0,0x0,0xffffc800,0x0,0x0,0xffffc800,0x20000,0x0,0xfffcc800,0x0,0xfffcc800,0xfffcc800,0xfffec800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffc800,0x0,0xffffc800,0xfffcc800,0x0,0x0,0x0,0xfffcc800,0x2,0xfffcc800,0x0,0xfffcc800,0x2,0xfffcc800,0x0,0x8000,0x0,0xffffc800,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x7c,0x0,0xffefc800,0x0,0x0,0xffefc800,0x180,0x0,0x401,0x0,0x0,0x0,0xffffc800,0xffffc800,0x0,0xffffc800,0x0,0x0,0x0,0xffffc800,0xffffc800,0xffffc800,0x0,0x0,0x0,0x0,0x0,0xffffc800,0x0,0x0,0xfffec800,0xffffc800,0xffffc800,0x0,0x0,0xffffc800,0x0,0x0,0xffffc800,0x0,0x0,0x0,0x0,0x180000,0x0,0xffffc800,0xfffec800,0xffffc800,0xffffc800,0xffffc800,0xffffc800,0xfffc4800,0xffefc800,0xffe00000,0x0,0x8000,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x3ffffff,0x3ffffff,0x3ffffff,0x0,0x3ffffff,0x3ffffff,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x3ffffff,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffffff,0x0,0x8bffffff,0x83ffffff,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x3ffffff,0x3ffffff,0x83ffffff,0x0,0x0,0x83ffffff,0x0,0x0,0x83ffffff,0x0,0x0,0x3ffffff,0x0,0x3ffffff,0x3ffffff,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffffff,0x0,0x83ffffff,0x83ffffff,0x0,0x0,0x0,0x3ffffff,0x0,0x3ffffff,0x0,0x3ffffff,0x0,0x3ffffff,0x0,0x80000000,0x0,0x83ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ffffff,0x0,0x0,0x3ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffffff,0x83ffffff,0x0,0x83ffffff,0x0,0x0,0x0,0x83ffffff,0x83ffffff,0x83ffffff,0x0,0x0,0x0,0x0,0x0,0x83ffffff,0x0,0x0,0x3ffffff,0x83ffffff,0x83ffffff,0x0,0x0,0x83ffffff,0x0,0x0,0x83ffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x83ffffff,0x3ffffff,0x3ffffff,0x83ffffff,0x83ffffff,0x83ffffff,0x3ffffff,0x3ffffff,0xfff,0x3fff000,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x800000,0x800000,0x800000,0x800000,0x200,0x0,0x0,0x0,0x0,0x200,0x200000,0x200000,0x200,0x200,0x200,0x910200,0x0,0x200,0x900200,0x200000,0x200,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4200,0x0,0x0,0x200000,0x4200,0x40000000,0x40000000,0x200,0x4000,0x200000,0x200,0x4000,0x200000,0x0,0x0,0x0,0x0,0x4000,0x4000,0x200,0x200,0x200,0x0,0x200000,0x200,0x0,0x0,0x0,0x0,0x4200,0x7000000,0x0,0x0,0x40004000,0x7000000,0x7000000,0x8044308,0x200000,0x40000108,0x8044308,0x200000,0x200,0x800000,0x800000,0x110000,0x0,0x110000,0x200000,0x200,0x0,0x200,0x200,0x154308,0x0,0x0,0x154308,0x10000,0x100000,0x44308,0x0,0x0,0x200,0x2000000,0x200,0x200,0x200,0x1000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x8044308,0x8000000,0x44308,0x8004308,0x4000,0x4000,0x0,0x200,0x0,0x44200,0x444000,0x200,0x0,0x44200,0x444000,0x108,0x0,0x8044308,0x0,0x200000,0x0,0x44000,0x0,0x14000,0x14000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x1000000,0x4000,0x200000,0x8044308,0x8044308,0x200000,0x144308,0x110000,0x0,0x0,0x44308,0x154308,0x154308,0x0,0x200000,0x0,0x1000000,0x1000000,0x44308,0x0,0x4000,0x200,0x8044308,0x44308,0x200000,0x0,0x8044308,0x0,0x0,0x8044308,0x4000,0x0,0x0,0x200000,0x0,0x0,0x954308,0x200,0x800200,0x154308,0x154308,0x144308,0x200,0x200,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000e,0x0,0x0,0x0,0x1000000e,0x1000000e,0x3c0,0x0,0x0,0x3c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffe0000,0x0,0x10,0x20,0x2000,0x4000,0x1000,0x9,0x9,0x0,0x6,0x6,0x10000,0x300,0x8c00,0x8c00,0x300,0x3c0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c0,0x3c0,0x0,0xc0,0x0,0x0,0x0,0x0,0xc0,0xc0,0x0,0x0,0x0,0xffe00c0,0xffe00c0,0xc0,0x0,0x0,0x0,0x3c0,0xc0,0x0,0x0,0x3c0,0x0,0x0,0x3c0,0x0,0x20000000,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0xc0,0xc0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[73];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public ApexParser(CharStream stream) {
    token_source = new ApexParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 201; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_lookingAhead = false;
    jj_gen = 0;
    for (int i = 0; i < 201; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ApexParser(ApexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 201; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ApexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 201; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[257];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 201; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 257; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 73; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
