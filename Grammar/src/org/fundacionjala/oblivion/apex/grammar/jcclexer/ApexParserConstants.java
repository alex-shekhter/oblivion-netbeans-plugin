/* Generated By:JavaCC: Do not edit this line. ApexParserConstants.java */
/*
 * Copyright (c) 2014, Jalasoft and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Jalasoft or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.fundacionjala.oblivion.apex.grammar.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ApexParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int ABSTRACT_KEYWORD = 6;
  /** RegularExpression Id. */
  int ARRAY_KEYWORD = 7;
  /** RegularExpression Id. */
  int AS_KEYWORD = 8;
  /** RegularExpression Id. */
  int BREAK_KEYWORD = 9;
  /** RegularExpression Id. */
  int CATCH_KEYWORD = 10;
  /** RegularExpression Id. */
  int CLASS_KEYWORD = 11;
  /** RegularExpression Id. */
  int CONTINUE_KEYWORD = 12;
  /** RegularExpression Id. */
  int DO_KEYWORD = 13;
  /** RegularExpression Id. */
  int ELSE_KEYWORD = 14;
  /** RegularExpression Id. */
  int ENUM_KEYWORD = 15;
  /** RegularExpression Id. */
  int EXCEPTION_KEYWORD = 16;
  /** RegularExpression Id. */
  int EXTENDS_KEYWORD = 17;
  /** RegularExpression Id. */
  int FALSE_KEYWORD = 18;
  /** RegularExpression Id. */
  int FINAL_KEYWORD = 19;
  /** RegularExpression Id. */
  int FINALLY_KEYWORD = 20;
  /** RegularExpression Id. */
  int FOR_KEYWORD = 21;
  /** RegularExpression Id. */
  int FROM_KEYWORD = 22;
  /** RegularExpression Id. */
  int IF_KEYWORD = 23;
  /** RegularExpression Id. */
  int IMPLEMENTS_KEYWORD = 24;
  /** RegularExpression Id. */
  int INSTANCEOF_KEYWORD = 25;
  /** RegularExpression Id. */
  int INT_KEYWORD = 26;
  /** RegularExpression Id. */
  int INTERFACE_KEYWORD = 27;
  /** RegularExpression Id. */
  int LIST_KEYWORD = 28;
  /** RegularExpression Id. */
  int MAP_KEYWORD = 29;
  /** RegularExpression Id. */
  int NEW_KEYWORD = 30;
  /** RegularExpression Id. */
  int NULL_KEYWORD = 31;
  /** RegularExpression Id. */
  int OVERRIDE_KEYWORD = 32;
  /** RegularExpression Id. */
  int PACKAGE_KEYWORD = 33;
  /** RegularExpression Id. */
  int PRIVATE_KEYWORD = 34;
  /** RegularExpression Id. */
  int PROTECTED_KEYWORD = 35;
  /** RegularExpression Id. */
  int PUBLIC_KEYWORD = 36;
  /** RegularExpression Id. */
  int RETURN_KEYWORD = 37;
  /** RegularExpression Id. */
  int STATIC_KEYWORD = 38;
  /** RegularExpression Id. */
  int SUPER_KEYWORD = 39;
  /** RegularExpression Id. */
  int THIS_KEYWORD = 40;
  /** RegularExpression Id. */
  int THROW_KEYWORD = 41;
  /** RegularExpression Id. */
  int TRANSIENT_KEYWORD = 42;
  /** RegularExpression Id. */
  int TRUE_KEYWORD = 43;
  /** RegularExpression Id. */
  int TRY_KEYWORD = 44;
  /** RegularExpression Id. */
  int VOID_KEYWORD = 45;
  /** RegularExpression Id. */
  int WEBSERVICE_KEYWORD = 46;
  /** RegularExpression Id. */
  int WHILE_KEYWORD = 47;
  /** RegularExpression Id. */
  int ITERATOR_KEYWORD = 48;
  /** RegularExpression Id. */
  int ACTIVATE_KEYWORD = 49;
  /** RegularExpression Id. */
  int ANY_KEYWORD = 50;
  /** RegularExpression Id. */
  int AUTONOMOUS_KEYWORD = 51;
  /** RegularExpression Id. */
  int BEGIN_KEYWORD = 52;
  /** RegularExpression Id. */
  int BIGDECIMAL_KEYWORD = 53;
  /** RegularExpression Id. */
  int BYTE_KEYWORD = 54;
  /** RegularExpression Id. */
  int CASE_KEYWORD = 55;
  /** RegularExpression Id. */
  int CAST_KEYWORD = 56;
  /** RegularExpression Id. */
  int CHAR_KEYWORD = 57;
  /** RegularExpression Id. */
  int COLLECT_KEYWORD = 58;
  /** RegularExpression Id. */
  int CONST_KEYWORD = 59;
  /** RegularExpression Id. */
  int _DEFAULT_KEYWORD = 60;
  /** RegularExpression Id. */
  int END_KEYWORD = 61;
  /** RegularExpression Id. */
  int EXIT_KEYWORD = 62;
  /** RegularExpression Id. */
  int EXPORT_KEYWORD = 63;
  /** RegularExpression Id. */
  int FLOAT_KEYWORD = 64;
  /** RegularExpression Id. */
  int GOTO_KEYWORD = 65;
  /** RegularExpression Id. */
  int GROUP_KEYWORD = 66;
  /** RegularExpression Id. */
  int HAVING_KEYWORD = 67;
  /** RegularExpression Id. */
  int HINT_KEYWORD = 68;
  /** RegularExpression Id. */
  int IMPORT_KEYWORD = 69;
  /** RegularExpression Id. */
  int INNER_KEYWORD = 70;
  /** RegularExpression Id. */
  int INTO_KEYWORD = 71;
  /** RegularExpression Id. */
  int JOIN_KEYWORD = 72;
  /** RegularExpression Id. */
  int LOOP_KEYWORD = 73;
  /** RegularExpression Id. */
  int NUMBER_KEYWORD = 74;
  /** RegularExpression Id. */
  int OF_KEYWORD = 75;
  /** RegularExpression Id. */
  int OUTER_KEYWORD = 76;
  /** RegularExpression Id. */
  int PARALLEL_KEYWORD = 77;
  /** RegularExpression Id. */
  int RETRIEVE_KEYWORD = 78;
  /** RegularExpression Id. */
  int RETURNING_KEYWORD = 79;
  /** RegularExpression Id. */
  int SEARCH_KEYWORD = 80;
  /** RegularExpression Id. */
  int SHORT_KEYWORD = 81;
  /** RegularExpression Id. */
  int STAT_KEYWORD = 82;
  /** RegularExpression Id. */
  int SWITCH_KEYWORD = 83;
  /** RegularExpression Id. */
  int SYNCHRONIZED_KEYWORD = 84;
  /** RegularExpression Id. */
  int THEN_KEYWORD = 85;
  /** RegularExpression Id. */
  int TRANSACTION_KEYWORD = 86;
  /** RegularExpression Id. */
  int WHEN_KEYWORD = 87;
  /** RegularExpression Id. */
  int ANDLITERAL_KEYWORD = 88;
  /** RegularExpression Id. */
  int ASC_KEYWORD = 89;
  /** RegularExpression Id. */
  int BULK_KEYWORD = 90;
  /** RegularExpression Id. */
  int BY_KEYWORD = 91;
  /** RegularExpression Id. */
  int COMMIT_KEYWORD = 92;
  /** RegularExpression Id. */
  int CONVERTCURRENCY_KEYWORD = 93;
  /** RegularExpression Id. */
  int DELETE_KEYWORD = 94;
  /** RegularExpression Id. */
  int DESC_KEYWORD = 95;
  /** RegularExpression Id. */
  int GLOBAL_KEYWORD = 96;
  /** RegularExpression Id. */
  int INSERT_KEYWORD = 97;
  /** RegularExpression Id. */
  int LIKE_KEYWORD = 98;
  /** RegularExpression Id. */
  int LIMIT_KEYWORD = 99;
  /** RegularExpression Id. */
  int NOT_KEYWORD = 100;
  /** RegularExpression Id. */
  int NULLS_KEYWORD = 101;
  /** RegularExpression Id. */
  int MERGE_KEYWORD = 102;
  /** RegularExpression Id. */
  int ON_KEYWORD = 103;
  /** RegularExpression Id. */
  int OR_KEYWORD = 104;
  /** RegularExpression Id. */
  int ROLLBACK_KEYWORD = 105;
  /** RegularExpression Id. */
  int SAVEPOINT_KEYWORD = 106;
  /** RegularExpression Id. */
  int SELECT_KEYWORD = 107;
  /** RegularExpression Id. */
  int TESTMETHOD_KEYWORD = 108;
  /** RegularExpression Id. */
  int TOLABEL_KEYWORD = 109;
  /** RegularExpression Id. */
  int TRIGGER_KEYWORD = 110;
  /** RegularExpression Id. */
  int UNDELETE_KEYWORD = 111;
  /** RegularExpression Id. */
  int UPDATE_KEYWORD = 112;
  /** RegularExpression Id. */
  int UPSERT_KEYWORD = 113;
  /** RegularExpression Id. */
  int USING_KEYWORD = 114;
  /** RegularExpression Id. */
  int VIRTUAL_KEYWORD = 115;
  /** RegularExpression Id. */
  int WHERE_KEYWORD = 116;
  /** RegularExpression Id. */
  int ORDER_KEYWORD = 117;
  /** RegularExpression Id. */
  int FIRST_KEYWORD = 118;
  /** RegularExpression Id. */
  int LAST_KEYWORD = 119;
  /** RegularExpression Id. */
  int IN_KEYWORD = 120;
  /** RegularExpression Id. */
  int EXCLUDES_KEYWORD = 121;
  /** RegularExpression Id. */
  int INCLUDES_KEYWORD = 122;
  /** RegularExpression Id. */
  int OFFSET_KEYWORD = 123;
  /** RegularExpression Id. */
  int DATA_KEYWORD = 124;
  /** RegularExpression Id. */
  int CATEGORY_KEYWORD = 125;
  /** RegularExpression Id. */
  int ABOVE_KEYWORD = 126;
  /** RegularExpression Id. */
  int AT_KEYWORD = 127;
  /** RegularExpression Id. */
  int ABOVE_OR_BELOW_KEYWORD = 128;
  /** RegularExpression Id. */
  int FIND_KEYWORD = 129;
  /** RegularExpression Id. */
  int ALL_FIELDS_KEYWORD = 130;
  /** RegularExpression Id. */
  int EMAIL_FIELDS_KEYWORD = 131;
  /** RegularExpression Id. */
  int NAME_FIELDS_KEYWORD = 132;
  /** RegularExpression Id. */
  int PHONE_FIELDS_KEYWORD = 133;
  /** RegularExpression Id. */
  int SIDEBAR_FIELDS_KEYWORD = 134;
  /** RegularExpression Id. */
  int TRACKING_KEYWORD = 135;
  /** RegularExpression Id. */
  int VIEWSTAT_KEYWORD = 136;
  /** RegularExpression Id. */
  int DIVISION_KEYWORD = 137;
  /** RegularExpression Id. */
  int BELOW_KEYWORD = 138;
  /** RegularExpression Id. */
  int NETWORK_KEYWORD = 139;
  /** RegularExpression Id. */
  int SNIPPET_KEYWORD = 140;
  /** RegularExpression Id. */
  int TARGET_LENGTH_KEYWORD = 141;
  /** RegularExpression Id. */
  int SHARING_KEYWORD = 142;
  /** RegularExpression Id. */
  int WITHOUT_OTHER = 143;
  /** RegularExpression Id. */
  int WITH_KEYWORD = 144;
  /** RegularExpression Id. */
  int SET_KEYWORD = 145;
  /** RegularExpression Id. */
  int GET_KEYWORD = 146;
  /** RegularExpression Id. */
  int AFTER_KEYWORD = 147;
  /** RegularExpression Id. */
  int BEFORE_KEYWORD = 148;
  /** RegularExpression Id. */
  int TODAY_KEYWORD = 149;
  /** RegularExpression Id. */
  int YESTERDAY_KEYWORD = 150;
  /** RegularExpression Id. */
  int TOMORROW_KEYWORD = 151;
  /** RegularExpression Id. */
  int LAST_WEEK_KEYWORD = 152;
  /** RegularExpression Id. */
  int THIS_WEEK_KEYWORD = 153;
  /** RegularExpression Id. */
  int NEXT_WEEK_KEYWORD = 154;
  /** RegularExpression Id. */
  int LAST_MONTH_KEYWORD = 155;
  /** RegularExpression Id. */
  int THIS_MONTH_KEYWORD = 156;
  /** RegularExpression Id. */
  int NEXT_MONTH_KEYWORD = 157;
  /** RegularExpression Id. */
  int LAST_90_DAYS_KEYWORD = 158;
  /** RegularExpression Id. */
  int NEXT_90_DAYS_KEYWORD = 159;
  /** RegularExpression Id. */
  int THIS_QUARTER_KEYWORD = 160;
  /** RegularExpression Id. */
  int LAST_QUARTER_KEYWORD = 161;
  /** RegularExpression Id. */
  int NEXT_QUARTER_KEYWORD = 162;
  /** RegularExpression Id. */
  int THIS_YEAR_KEYWORD = 163;
  /** RegularExpression Id. */
  int LAST_YEAR_KEYWORD = 164;
  /** RegularExpression Id. */
  int NEXT_YEAR_KEYWORD = 165;
  /** RegularExpression Id. */
  int THIS_FISCAL_QUARTER_KEYWORD = 166;
  /** RegularExpression Id. */
  int LAST_FISCAL_QUARTER_KEYWORD = 167;
  /** RegularExpression Id. */
  int NEXT_FISCAL_QUARTER_KEYWORD = 168;
  /** RegularExpression Id. */
  int THIS_FISCAL_YEAR_KEYWORD = 169;
  /** RegularExpression Id. */
  int LAST_FISCAL_YEAR_KEYWORD = 170;
  /** RegularExpression Id. */
  int NEXT_FISCAL_YEAR_KEYWORD = 171;
  /** RegularExpression Id. */
  int LAST_N_DAYS_KEYWORD = 172;
  /** RegularExpression Id. */
  int NEXT_N_DAYS_KEYWORD = 173;
  /** RegularExpression Id. */
  int NEXT_N_WEEKS_KEYWORD = 174;
  /** RegularExpression Id. */
  int LAST_N_WEEKS_KEYWORD = 175;
  /** RegularExpression Id. */
  int NEXT_N_MONTHS_KEYWORD = 176;
  /** RegularExpression Id. */
  int LAST_N_MONTHS_KEYWORD = 177;
  /** RegularExpression Id. */
  int NEXT_N_QUARTERS_KEYWORD = 178;
  /** RegularExpression Id. */
  int LAST_N_QUARTERS_KEYWORD = 179;
  /** RegularExpression Id. */
  int NEXT_N_YEARS_KEYWORD = 180;
  /** RegularExpression Id. */
  int LAST_N_YEARS_KEYWORD = 181;
  /** RegularExpression Id. */
  int NEXT_N_FISCAL_QUARTERS_KEYWORD = 182;
  /** RegularExpression Id. */
  int LAST_N_FISCAL_QUARTERS_KEYWORD = 183;
  /** RegularExpression Id. */
  int NEXT_N_FISCAL_YEARS_KEYWORD = 184;
  /** RegularExpression Id. */
  int LAST_N_FISCAL_YEARS_KEYWORD = 185;
  /** RegularExpression Id. */
  int SINGLE_QUOTE_OPERATOR = 186;
  /** RegularExpression Id. */
  int DATE_LITERAL_EXPRESSION = 187;
  /** RegularExpression Id. */
  int DATE_LITERAL = 188;
  /** RegularExpression Id. */
  int TIME_LITERAL = 189;
  /** RegularExpression Id. */
  int SECOND_LITERAL = 190;
  /** RegularExpression Id. */
  int INTEGER_LITERAL_NUMBER = 191;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 192;
  /** RegularExpression Id. */
  int HEX_LITERAL = 193;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 194;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL_NUMBER = 195;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 196;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT_NUMBER = 197;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 198;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT_NUMBER = 199;
  /** RegularExpression Id. */
  int STRING_LITERAL_STRING = 200;
  /** RegularExpression Id. */
  int IDENTIFIER = 201;
  /** RegularExpression Id. */
  int LETTER_LITERAL = 202;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 203;
  /** RegularExpression Id. */
  int UNDERSCORE = 204;
  /** RegularExpression Id. */
  int INVALID_CHARACTER = 205;
  /** RegularExpression Id. */
  int LPAREN_SEPARATOR = 206;
  /** RegularExpression Id. */
  int RPAREN_SEPARATOR = 207;
  /** RegularExpression Id. */
  int LBRACE_SEPARATOR = 208;
  /** RegularExpression Id. */
  int RBRACE_SEPARATOR = 209;
  /** RegularExpression Id. */
  int LBRACKET_SEPARATOR = 210;
  /** RegularExpression Id. */
  int RBRACKET_SEPARATOR = 211;
  /** RegularExpression Id. */
  int SEMICOLON_SEPARATOR = 212;
  /** RegularExpression Id. */
  int COMMA_SEPARATOR = 213;
  /** RegularExpression Id. */
  int DOT_SEPARATOR = 214;
  /** RegularExpression Id. */
  int AT_SEPARATOR = 215;
  /** RegularExpression Id. */
  int ASSIGN_OPERATOR = 216;
  /** RegularExpression Id. */
  int LT_OPERATOR = 217;
  /** RegularExpression Id. */
  int GT_OPERATOR = 218;
  /** RegularExpression Id. */
  int BANG_OPERATOR = 219;
  /** RegularExpression Id. */
  int TILDE_OPERATOR = 220;
  /** RegularExpression Id. */
  int HOOK_OPERATOR = 221;
  /** RegularExpression Id. */
  int COLON_OPERATOR = 222;
  /** RegularExpression Id. */
  int MAP_OPERATOR = 223;
  /** RegularExpression Id. */
  int EQ_OPERATOR = 224;
  /** RegularExpression Id. */
  int LE_OPERATOR = 225;
  /** RegularExpression Id. */
  int GE_OPERATOR = 226;
  /** RegularExpression Id. */
  int NE_OPERATOR = 227;
  /** RegularExpression Id. */
  int SC_OR_OPERATOR = 228;
  /** RegularExpression Id. */
  int SC_AND_OPERATOR = 229;
  /** RegularExpression Id. */
  int INCR_OPERATOR = 230;
  /** RegularExpression Id. */
  int DECR_OPERATOR = 231;
  /** RegularExpression Id. */
  int PLUS_OPERATOR = 232;
  /** RegularExpression Id. */
  int MINUS_OPERATOR = 233;
  /** RegularExpression Id. */
  int STAR_OPERATOR = 234;
  /** RegularExpression Id. */
  int SLASH_OPERATOR = 235;
  /** RegularExpression Id. */
  int BIT_AND_OPERATOR = 236;
  /** RegularExpression Id. */
  int BIT_OR_OPERATOR = 237;
  /** RegularExpression Id. */
  int XOR_OPERATOR = 238;
  /** RegularExpression Id. */
  int REM_OPERATOR = 239;
  /** RegularExpression Id. */
  int LSHIFT_OPERATOR = 240;
  /** RegularExpression Id. */
  int PLUSASSIGN_OPERATOR = 241;
  /** RegularExpression Id. */
  int MINUSASSIGN_OPERATOR = 242;
  /** RegularExpression Id. */
  int STARASSIGN_OPERATOR = 243;
  /** RegularExpression Id. */
  int SLASHASSIGN_OPERATOR = 244;
  /** RegularExpression Id. */
  int ANDASSIGN_OPERATOR = 245;
  /** RegularExpression Id. */
  int ORASSIGN_OPERATOR = 246;
  /** RegularExpression Id. */
  int XORASSIGN_OPERATOR = 247;
  /** RegularExpression Id. */
  int REMASSIGN_OPERATOR = 248;
  /** RegularExpression Id. */
  int LSHIFTASSIGN_OPERATOR = 249;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN_OPERATOR = 250;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN_OPERATOR = 251;
  /** RegularExpression Id. */
  int DIFFERENT_OPERATOR = 252;
  /** RegularExpression Id. */
  int END_OF_FILE_WHITESPACE = 253;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT_OPERATOR = 254;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT_OPERATOR = 255;
  /** RegularExpression Id. */
  int STUFF_TO_IGNORE = 256;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 5>",
    "\"abstract\"",
    "\"array\"",
    "\"as\"",
    "\"break\"",
    "\"catch\"",
    "\"class\"",
    "\"continue\"",
    "\"do\"",
    "\"else\"",
    "\"enum\"",
    "\"exception\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"for\"",
    "\"from\"",
    "\"if\"",
    "\"implements\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"list\"",
    "\"map\"",
    "\"new\"",
    "\"null\"",
    "\"override\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"static\"",
    "\"super\"",
    "\"this\"",
    "\"throw\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"webservice\"",
    "\"while\"",
    "\"iterator\"",
    "\"activate\"",
    "\"any\"",
    "\"autonomous\"",
    "\"begin\"",
    "\"bigdecimal\"",
    "\"byte\"",
    "\"case\"",
    "\"cast\"",
    "\"char\"",
    "\"collect\"",
    "\"const\"",
    "\"default\"",
    "\"end\"",
    "\"exit\"",
    "\"export\"",
    "\"float\"",
    "\"goto\"",
    "\"group\"",
    "\"having\"",
    "\"hint\"",
    "\"import\"",
    "\"inner\"",
    "\"into\"",
    "\"join\"",
    "\"loop\"",
    "\"number\"",
    "\"of\"",
    "\"outer\"",
    "\"parallel\"",
    "\"retrieve\"",
    "\"returning\"",
    "\"search\"",
    "\"short\"",
    "\"stat\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"then\"",
    "\"transaction\"",
    "\"when\"",
    "\"and\"",
    "\"asc\"",
    "\"bulk\"",
    "\"by\"",
    "\"commit\"",
    "\"convertcurrency\"",
    "\"delete\"",
    "\"desc\"",
    "\"global\"",
    "\"insert\"",
    "\"like\"",
    "\"limit\"",
    "\"not\"",
    "\"nulls\"",
    "\"merge\"",
    "\"on\"",
    "\"or\"",
    "\"rollback\"",
    "\"savepoint\"",
    "\"select\"",
    "\"testmethod\"",
    "\"tolabel\"",
    "\"trigger\"",
    "\"undelete\"",
    "\"update\"",
    "\"upsert\"",
    "\"using\"",
    "\"virtual\"",
    "\"where\"",
    "\"order\"",
    "\"first\"",
    "\"last\"",
    "\"in\"",
    "\"excludes\"",
    "\"includes\"",
    "\"offset\"",
    "\"data\"",
    "\"category\"",
    "\"above\"",
    "\"at\"",
    "\"above_or_below\"",
    "\"find\"",
    "\"all fields\"",
    "\"email fields\"",
    "\"name fields\"",
    "\"phone fields\"",
    "\"sidebar fields\"",
    "\"tracking\"",
    "\"viewstat\"",
    "\"division\"",
    "\"below\"",
    "\"network\"",
    "\"snippet\"",
    "\"target_length\"",
    "\"sharing\"",
    "\"without\"",
    "\"with\"",
    "\"set\"",
    "\"get\"",
    "\"after\"",
    "\"before\"",
    "\"today\"",
    "\"yesterday\"",
    "\"tomorrow\"",
    "\"last_week\"",
    "\"this_week\"",
    "\"next_week\"",
    "\"last_month\"",
    "\"this_month\"",
    "\"next_month\"",
    "\"last_90_days\"",
    "\"next_90_days\"",
    "\"this_quarter\"",
    "\"last_quarter\"",
    "\"next_quarter\"",
    "\"this_year\"",
    "\"last_year\"",
    "\"next_year\"",
    "\"this_fiscal_quarter\"",
    "\"last_fiscal_quarter\"",
    "\"next_fiscal_quarter\"",
    "\"this_fiscal_year\"",
    "\"last_fiscal_year\"",
    "\"next_fiscal_year\"",
    "\"last_n_days\"",
    "\"next_n_days\"",
    "\"next_n_weeks\"",
    "\"last_n_weeks\"",
    "\"next_n_months\"",
    "\"last_n_months\"",
    "\"next_n_quarters\"",
    "\"last_n_quarters\"",
    "\"next_n_years\"",
    "\"last_n_years\"",
    "\"next_n_fiscal_quarters\"",
    "\"last_n_fiscal_quarters\"",
    "\"next_n_fiscal_years\"",
    "\"last_n_fiscal_years\"",
    "\"\\\'\"",
    "<DATE_LITERAL_EXPRESSION>",
    "<DATE_LITERAL>",
    "<TIME_LITERAL>",
    "<SECOND_LITERAL>",
    "<INTEGER_LITERAL_NUMBER>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL_NUMBER>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT_NUMBER>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT_NUMBER>",
    "<STRING_LITERAL_STRING>",
    "<IDENTIFIER>",
    "<LETTER_LITERAL>",
    "<NUMBER_LITERAL>",
    "\"_\"",
    "<INVALID_CHARACTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"=>\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"<>\"",
    "\"\\u001a\"",
    "\">>>\"",
    "\">>\"",
    "<STUFF_TO_IGNORE>",
  };

}
