/*
 * Copyright (c) Fundacion Jala. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */ 
package org.fundacionjala.oblivion.apex.editor.preferences;

import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import org.netbeans.modules.options.editor.spi.PreferencesCustomizer;
import org.openide.util.NbBundle;

@NbBundle.Messages({"ApexOrderingFormatting_MembersSortOrder=Members Sort Order:",
    "ApexOrderingFormatting_SortMembersByVisibility=Sort Members By Visibility",
    "ApexOrderingFormatting_SortMembersInGroupsAlphabetically=Sort Members In Groups Alphabetically",
    "ApexOrderingFormatting_MoveUp=Move Up",
    "ApexOrderingFormatting_MoveDown=Move Down"
})

/**
 * This panel is shown in the Apex editor options. Category ordering
 *
 * @author sergio_daza
 */
public class ApexOrderingFormattingPanel extends ApexFormattingPanel {

    private static final String NAME = "Ordering";
    private static final String COMMA_SEPARATOR = ",";

    private String[] membersSortOrderList;
    private String[] VisibilityList;

    /**
     * Creates new form ApexOrderingFormattingPanel
     */
    public ApexOrderingFormattingPanel() {
        filePath = "ordering.cls";
    }

    public static PreferencesCustomizer.Factory getController() {
        return new FormattingPanelController.Factory(NAME, ApexOrderingFormattingPanel.class,
                NbBundle.getMessage(ApexOrderingFormattingPanel.class, "SAMPLE_Default"));
    }

    @Override
    public String getName() {
        return NAME;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOrder = new javax.swing.JList();
        buttonMoveUpOrder = new javax.swing.JButton();
        buttonMoveDownOrder = new javax.swing.JButton();
        checkVisibility = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        listVisibility = new javax.swing.JList();
        checkSortMembersInGroupsAlphabetically = new javax.swing.JCheckBox();
        buttonMoveUpVisibility = new javax.swing.JButton();
        buttonMoveDownVisivility = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, Bundle.ApexOrderingFormatting_MembersSortOrder());

        listOrder.setModel(new javax.swing.AbstractListModel() {
            String[] strings = membersSortOrderList;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listOrder);

        org.openide.awt.Mnemonics.setLocalizedText(buttonMoveUpOrder, Bundle.ApexOrderingFormatting_MoveUp());
        buttonMoveUpOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveUpOrderActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(buttonMoveDownOrder, Bundle.ApexOrderingFormatting_MoveDown());
        buttonMoveDownOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveDownOrderActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(checkVisibility, Bundle.ApexOrderingFormatting_SortMembersByVisibility());
        checkVisibility.setActionCommand(Bundle.ApexOrderingFormatting_SortMembersByVisibility());
        checkVisibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkVisibilityActionPerformed(evt);
            }
        });

        listVisibility.setModel(new javax.swing.AbstractListModel() {
            String[] strings = VisibilityList;
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listVisibility.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listVisibility);

        org.openide.awt.Mnemonics.setLocalizedText(checkSortMembersInGroupsAlphabetically, Bundle.ApexOrderingFormatting_SortMembersInGroupsAlphabetically());

        org.openide.awt.Mnemonics.setLocalizedText(buttonMoveUpVisibility, Bundle.ApexOrderingFormatting_MoveUp());
        buttonMoveUpVisibility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveUpVisibilityActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(buttonMoveDownVisivility, Bundle.ApexOrderingFormatting_MoveDown());
        buttonMoveDownVisivility.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveDownVisivilityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkSortMembersInGroupsAlphabetically)
                    .addComponent(checkVisibility)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonMoveUpVisibility, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonMoveDownVisivility, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonMoveUpOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonMoveDownOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(buttonMoveUpOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonMoveDownOrder)
                        .addGap(132, 132, 132)
                        .addComponent(buttonMoveUpVisibility)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonMoveDownVisivility))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(checkVisibility)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkSortMembersInGroupsAlphabetically)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkVisibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkVisibilityActionPerformed
        listVisibility.setEnabled(checkVisibility.isSelected());
        buttonMoveDownVisivility.setEnabled(checkVisibility.isSelected());
        buttonMoveUpVisibility.setEnabled(checkVisibility.isSelected());
    }//GEN-LAST:event_checkVisibilityActionPerformed

    private DefaultListModel listModelOrder(String[] list) {
        DefaultListModel listModel = new DefaultListModel();
        for (String item : list) {
            listModel.addElement(item);
        }
        return listModel;
    }

    /**
     * This method changes position upwards.
     *
     * @param jList
     * @param list
     */
    private void moveUp(javax.swing.JList jList, String[] list) {
        int selectedIndex = jList.getSelectedIndex();
        if (selectedIndex > 0) {
            String selected = (String) jList.getSelectedValue();
            list[selectedIndex] = list[selectedIndex - 1];
            list[selectedIndex - 1] = selected;
            jList.setModel(listModelOrder(list));
            jList.setSelectedIndex(selectedIndex - 1);
        }
    }

    /**
     * This method changes position downwards.
     *
     * @param jList
     * @param list
     */
    private void moveDown(javax.swing.JList jList, String[] list) {
        int selectedIndex = jList.getSelectedIndex();
        if (selectedIndex < list.length - 1) {
            String selected = (String) jList.getSelectedValue();
            list[selectedIndex] = list[selectedIndex + 1];
            list[selectedIndex + 1] = selected;
            jList.setModel(listModelOrder(list));
            jList.setSelectedIndex(selectedIndex + 1);
        }
    }

    private void buttonMoveUpOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveUpOrderActionPerformed
        moveUp(listOrder, membersSortOrderList);
    }//GEN-LAST:event_buttonMoveUpOrderActionPerformed

    private void buttonMoveDownOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveDownOrderActionPerformed
        moveDown(listOrder, membersSortOrderList);
    }//GEN-LAST:event_buttonMoveDownOrderActionPerformed

    private void buttonMoveUpVisibilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveUpVisibilityActionPerformed
        moveUp(listVisibility, VisibilityList);
    }//GEN-LAST:event_buttonMoveUpVisibilityActionPerformed

    private void buttonMoveDownVisivilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveDownVisivilityActionPerformed
        moveDown(listVisibility, VisibilityList);
    }//GEN-LAST:event_buttonMoveDownVisivilityActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonMoveDownOrder;
    private javax.swing.JButton buttonMoveDownVisivility;
    private javax.swing.JButton buttonMoveUpOrder;
    private javax.swing.JButton buttonMoveUpVisibility;
    private javax.swing.JCheckBox checkSortMembersInGroupsAlphabetically;
    private javax.swing.JCheckBox checkVisibility;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listOrder;
    private javax.swing.JList listVisibility;
    // End of variables declaration//GEN-END:variables

    @Override
    void load(Preferences preferences) {
        FormatOptions formatOptions = FormatOptions.getInstance();
        membersSortOrderList = formatOptions.getOptionValue(preferences, PreferencesFormatOptions.MEMBERS_SORT_ORDER.name()).split(COMMA_SEPARATOR);
        VisibilityList = formatOptions.getOptionValue(preferences, PreferencesFormatOptions.MEMBERS_VISIBILITY.name()).split(COMMA_SEPARATOR);
        initComponents();
        checkVisibility.setSelected(formatOptions.getOptionValue(preferences, PreferencesFormatOptions.SORT_MEMBERS_BY_VISIBILITY.name()).equals("true"));
        checkSortMembersInGroupsAlphabetically.setSelected(formatOptions.getOptionValue(preferences, PreferencesFormatOptions.CHECK_SORT_MEMBERS_IN_GROUPS_ALPHABETICALLY.name()).equals("true"));
        listVisibility.setEnabled(checkVisibility.isSelected());
        buttonMoveDownVisivility.setEnabled(checkVisibility.isSelected());
        buttonMoveUpVisibility.setEnabled(checkVisibility.isSelected());
        listVisibility.setSelectedIndex(0);
        listOrder.setSelectedIndex(0);

    }

    private String arrayToString(String[] array) {
        return String.join(COMMA_SEPARATOR, array);
    }

    @Override
    void store(Preferences preferences) {
        FormatOptions formatOptions = FormatOptions.getInstance();
        formatOptions.setOptionValue(preferences, PreferencesFormatOptions.SORT_MEMBERS_BY_VISIBILITY.name(), Boolean.toString(checkVisibility.isSelected()));
        formatOptions.setOptionValue(preferences, PreferencesFormatOptions.CHECK_SORT_MEMBERS_IN_GROUPS_ALPHABETICALLY.name(), Boolean.toString(checkSortMembersInGroupsAlphabetically.isSelected()));
        formatOptions.setOptionValue(preferences, PreferencesFormatOptions.MEMBERS_SORT_ORDER.name(), arrayToString(membersSortOrderList));
        formatOptions.setOptionValue(preferences, PreferencesFormatOptions.MEMBERS_VISIBILITY.name(), arrayToString(VisibilityList));
    }

    @Override
    String getPreviewText(Preferences preferences) {
        return getCode();
    }

    @Override
    List<JComponent> getComponentsToListen() {
        List<JComponent> components = new ArrayList<>();
        components.add(checkVisibility);
        components.add(checkSortMembersInGroupsAlphabetically);
        components.add(buttonMoveDownOrder);
        components.add(buttonMoveDownVisivility);
        components.add(buttonMoveUpOrder);
        components.add(buttonMoveUpVisibility);
        return components;
    }
}
