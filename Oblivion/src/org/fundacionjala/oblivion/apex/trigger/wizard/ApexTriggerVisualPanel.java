/*
 * Copyright (c) Fundacion Jala. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */ 

package org.fundacionjala.oblivion.apex.trigger.wizard;

import org.fundacionjala.oblivion.apex.utils.APIVersion;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentListener;
import org.fundacionjala.oblivion.ui.wizard.AbstractVisualPanel;
import org.openide.WizardDescriptor;

public final class ApexTriggerVisualPanel extends AbstractVisualPanel {
    
    public static final String APEX_TRIGGER_NAME = "name";
    public static final String APEX_SOBJECT_NAME = "object";
    public static final String APEX_TRIGGER_OPERATIONS = "operations";
    public static final String APEX_TRIGGER_VERSION = "api_version";
    
    /**
     * Creates new form ApexTriggerVisualPanel1
     */
    public ApexTriggerVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return Bundle.ApexTrigger_panelTitle();
    }
    
    public String getApexTriggerName(){
        return apexTriggerName.getText().trim();
    }
    
    public String getSobjectName() {
        return sobjectName.getText().trim();
    }
    
    public String getApiVersion() {
        return apiVersion.getSelectedItem().toString();
    }
    
    public String getOperations() {
        List<String> operators = new ArrayList<>();
        if (beforeInsertCheckBox.isSelected()) {
            operators.add("before insert");
        }
        if (afterInsertCheckBox.isSelected()) {
            operators.add("after insert");
        }
        if (beforeUpdateCheckBox.isSelected()) {
            operators.add("before update");
        }
        if (afterUpdateCheckBox.isSelected()) {
            operators.add("after update");
        }
        if (beforeDeleteCheckBox.isSelected()) {
            operators.add("before delete");
        }
        if (afterDeleteCheckBox.isSelected()) {
            operators.add("after delete");
        }
        if (afterUndeleteCheckBox.isSelected()) {
            operators.add("after undelete");
        }
        return String.join(", ", operators);
    }
    
    @Override
    public boolean isValid(WizardDescriptor wizardDescriptor) {
        boolean isValid = true;
        String message = "";
        if (isValid && !isValidInput(getApexTriggerName())) {
            isValid = false;
            message = "Name cannot be empty and cannot have white spaces.";
        } else if (isValid && !ifValidName(getApexTriggerName())) {
            isValid = false;
            message = "The name contains invalid characters.";
        } else if (isValid && !isValidInput(getSobjectName())) {
            isValid = false;
            message = "Object cannot be empty and cannot have white spaces.";
        } else if (isValid && !isOperationSelected()) {
            isValid = false;
            message = "At least one operation must be selected";
        }
        wizardDescriptor.setValid(isValid);
        wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
        return isValid;
    }
    
    private boolean isValidInput(String input) {
        return !input.isEmpty() && !input.contains(" ");
    }
    
    private boolean isOperationSelected() {
        return beforeInsertCheckBox.isSelected() || afterInsertCheckBox.isSelected() || 
               beforeUpdateCheckBox.isSelected() || afterUpdateCheckBox.isSelected() ||
               beforeDeleteCheckBox.isSelected() || afterDeleteCheckBox.isSelected() ||
               afterUndeleteCheckBox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        beforeInsertCheckBox = new javax.swing.JCheckBox();
        beforeUpdateCheckBox = new javax.swing.JCheckBox();
        afterInsertCheckBox = new javax.swing.JCheckBox();
        afterUpdateCheckBox = new javax.swing.JCheckBox();
        beforeDeleteCheckBox = new javax.swing.JCheckBox();
        afterDeleteCheckBox = new javax.swing.JCheckBox();
        afterUndeleteCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        apexTriggerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        sobjectName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        apiVersion = new javax.swing.JComboBox();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(beforeInsertCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.beforeInsertCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(beforeUpdateCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.beforeUpdateCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(afterInsertCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.afterInsertCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(afterUpdateCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.afterUpdateCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(beforeDeleteCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.beforeDeleteCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(afterDeleteCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.afterDeleteCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(afterUndeleteCheckBox, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.afterUndeleteCheckBox.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beforeInsertCheckBox)
                    .addComponent(afterInsertCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beforeUpdateCheckBox)
                    .addComponent(afterUpdateCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(beforeDeleteCheckBox)
                    .addComponent(afterDeleteCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(afterUndeleteCheckBox)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beforeInsertCheckBox)
                    .addComponent(beforeUpdateCheckBox)
                    .addComponent(beforeDeleteCheckBox)
                    .addComponent(afterUndeleteCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afterInsertCheckBox)
                    .addComponent(afterUpdateCheckBox)
                    .addComponent(afterDeleteCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.jPanel1.border.title"))); // NOI18N

        apexTriggerName.setText(org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.apexTriggerName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.jLabel2.text")); // NOI18N

        sobjectName.setText(org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.sobjectName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ApexTriggerVisualPanel.class, "ApexTriggerVisualPanel.jLabel3.text")); // NOI18N

        apiVersion.setModel(new javax.swing.DefaultComboBoxModel(APIVersion.getAllAsText()));
        apiVersion.setSelectedIndex(31);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sobjectName, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                            .addComponent(apexTriggerName)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(apiVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(165, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(apexTriggerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sobjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(apiVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox afterDeleteCheckBox;
    private javax.swing.JCheckBox afterInsertCheckBox;
    private javax.swing.JCheckBox afterUndeleteCheckBox;
    private javax.swing.JCheckBox afterUpdateCheckBox;
    private javax.swing.JTextField apexTriggerName;
    private javax.swing.JComboBox apiVersion;
    private javax.swing.JCheckBox beforeDeleteCheckBox;
    private javax.swing.JCheckBox beforeInsertCheckBox;
    private javax.swing.JCheckBox beforeUpdateCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField sobjectName;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void addDocumentListener(DocumentListener documentListener) {
        apexTriggerName.getDocument().addDocumentListener(documentListener);
        sobjectName.getDocument().addDocumentListener(documentListener);
    }
    
    @Override
    protected void addChangeListener(ChangeListener changeListener) {
        afterDeleteCheckBox.addChangeListener(changeListener);
        afterInsertCheckBox.addChangeListener(changeListener);
        afterUndeleteCheckBox.addChangeListener(changeListener);
        afterUpdateCheckBox.addChangeListener(changeListener);
        beforeDeleteCheckBox.addChangeListener(changeListener);
        beforeInsertCheckBox.addChangeListener(changeListener);
        beforeUpdateCheckBox.addChangeListener(changeListener);
    }
}
