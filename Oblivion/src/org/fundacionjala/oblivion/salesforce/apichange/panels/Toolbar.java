/*
 * Copyright (c) Fundacion Jala. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */ 
package org.fundacionjala.oblivion.salesforce.apichange.panels;

import org.fundacionjala.oblivion.salesforce.apichange.tools.MetadataUtil;
import java.io.File;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.fundacionjala.oblivion.apex.utils.APIVersion;
import org.fundacionjala.oblivion.salesforce.apichange.tools.MetadataFileManager;
import org.fundacionjala.oblivion.salesforce.project.ProjectUtils;
import org.openide.cookies.OpenCookie;
import org.openide.filesystems.FileUtil;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

@NbBundle.Messages({"ApiChangeToolBar_messageChooseApi=Choose api version",
    "ApiChangeToolBar_messageChooseApi_title=Api version",
    "ApiChangeToolBar_toolTipSave=Save",
    "ApiChangeToolBar_toolTipReset=Reset",
    "ApiChangeToolBar_toolTipGoToFile=Go to file",
    "ApiChangeToolBar_toolTipNewMetadata=New metadata"
})

/**
 * Class that implement a toolbar for metadata file manager
 *
 * @author sergio_daza
 */
public final class Toolbar extends javax.swing.JPanel {

    private Form formPanel;
    private final String pathMetaData;
    private final MetadataFileManager metadataFileManager;

    /**
     * Creates new formPanel WhitePanel
     */
    public Toolbar(String pathMetaData, MetadataFileManager metadataFileManager) {
        this.formPanel = null;
        this.pathMetaData = pathMetaData;
        this.metadataFileManager = metadataFileManager;
        initComponents();
        displayToolbar();
    }

    /**
     * Enables and disables the toolbar buttons
     */
    public void displayToolbar() {
        if (metadataFileManager.existMetadataFile()) {
            this.jButtonSave.setVisible(true);
            this.jButtonRefresh.setVisible(true);
            this.jButtonSource.setVisible(true);
            this.jButtonNewMetadata.setVisible(false);
        } else {
            this.jButtonSave.setVisible(false);
            this.jButtonRefresh.setVisible(false);
            this.jButtonSource.setVisible(false);
            this.jButtonNewMetadata.setVisible(true);
        }
    }

    public void setSaveEnable(boolean enable) {
        jButtonSave.setEnabled(enable);
    }

    public void setForm(Form formPanel) {
        this.formPanel = formPanel;
    }

    /**
     * This method is called from within the constructor to initialize the formPanel. WARNING: Do NOT modify this code.
     * The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSave = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jButtonSource = new javax.swing.JButton();
        jButtonNewMetadata = new javax.swing.JButton();

        jButtonSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/fundacionjala/oblivion/salesforce/apichange/resources/icons/save.png"))); // NOI18N
        jButtonSave.setToolTipText(Bundle.ApiChangeToolBar_toolTipSave());
        jButtonSave.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButtonSave.setContentAreaFilled(false);
        jButtonSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSave.setDefaultCapable(false);
        jButtonSave.setEnabled(false);
        jButtonSave.setFocusable(false);
        jButtonSave.setRequestFocusEnabled(false);
        jButtonSave.setRolloverEnabled(false);
        jButtonSave.setVerifyInputWhenFocusTarget(false);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClickSave(evt);
            }
        });

        jButtonRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/fundacionjala/oblivion/salesforce/apichange/resources/icons/refresh.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonRefresh, org.openide.util.NbBundle.getMessage(Toolbar.class, "Toolbar.jButtonRefresh.text_1")); // NOI18N
        jButtonRefresh.setToolTipText(Bundle.ApiChangeToolBar_toolTipReset());
        jButtonRefresh.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButtonRefresh.setContentAreaFilled(false);
        jButtonRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonRefresh.setDefaultCapable(false);
        jButtonRefresh.setFocusable(false);
        jButtonRefresh.setRequestFocusEnabled(false);
        jButtonRefresh.setRolloverEnabled(false);
        jButtonRefresh.setVerifyInputWhenFocusTarget(false);
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jButtonSource.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/fundacionjala/oblivion/salesforce/apichange/resources/icons/edit.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonSource, org.openide.util.NbBundle.getMessage(Toolbar.class, "Toolbar.jButtonSource.text_1")); // NOI18N
        jButtonSource.setToolTipText(Bundle.ApiChangeToolBar_toolTipGoToFile());
        jButtonSource.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButtonSource.setContentAreaFilled(false);
        jButtonSource.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonSource.setDefaultCapable(false);
        jButtonSource.setFocusable(false);
        jButtonSource.setRequestFocusEnabled(false);
        jButtonSource.setRolloverEnabled(false);
        jButtonSource.setVerifyInputWhenFocusTarget(false);
        jButtonSource.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonSourceMouseClicked(evt);
            }
        });
        jButtonSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSourceActionPerformed(evt);
            }
        });

        jButtonNewMetadata.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/fundacionjala/oblivion/salesforce/apichange/resources/icons/xml.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonNewMetadata, org.openide.util.NbBundle.getMessage(Toolbar.class, "Toolbar.jButtonNewMetadata.text_1")); // NOI18N
        jButtonNewMetadata.setToolTipText(Bundle.ApiChangeToolBar_toolTipNewMetadata());
        jButtonNewMetadata.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButtonNewMetadata.setContentAreaFilled(false);
        jButtonNewMetadata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonNewMetadata.setDefaultCapable(false);
        jButtonNewMetadata.setFocusable(false);
        jButtonNewMetadata.setRequestFocusEnabled(false);
        jButtonNewMetadata.setRolloverEnabled(false);
        jButtonNewMetadata.setVerifyInputWhenFocusTarget(false);
        jButtonNewMetadata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNewMetadataMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSource, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNewMetadata)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButtonNewMetadata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewMetadataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNewMetadataMouseClicked
        String pathFile = ProjectUtils.getCurrentFilePath();
        String extension = FileUtil.getExtension(pathFile);
        String[] listApi = APIVersion.getAllAsText();
        JFrame frame = new JFrame("API Change");
        JComboBox apis = new JComboBox();
        apis.setModel(new javax.swing.DefaultComboBoxModel(listApi));
        String selectApi = (String) JOptionPane.showInputDialog(frame,
            Bundle.ApiChangeToolBar_messageChooseApi(),
            Bundle.ApiChangeToolBar_messageChooseApi_title(),
            JOptionPane.QUESTION_MESSAGE,
            null,
            listApi,
            listApi[31]);
        if (selectApi != null) {
            metadataFileManager.newMetadata(selectApi, MetadataUtil.getRootTagName(extension));
            displayToolbar();
            formPanel.refreshForm();
        }
    }//GEN-LAST:event_jButtonNewMetadataMouseClicked

    private void onClickSave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClickSave
        formPanel.saveMetadata();
        formPanel.refreshForm();
    }//GEN-LAST:event_onClickSave

    public void refresh() {
        formPanel.refreshForm();
        displayToolbar();
    }
    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSourceActionPerformed
    }//GEN-LAST:event_jButtonSourceActionPerformed

    private void jButtonSourceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSourceMouseClicked
        try {
            File home = new File(pathMetaData);
            if (home.isFile()) {
                DataObject.find(FileUtil.toFileObject(home)).getLookup().lookup(OpenCookie.class).open();
            }
        } catch (DataObjectNotFoundException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButtonSourceMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNewMetadata;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSource;
    // End of variables declaration//GEN-END:variables
}
