/*
 * Copyright (c) Fundacion Jala. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */ 
package org.fundacionjala.oblivion.salesforce.project.ui;

import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentListener;
import org.fundacionjala.oblivion.gradle.credentials.CredentialManager;
import org.fundacionjala.oblivion.gradle.credentials.CredentialWrapper;
import org.fundacionjala.oblivion.salesforce.project.ProjectUtils;
import org.fundacionjala.oblivion.salesforce.project.ui.Bundle;
import org.fundacionjala.oblivion.ui.wizard.AbstractVisualPanel;
import org.openide.WizardDescriptor;
import org.openide.util.NbBundle;

/**
 * Form which is used to set the values of a Salesforce credential.
 * @author Marcelo Garnica
 */
@NbBundle.Messages({"userName.error.empty=User Name cannot be empty.",
                    "password.error.empty=Password cannot be empty.",
                    "securityToken.error.empty=Security Token cannot be empty."})
public class ProjectCredentialsPanel extends AbstractVisualPanel {
    
    private static final String DEV_LOGIN_TYPE = "login";
    private static final String SANDBOX_LOGIN_TYPE = "test";
    
    private final CredentialWrapper credential;
    
    public ProjectCredentialsPanel() {
        this(true);
    }
    
    /**
     * Constructor.
     * @param isNew - Specifies if the credential panel is for a new project. 
     */
    public ProjectCredentialsPanel(boolean isNew) {
        initComponents();
        credential = isNew ? new CredentialWrapper() : CredentialManager.getDefaultStorage().getCredentialForProject(ProjectUtils.getCurrentProjectPath());
        loadCredentialValues();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameLabel = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        loginTypeLabel = new javax.swing.JLabel();
        loginType = new javax.swing.JComboBox<String>();
        securityTokenLabel = new javax.swing.JLabel();
        securityToken = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(userNameLabel, org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.userNameLabel.text")); // NOI18N

        userName.setText(org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.userName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.passwordLabel.text")); // NOI18N

        password.setText(org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.password.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(loginTypeLabel, org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.loginTypeLabel.text")); // NOI18N

        loginType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Development", "Sandbox" }));
        loginType.setSelectedIndex(0);

        org.openide.awt.Mnemonics.setLocalizedText(securityTokenLabel, org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.securityTokenLabel.text")); // NOI18N

        securityToken.setText(org.openide.util.NbBundle.getMessage(ProjectCredentialsPanel.class, "ProjectCredentialsPanel.securityToken.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(securityTokenLabel)
                    .addComponent(loginTypeLabel)
                    .addComponent(passwordLabel)
                    .addComponent(userNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userName)
                    .addComponent(password)
                    .addComponent(loginType, 0, 282, Short.MAX_VALUE)
                    .addComponent(securityToken))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(securityTokenLabel)
                    .addComponent(securityToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginTypeLabel)
                    .addComponent(loginType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(195, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> loginType;
    private javax.swing.JLabel loginTypeLabel;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField securityToken;
    private javax.swing.JLabel securityTokenLabel;
    private javax.swing.JTextField userName;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isValid(WizardDescriptor wizardDescriptor) {
        String errorMessage = "";
        boolean isValid = true;
        //TODO: validate format.
        if (!validateTextField(userName.getText())) {
            isValid = false;
            errorMessage = Bundle.userName_error_empty();
        }
        if (isValid && !validateTextField(new String(password.getPassword()))) {
            isValid = false;
            errorMessage= Bundle.password_error_empty();
        }
        if (isValid && !validateTextField(securityToken.getText())) {
            isValid = false;
            errorMessage = Bundle.securityToken_error_empty();
        }
        if (wizardDescriptor != null) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", errorMessage);
        }
        return isValid;
    }
    
    private boolean validateTextField(String field) {
        return !field.trim().isEmpty();        
    }

    @Override
    public void addDocumentListener(DocumentListener documentListener) {
        userName.getDocument().addDocumentListener(documentListener);
        password.getDocument().addDocumentListener(documentListener);
        securityToken.getDocument().addDocumentListener(documentListener);
    }

    @Override
    protected void addChangeListener(ChangeListener changeListener) {
        
    }
    
    /**
     * Loads the form with the information from the Credential wrapper.
     */
    private void loadCredentialValues() {
        userName.setText(credential.getUserName());
        password.setText(credential.getPassword());
        securityToken.setText(credential.getSecurityToken());
        int selectedIndex = 0;
        if (!credential.getLoginType().isEmpty() && !credential.getLoginType().equals(DEV_LOGIN_TYPE)) {
            selectedIndex = 1;
        }
        loginType.setSelectedIndex(selectedIndex);
    }
    
    /**
     * Retrieves the credential with the values that user put on the form.
     * @return The credential wrapper.
     */
    public CredentialWrapper getCredential() {
        String login = loginType.getSelectedIndex() == 0 ? DEV_LOGIN_TYPE : SANDBOX_LOGIN_TYPE;
        credential.setUserName(userName.getText().trim());
        credential.setPassword(new String(password.getPassword()).trim());
        credential.setSecurityToken(securityToken.getText().trim());
        credential.setLoginType(login);
        return credential;
    }

}
