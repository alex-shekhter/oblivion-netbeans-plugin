/*
 * Copyright (c) Fundacion Jala. All rights reserved.
 * Licensed under the MIT license. See LICENSE file in the project root for full license information.
 */ 
package org.fundacionjala.oblivion.tab.console;

import org.fundacionjala.oblivion.gradle.GradleTaskExecutor;
import org.fundacionjala.oblivion.salesforce.project.ProjectUtils;
import org.fundacionjala.oblivion.salesforce.project.SalesforceProject;
import org.fundacionjala.oblivion.tab.output.OutputHandler;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.fundacionjala.oblivion.tab.console//Console//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ConsoleTopComponent",
        iconBase = "org/fundacionjala/oblivion/tab/console/console.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = true)
@ActionID(category = "Window", id = "org.fundacionjala.oblivion.tab.console.ConsoleTopComponent")
@ActionReferences({@ActionReference(path = "Menu/Window/Salesforce"), @ActionReference(path = "Shortcuts", name = "C-S-C")})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ConsoleAction",
        preferredID = "ConsoleTopComponent"
)
@Messages({
    "CTL_ConsoleAction=Salesforce Console",
    "CTL_ConsoleTopComponent=Salesforce - Console",
    "HINT_ConsoleTopComponent=This is a Salesforce console"
})
/**
 * This class implements a new tab for Netbeans, that it contain  a text input 
 * for write code to execute and it has a text input for show the result.
 */
public final class ConsoleTopComponent extends TopComponent {

    private static ConsoleFileHandler tempFile = new ConsoleFileHandler();;
    private static SalesforceProject salesforceProject;
    private static String nameProject;
    private static final String EMPTY = "";
    private CodeExecutor executeCode = new CodeExecutor();
    private String pathProject;
    
    public ConsoleTopComponent() {
        initComponents();
        setName(Bundle.CTL_ConsoleTopComponent());
        setToolTipText(Bundle.HINT_ConsoleTopComponent());
        resetConsole();
        if(ProjectUtils.lookup!=null) {
            salesforceProject = (SalesforceProject) ProjectUtils.getCurrentProject();
            pathProject = ProjectUtils.getCurrentProjectPath();
            loadCode();        
    }
    }
    
    /**
     * This method is use to change the current project.
     * 
     * @param project 
     */
    public static void setProject(SalesforceProject project) {
        if(!nameProject.isEmpty()) {
            tempFile.setCode(textCode.getText());
        }
        salesforceProject = project;
        loadCode();
    }
    
    /**
     * This method returns the name of current project.
     * 
     * @return 
     */
    public static String getNameProject() {
        return nameProject;
    }
    
    /**
     * Refresh the content on panel elements when it change the project.
     */ 
    private static void loadCode() {
        nameProject = salesforceProject.getProjectDirectory().getName();
        nameProjectLabel.setText("Project: "+nameProject);
        tempFile.setPathDir(salesforceProject.getProjectDirectory().getPath());
        textCode.setEditable(true);
        textCode.setText(tempFile.getCode());
        tabs.setEnabled(true);
        tabs.setSelectedIndex(0);
        execute.setEnabled(true);
        clear.setEnabled(true);
    }
    
    /**
     * This method changes the code content on the textarea of code.
     * 
     * @param text 
     */
    public static void showResult(String text) {
        textResult.setText(text);
    }

    /**
     * Disables the panel elements when not it has a project active on IDE.
     */
    public static void resetConsole(){
        textResult.setText(EMPTY);
        textCode.setText(EMPTY);
        textCode.setEditable(false);
        nameProject = EMPTY;
        nameProjectLabel.setText(EMPTY);
        execute.setEnabled(false);
        clear.setEnabled(false);
        tabs.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        execute = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        tabCode = new javax.swing.JScrollPane();
        textCode = new javax.swing.JEditorPane();
        tabResult = new javax.swing.JScrollPane();
        textResult = new javax.swing.JEditorPane();
        nameProjectLabel = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(execute, org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.execute.text")); // NOI18N
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clear, org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.clear.text")); // NOI18N
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });

        textCode.setContentType("text/x-cls"); // NOI18N
        tabCode.setViewportView(textCode);
        textCode.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.textCode.AccessibleContext.accessibleDescription_1")); // NOI18N

        tabs.addTab(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.tabCode.TabConstraints.tabTitle"), tabCode); // NOI18N

        textResult.setEditable(false);
        tabResult.setViewportView(textResult);
        textResult.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.textResult.AccessibleContext.accessibleDescription_1")); // NOI18N

        tabs.addTab(org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.tabResult.TabConstraints.tabTitle"), tabResult); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(nameProjectLabel, org.openide.util.NbBundle.getMessage(ConsoleTopComponent.class, "ConsoleTopComponent.nameProjectLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(execute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameProjectLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(execute)
                    .addComponent(clear)
                    .addComponent(nameProjectLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        if(tabs.getSelectedIndex() == 0){
            textCode.setText(EMPTY);
        } else {
            textResult.setText(EMPTY);
        }
    }//GEN-LAST:event_clearMouseClicked

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
        tempFile.setCode(textCode.getText());
        OutputHandler.removeAllNotify();
        showResult("Waiting the response from Salesforce server...");
        GradleTaskExecutor executor = new GradleTaskExecutor(executeCode.buildTask(tempFile, salesforceProject.getCredential()));
        executor.execute();
        tabs.setSelectedComponent(tabResult);
        OutputHandler.setStatus("Execute code... ");
    }//GEN-LAST:event_executeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton clear;
    private static javax.swing.JButton execute;
    private static javax.swing.JLabel nameProjectLabel;
    private javax.swing.JScrollPane tabCode;
    private javax.swing.JScrollPane tabResult;
    private static javax.swing.JTabbedPane tabs;
    private static javax.swing.JEditorPane textCode;
    private static javax.swing.JEditorPane textResult;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
